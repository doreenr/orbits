/* !---- DO NOT EDIT: This file autogenerated by com/sun/gluegen/opengl/GLEmitter.java on Tue Jul 03 01:39:25 PDT 2007 ----! */

package javax.media.opengl;

import java.nio.*;
import java.util.*;
import javax.media.opengl.*;
import com.sun.opengl.impl.*;
import com.sun.gluegen.runtime.*;

 /**
  * <P> The basic interface to OpenGL, providing access to core
  * functionality up through the OpenGL 2.0 specification as well as
  * all vendor extensions. </P>
  *
  * <P> While the APIs for vendor extensions are unconditionally
  * exposed, the underlying functions may not be present. The method
  * {@link #isFunctionAvailable} should be used to query the
  * availability of any non-core function before it is used for the
  * first time; for example,
  * <code>gl.isFunctionAvailable("glProgramStringARB")</code>. On
  * certain platforms (Windows in particular), the most "core"
  * functionality is only OpenGL 1.1, so in theory any routines first
  * exposed in OpenGL 1.2, 1.3, and 1.4, 1.5, or 2.0 as well as vendor
  * extensions should all be queried. Calling an unavailable function
  * will cause a {@link GLException} to be raised. </P>
  *
  * {@link #isExtensionAvailable} may also be used to determine whether
  * a specific extension is available before calling the routines or
  * using the functionality it exposes: for example,
  * <code>gl.isExtensionAvailable("GL_ARB_vertex_program");</code>.
  * However, in this case it is up to the end user to know which
  * routines or functionality are associated with which OpenGL
  * extensions. It may also be used to test for the availability of a
  * particular version of OpenGL: for example,
  * <code>gl.isExtensionAvailable("GL_VERSION_1_5");</code>.
  *
  * <P> Exceptions to the window system extension naming rules:
  *
  * <UL>
  *
  * <LI> The memory allocators for the NVidia vertex_array_range (VAR)
  * extension, in particular <code>wglAllocateMemoryNV</code> /
  * <code>glXAllocateMemoryNV</code> and associated routines. {@link
  * #glAllocateMemoryNV} has been provided for window system-independent
  * access to VAR. {@link #isFunctionAvailable} will translate an argument
  * of "glAllocateMemoryNV" or "glFreeMemoryNV" into the appropriate
  * window system-specific name. </P>
  *
  * <LI> WGL_ARB_pbuffer, WGL_ARB_pixel_format, and other
  * platform-specific pbuffer functionality; the availability of
  * pbuffers can be queried on Windows, X11 and Mac OS X platforms by
  * querying {@link #isExtensionAvailable} with an argument of
  * "GL_ARB_pbuffer" or "GL_ARB_pixel_format".
  *
  * </UL> <P>
  *
  */
public interface GL 
{

  public static final int GL_FALSE = 0x0;
  public static final int GL_TRUE = 0x1;
  public static final int GL_BYTE = 0x1400;
  public static final int GL_UNSIGNED_BYTE = 0x1401;
  public static final int GL_SHORT = 0x1402;
  public static final int GL_UNSIGNED_SHORT = 0x1403;
  public static final int GL_INT = 0x1404;
  public static final int GL_UNSIGNED_INT = 0x1405;
  public static final int GL_FLOAT = 0x1406;
  public static final int GL_DOUBLE = 0x140A;
  public static final int GL_2_BYTES = 0x1407;
  public static final int GL_3_BYTES = 0x1408;
  public static final int GL_4_BYTES = 0x1409;
  public static final int GL_POINTS = 0x0000;
  public static final int GL_LINES = 0x0001;
  public static final int GL_LINE_LOOP = 0x0002;
  public static final int GL_LINE_STRIP = 0x0003;
  public static final int GL_TRIANGLES = 0x0004;
  public static final int GL_TRIANGLE_STRIP = 0x0005;
  public static final int GL_TRIANGLE_FAN = 0x0006;
  public static final int GL_QUADS = 0x0007;
  public static final int GL_QUAD_STRIP = 0x0008;
  public static final int GL_POLYGON = 0x0009;
  public static final int GL_MATRIX_MODE = 0x0BA0;
  public static final int GL_MODELVIEW = 0x1700;
  public static final int GL_PROJECTION = 0x1701;
  public static final int GL_TEXTURE = 0x1702;
  public static final int GL_POINT_SMOOTH = 0x0B10;
  public static final int GL_POINT_SIZE = 0x0B11;
  public static final int GL_POINT_SIZE_GRANULARITY = 0x0B13;
  public static final int GL_POINT_SIZE_RANGE = 0x0B12;
  public static final int GL_LINE_SMOOTH = 0x0B20;
  public static final int GL_LINE_STIPPLE = 0x0B24;
  public static final int GL_LINE_STIPPLE_PATTERN = 0x0B25;
  public static final int GL_LINE_STIPPLE_REPEAT = 0x0B26;
  public static final int GL_LINE_WIDTH = 0x0B21;
  public static final int GL_LINE_WIDTH_GRANULARITY = 0x0B23;
  public static final int GL_LINE_WIDTH_RANGE = 0x0B22;
  public static final int GL_POINT = 0x1B00;
  public static final int GL_LINE = 0x1B01;
  public static final int GL_FILL = 0x1B02;
  public static final int GL_CW = 0x0900;
  public static final int GL_CCW = 0x0901;
  public static final int GL_FRONT = 0x0404;
  public static final int GL_BACK = 0x0405;
  public static final int GL_POLYGON_MODE = 0x0B40;
  public static final int GL_POLYGON_SMOOTH = 0x0B41;
  public static final int GL_POLYGON_STIPPLE = 0x0B42;
  public static final int GL_EDGE_FLAG = 0x0B43;
  public static final int GL_CULL_FACE = 0x0B44;
  public static final int GL_CULL_FACE_MODE = 0x0B45;
  public static final int GL_FRONT_FACE = 0x0B46;
  public static final int GL_POLYGON_OFFSET_FACTOR = 0x8038;
  public static final int GL_POLYGON_OFFSET_UNITS = 0x2A00;
  public static final int GL_POLYGON_OFFSET_POINT = 0x2A01;
  public static final int GL_POLYGON_OFFSET_LINE = 0x2A02;
  public static final int GL_POLYGON_OFFSET_FILL = 0x8037;
  public static final int GL_COMPILE = 0x1300;
  public static final int GL_COMPILE_AND_EXECUTE = 0x1301;
  public static final int GL_LIST_BASE = 0x0B32;
  public static final int GL_LIST_INDEX = 0x0B33;
  public static final int GL_LIST_MODE = 0x0B30;
  public static final int GL_NEVER = 0x0200;
  public static final int GL_LESS = 0x0201;
  public static final int GL_EQUAL = 0x0202;
  public static final int GL_LEQUAL = 0x0203;
  public static final int GL_GREATER = 0x0204;
  public static final int GL_NOTEQUAL = 0x0205;
  public static final int GL_GEQUAL = 0x0206;
  public static final int GL_ALWAYS = 0x0207;
  public static final int GL_DEPTH_TEST = 0x0B71;
  public static final int GL_DEPTH_BITS = 0x0D56;
  public static final int GL_DEPTH_CLEAR_VALUE = 0x0B73;
  public static final int GL_DEPTH_FUNC = 0x0B74;
  public static final int GL_DEPTH_RANGE = 0x0B70;
  public static final int GL_DEPTH_WRITEMASK = 0x0B72;
  public static final int GL_DEPTH_COMPONENT = 0x1902;
  public static final int GL_LIGHTING = 0x0B50;
  public static final int GL_LIGHT0 = 0x4000;
  public static final int GL_LIGHT1 = 0x4001;
  public static final int GL_LIGHT2 = 0x4002;
  public static final int GL_LIGHT3 = 0x4003;
  public static final int GL_LIGHT4 = 0x4004;
  public static final int GL_LIGHT5 = 0x4005;
  public static final int GL_LIGHT6 = 0x4006;
  public static final int GL_LIGHT7 = 0x4007;
  public static final int GL_SPOT_EXPONENT = 0x1205;
  public static final int GL_SPOT_CUTOFF = 0x1206;
  public static final int GL_CONSTANT_ATTENUATION = 0x1207;
  public static final int GL_LINEAR_ATTENUATION = 0x1208;
  public static final int GL_QUADRATIC_ATTENUATION = 0x1209;
  public static final int GL_AMBIENT = 0x1200;
  public static final int GL_DIFFUSE = 0x1201;
  public static final int GL_SPECULAR = 0x1202;
  public static final int GL_SHININESS = 0x1601;
  public static final int GL_EMISSION = 0x1600;
  public static final int GL_POSITION = 0x1203;
  public static final int GL_SPOT_DIRECTION = 0x1204;
  public static final int GL_AMBIENT_AND_DIFFUSE = 0x1602;
  public static final int GL_COLOR_INDEXES = 0x1603;
  public static final int GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
  public static final int GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
  public static final int GL_LIGHT_MODEL_AMBIENT = 0x0B53;
  public static final int GL_FRONT_AND_BACK = 0x0408;
  public static final int GL_SHADE_MODEL = 0x0B54;
  public static final int GL_FLAT = 0x1D00;
  public static final int GL_SMOOTH = 0x1D01;
  public static final int GL_COLOR_MATERIAL = 0x0B57;
  public static final int GL_COLOR_MATERIAL_FACE = 0x0B55;
  public static final int GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
  public static final int GL_NORMALIZE = 0x0BA1;
  public static final int GL_CLIP_PLANE0 = 0x3000;
  public static final int GL_CLIP_PLANE1 = 0x3001;
  public static final int GL_CLIP_PLANE2 = 0x3002;
  public static final int GL_CLIP_PLANE3 = 0x3003;
  public static final int GL_CLIP_PLANE4 = 0x3004;
  public static final int GL_CLIP_PLANE5 = 0x3005;
  public static final int GL_ACCUM_RED_BITS = 0x0D58;
  public static final int GL_ACCUM_GREEN_BITS = 0x0D59;
  public static final int GL_ACCUM_BLUE_BITS = 0x0D5A;
  public static final int GL_ACCUM_ALPHA_BITS = 0x0D5B;
  public static final int GL_ACCUM_CLEAR_VALUE = 0x0B80;
  public static final int GL_ACCUM = 0x0100;
  public static final int GL_ADD = 0x0104;
  public static final int GL_LOAD = 0x0101;
  public static final int GL_MULT = 0x0103;
  public static final int GL_RETURN = 0x0102;
  public static final int GL_ALPHA_TEST = 0x0BC0;
  public static final int GL_ALPHA_TEST_REF = 0x0BC2;
  public static final int GL_ALPHA_TEST_FUNC = 0x0BC1;
  public static final int GL_BLEND = 0x0BE2;
  public static final int GL_BLEND_SRC = 0x0BE1;
  public static final int GL_BLEND_DST = 0x0BE0;
  public static final int GL_ZERO = 0x0;
  public static final int GL_ONE = 0x1;
  public static final int GL_SRC_COLOR = 0x0300;
  public static final int GL_ONE_MINUS_SRC_COLOR = 0x0301;
  public static final int GL_SRC_ALPHA = 0x0302;
  public static final int GL_ONE_MINUS_SRC_ALPHA = 0x0303;
  public static final int GL_DST_ALPHA = 0x0304;
  public static final int GL_ONE_MINUS_DST_ALPHA = 0x0305;
  public static final int GL_DST_COLOR = 0x0306;
  public static final int GL_ONE_MINUS_DST_COLOR = 0x0307;
  public static final int GL_SRC_ALPHA_SATURATE = 0x0308;
  public static final int GL_FEEDBACK = 0x1C01;
  public static final int GL_RENDER = 0x1C00;
  public static final int GL_SELECT = 0x1C02;
  public static final int GL_2D = 0x0600;
  public static final int GL_3D = 0x0601;
  public static final int GL_3D_COLOR = 0x0602;
  public static final int GL_3D_COLOR_TEXTURE = 0x0603;
  public static final int GL_4D_COLOR_TEXTURE = 0x0604;
  public static final int GL_POINT_TOKEN = 0x0701;
  public static final int GL_LINE_TOKEN = 0x0702;
  public static final int GL_LINE_RESET_TOKEN = 0x0707;
  public static final int GL_POLYGON_TOKEN = 0x0703;
  public static final int GL_BITMAP_TOKEN = 0x0704;
  public static final int GL_DRAW_PIXEL_TOKEN = 0x0705;
  public static final int GL_COPY_PIXEL_TOKEN = 0x0706;
  public static final int GL_PASS_THROUGH_TOKEN = 0x0700;
  public static final int GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
  public static final int GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
  public static final int GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
  public static final int GL_SELECTION_BUFFER_POINTER = 0x0DF3;
  public static final int GL_SELECTION_BUFFER_SIZE = 0x0DF4;
  public static final int GL_FOG = 0x0B60;
  public static final int GL_FOG_MODE = 0x0B65;
  public static final int GL_FOG_DENSITY = 0x0B62;
  public static final int GL_FOG_COLOR = 0x0B66;
  public static final int GL_FOG_INDEX = 0x0B61;
  public static final int GL_FOG_START = 0x0B63;
  public static final int GL_FOG_END = 0x0B64;
  public static final int GL_LINEAR = 0x2601;
  public static final int GL_EXP = 0x0800;
  public static final int GL_EXP2 = 0x0801;
  public static final int GL_LOGIC_OP = 0x0BF1;
  public static final int GL_INDEX_LOGIC_OP = 0x0BF1;
  public static final int GL_COLOR_LOGIC_OP = 0x0BF2;
  public static final int GL_LOGIC_OP_MODE = 0x0BF0;
  public static final int GL_CLEAR = 0x1500;
  public static final int GL_SET = 0x150F;
  public static final int GL_COPY = 0x1503;
  public static final int GL_COPY_INVERTED = 0x150C;
  public static final int GL_NOOP = 0x1505;
  public static final int GL_INVERT = 0x150A;
  public static final int GL_AND = 0x1501;
  public static final int GL_NAND = 0x150E;
  public static final int GL_OR = 0x1507;
  public static final int GL_NOR = 0x1508;
  public static final int GL_XOR = 0x1506;
  public static final int GL_EQUIV = 0x1509;
  public static final int GL_AND_REVERSE = 0x1502;
  public static final int GL_AND_INVERTED = 0x1504;
  public static final int GL_OR_REVERSE = 0x150B;
  public static final int GL_OR_INVERTED = 0x150D;
  public static final int GL_STENCIL_TEST = 0x0B90;
  public static final int GL_STENCIL_WRITEMASK = 0x0B98;
  public static final int GL_STENCIL_BITS = 0x0D57;
  public static final int GL_STENCIL_FUNC = 0x0B92;
  public static final int GL_STENCIL_VALUE_MASK = 0x0B93;
  public static final int GL_STENCIL_REF = 0x0B97;
  public static final int GL_STENCIL_FAIL = 0x0B94;
  public static final int GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
  public static final int GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
  public static final int GL_STENCIL_CLEAR_VALUE = 0x0B91;
  public static final int GL_STENCIL_INDEX = 0x1901;
  public static final int GL_KEEP = 0x1E00;
  public static final int GL_REPLACE = 0x1E01;
  public static final int GL_INCR = 0x1E02;
  public static final int GL_DECR = 0x1E03;
  public static final int GL_NONE = 0x0;
  public static final int GL_LEFT = 0x0406;
  public static final int GL_RIGHT = 0x0407;
  public static final int GL_FRONT_LEFT = 0x0400;
  public static final int GL_FRONT_RIGHT = 0x0401;
  public static final int GL_BACK_LEFT = 0x0402;
  public static final int GL_BACK_RIGHT = 0x0403;
  public static final int GL_AUX0 = 0x0409;
  public static final int GL_AUX1 = 0x040A;
  public static final int GL_AUX2 = 0x040B;
  public static final int GL_AUX3 = 0x040C;
  public static final int GL_COLOR_INDEX = 0x1900;
  public static final int GL_RED = 0x1903;
  public static final int GL_GREEN = 0x1904;
  public static final int GL_BLUE = 0x1905;
  public static final int GL_ALPHA = 0x1906;
  public static final int GL_LUMINANCE = 0x1909;
  public static final int GL_LUMINANCE_ALPHA = 0x190A;
  public static final int GL_ALPHA_BITS = 0x0D55;
  public static final int GL_RED_BITS = 0x0D52;
  public static final int GL_GREEN_BITS = 0x0D53;
  public static final int GL_BLUE_BITS = 0x0D54;
  public static final int GL_INDEX_BITS = 0x0D51;
  public static final int GL_SUBPIXEL_BITS = 0x0D50;
  public static final int GL_AUX_BUFFERS = 0x0C00;
  public static final int GL_READ_BUFFER = 0x0C02;
  public static final int GL_DRAW_BUFFER = 0x0C01;
  public static final int GL_DOUBLEBUFFER = 0x0C32;
  public static final int GL_STEREO = 0x0C33;
  public static final int GL_BITMAP = 0x1A00;
  public static final int GL_COLOR = 0x1800;
  public static final int GL_DEPTH = 0x1801;
  public static final int GL_STENCIL = 0x1802;
  public static final int GL_DITHER = 0x0BD0;
  public static final int GL_RGB = 0x1907;
  public static final int GL_RGBA = 0x1908;
  public static final int GL_MAX_LIST_NESTING = 0x0B31;
  public static final int GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
  public static final int GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
  public static final int GL_MAX_NAME_STACK_DEPTH = 0x0D37;
  public static final int GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
  public static final int GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
  public static final int GL_MAX_EVAL_ORDER = 0x0D30;
  public static final int GL_MAX_LIGHTS = 0x0D31;
  public static final int GL_MAX_CLIP_PLANES = 0x0D32;
  public static final int GL_MAX_TEXTURE_SIZE = 0x0D33;
  public static final int GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
  public static final int GL_MAX_VIEWPORT_DIMS = 0x0D3A;
  public static final int GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
  public static final int GL_ATTRIB_STACK_DEPTH = 0x0BB0;
  public static final int GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
  public static final int GL_COLOR_CLEAR_VALUE = 0x0C22;
  public static final int GL_COLOR_WRITEMASK = 0x0C23;
  public static final int GL_CURRENT_INDEX = 0x0B01;
  public static final int GL_CURRENT_COLOR = 0x0B00;
  public static final int GL_CURRENT_NORMAL = 0x0B02;
  public static final int GL_CURRENT_RASTER_COLOR = 0x0B04;
  public static final int GL_CURRENT_RASTER_DISTANCE = 0x0B09;
  public static final int GL_CURRENT_RASTER_INDEX = 0x0B05;
  public static final int GL_CURRENT_RASTER_POSITION = 0x0B07;
  public static final int GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
  public static final int GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
  public static final int GL_CURRENT_TEXTURE_COORDS = 0x0B03;
  public static final int GL_INDEX_CLEAR_VALUE = 0x0C20;
  public static final int GL_INDEX_MODE = 0x0C30;
  public static final int GL_INDEX_WRITEMASK = 0x0C21;
  public static final int GL_MODELVIEW_MATRIX = 0x0BA6;
  public static final int GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
  public static final int GL_NAME_STACK_DEPTH = 0x0D70;
  public static final int GL_PROJECTION_MATRIX = 0x0BA7;
  public static final int GL_PROJECTION_STACK_DEPTH = 0x0BA4;
  public static final int GL_RENDER_MODE = 0x0C40;
  public static final int GL_RGBA_MODE = 0x0C31;
  public static final int GL_TEXTURE_MATRIX = 0x0BA8;
  public static final int GL_TEXTURE_STACK_DEPTH = 0x0BA5;
  public static final int GL_VIEWPORT = 0x0BA2;
  public static final int GL_AUTO_NORMAL = 0x0D80;
  public static final int GL_MAP1_COLOR_4 = 0x0D90;
  public static final int GL_MAP1_INDEX = 0x0D91;
  public static final int GL_MAP1_NORMAL = 0x0D92;
  public static final int GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
  public static final int GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
  public static final int GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
  public static final int GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
  public static final int GL_MAP1_VERTEX_3 = 0x0D97;
  public static final int GL_MAP1_VERTEX_4 = 0x0D98;
  public static final int GL_MAP2_COLOR_4 = 0x0DB0;
  public static final int GL_MAP2_INDEX = 0x0DB1;
  public static final int GL_MAP2_NORMAL = 0x0DB2;
  public static final int GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
  public static final int GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
  public static final int GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
  public static final int GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
  public static final int GL_MAP2_VERTEX_3 = 0x0DB7;
  public static final int GL_MAP2_VERTEX_4 = 0x0DB8;
  public static final int GL_MAP1_GRID_DOMAIN = 0x0DD0;
  public static final int GL_MAP1_GRID_SEGMENTS = 0x0DD1;
  public static final int GL_MAP2_GRID_DOMAIN = 0x0DD2;
  public static final int GL_MAP2_GRID_SEGMENTS = 0x0DD3;
  public static final int GL_COEFF = 0x0A00;
  public static final int GL_DOMAIN = 0x0A02;
  public static final int GL_ORDER = 0x0A01;
  public static final int GL_FOG_HINT = 0x0C54;
  public static final int GL_LINE_SMOOTH_HINT = 0x0C52;
  public static final int GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
  public static final int GL_POINT_SMOOTH_HINT = 0x0C51;
  public static final int GL_POLYGON_SMOOTH_HINT = 0x0C53;
  public static final int GL_DONT_CARE = 0x1100;
  public static final int GL_FASTEST = 0x1101;
  public static final int GL_NICEST = 0x1102;
  public static final int GL_SCISSOR_TEST = 0x0C11;
  public static final int GL_SCISSOR_BOX = 0x0C10;
  public static final int GL_MAP_COLOR = 0x0D10;
  public static final int GL_MAP_STENCIL = 0x0D11;
  public static final int GL_INDEX_SHIFT = 0x0D12;
  public static final int GL_INDEX_OFFSET = 0x0D13;
  public static final int GL_RED_SCALE = 0x0D14;
  public static final int GL_RED_BIAS = 0x0D15;
  public static final int GL_GREEN_SCALE = 0x0D18;
  public static final int GL_GREEN_BIAS = 0x0D19;
  public static final int GL_BLUE_SCALE = 0x0D1A;
  public static final int GL_BLUE_BIAS = 0x0D1B;
  public static final int GL_ALPHA_SCALE = 0x0D1C;
  public static final int GL_ALPHA_BIAS = 0x0D1D;
  public static final int GL_DEPTH_SCALE = 0x0D1E;
  public static final int GL_DEPTH_BIAS = 0x0D1F;
  public static final int GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
  public static final int GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
  public static final int GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
  public static final int GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
  public static final int GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
  public static final int GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
  public static final int GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
  public static final int GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
  public static final int GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
  public static final int GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
  public static final int GL_PIXEL_MAP_S_TO_S = 0x0C71;
  public static final int GL_PIXEL_MAP_I_TO_I = 0x0C70;
  public static final int GL_PIXEL_MAP_I_TO_R = 0x0C72;
  public static final int GL_PIXEL_MAP_I_TO_G = 0x0C73;
  public static final int GL_PIXEL_MAP_I_TO_B = 0x0C74;
  public static final int GL_PIXEL_MAP_I_TO_A = 0x0C75;
  public static final int GL_PIXEL_MAP_R_TO_R = 0x0C76;
  public static final int GL_PIXEL_MAP_G_TO_G = 0x0C77;
  public static final int GL_PIXEL_MAP_B_TO_B = 0x0C78;
  public static final int GL_PIXEL_MAP_A_TO_A = 0x0C79;
  public static final int GL_PACK_ALIGNMENT = 0x0D05;
  public static final int GL_PACK_LSB_FIRST = 0x0D01;
  public static final int GL_PACK_ROW_LENGTH = 0x0D02;
  public static final int GL_PACK_SKIP_PIXELS = 0x0D04;
  public static final int GL_PACK_SKIP_ROWS = 0x0D03;
  public static final int GL_PACK_SWAP_BYTES = 0x0D00;
  public static final int GL_UNPACK_ALIGNMENT = 0x0CF5;
  public static final int GL_UNPACK_LSB_FIRST = 0x0CF1;
  public static final int GL_UNPACK_ROW_LENGTH = 0x0CF2;
  public static final int GL_UNPACK_SKIP_PIXELS = 0x0CF4;
  public static final int GL_UNPACK_SKIP_ROWS = 0x0CF3;
  public static final int GL_UNPACK_SWAP_BYTES = 0x0CF0;
  public static final int GL_ZOOM_X = 0x0D16;
  public static final int GL_ZOOM_Y = 0x0D17;
  public static final int GL_TEXTURE_ENV = 0x2300;
  public static final int GL_TEXTURE_ENV_MODE = 0x2200;
  public static final int GL_TEXTURE_1D = 0x0DE0;
  public static final int GL_TEXTURE_2D = 0x0DE1;
  public static final int GL_TEXTURE_WRAP_S = 0x2802;
  public static final int GL_TEXTURE_WRAP_T = 0x2803;
  public static final int GL_TEXTURE_MAG_FILTER = 0x2800;
  public static final int GL_TEXTURE_MIN_FILTER = 0x2801;
  public static final int GL_TEXTURE_ENV_COLOR = 0x2201;
  public static final int GL_TEXTURE_GEN_S = 0x0C60;
  public static final int GL_TEXTURE_GEN_T = 0x0C61;
  public static final int GL_TEXTURE_GEN_MODE = 0x2500;
  public static final int GL_TEXTURE_BORDER_COLOR = 0x1004;
  public static final int GL_TEXTURE_WIDTH = 0x1000;
  public static final int GL_TEXTURE_HEIGHT = 0x1001;
  public static final int GL_TEXTURE_BORDER = 0x1005;
  public static final int GL_TEXTURE_COMPONENTS = 0x1003;
  public static final int GL_TEXTURE_RED_SIZE = 0x805C;
  public static final int GL_TEXTURE_GREEN_SIZE = 0x805D;
  public static final int GL_TEXTURE_BLUE_SIZE = 0x805E;
  public static final int GL_TEXTURE_ALPHA_SIZE = 0x805F;
  public static final int GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
  public static final int GL_TEXTURE_INTENSITY_SIZE = 0x8061;
  public static final int GL_NEAREST_MIPMAP_NEAREST = 0x2700;
  public static final int GL_NEAREST_MIPMAP_LINEAR = 0x2702;
  public static final int GL_LINEAR_MIPMAP_NEAREST = 0x2701;
  public static final int GL_LINEAR_MIPMAP_LINEAR = 0x2703;
  public static final int GL_OBJECT_LINEAR = 0x2401;
  public static final int GL_OBJECT_PLANE = 0x2501;
  public static final int GL_EYE_LINEAR = 0x2400;
  public static final int GL_EYE_PLANE = 0x2502;
  public static final int GL_SPHERE_MAP = 0x2402;
  public static final int GL_DECAL = 0x2101;
  public static final int GL_MODULATE = 0x2100;
  public static final int GL_NEAREST = 0x2600;
  public static final int GL_REPEAT = 0x2901;
  public static final int GL_CLAMP = 0x2900;
  public static final int GL_S = 0x2000;
  public static final int GL_T = 0x2001;
  public static final int GL_R = 0x2002;
  public static final int GL_Q = 0x2003;
  public static final int GL_TEXTURE_GEN_R = 0x0C62;
  public static final int GL_TEXTURE_GEN_Q = 0x0C63;
  public static final int GL_VENDOR = 0x1F00;
  public static final int GL_RENDERER = 0x1F01;
  public static final int GL_VERSION = 0x1F02;
  public static final int GL_EXTENSIONS = 0x1F03;
  public static final int GL_NO_ERROR = 0x0;
  public static final int GL_INVALID_VALUE = 0x0501;
  public static final int GL_INVALID_ENUM = 0x0500;
  public static final int GL_INVALID_OPERATION = 0x0502;
  public static final int GL_STACK_OVERFLOW = 0x0503;
  public static final int GL_STACK_UNDERFLOW = 0x0504;
  public static final int GL_OUT_OF_MEMORY = 0x0505;
  public static final int GL_CURRENT_BIT = 0x00000001;
  public static final int GL_POINT_BIT = 0x00000002;
  public static final int GL_LINE_BIT = 0x00000004;
  public static final int GL_POLYGON_BIT = 0x00000008;
  public static final int GL_POLYGON_STIPPLE_BIT = 0x00000010;
  public static final int GL_PIXEL_MODE_BIT = 0x00000020;
  public static final int GL_LIGHTING_BIT = 0x00000040;
  public static final int GL_FOG_BIT = 0x00000080;
  public static final int GL_DEPTH_BUFFER_BIT = 0x00000100;
  public static final int GL_ACCUM_BUFFER_BIT = 0x00000200;
  public static final int GL_STENCIL_BUFFER_BIT = 0x00000400;
  public static final int GL_VIEWPORT_BIT = 0x00000800;
  public static final int GL_TRANSFORM_BIT = 0x00001000;
  public static final int GL_ENABLE_BIT = 0x00002000;
  public static final int GL_COLOR_BUFFER_BIT = 0x00004000;
  public static final int GL_HINT_BIT = 0x00008000;
  public static final int GL_EVAL_BIT = 0x00010000;
  public static final int GL_LIST_BIT = 0x00020000;
  public static final int GL_TEXTURE_BIT = 0x00040000;
  public static final int GL_SCISSOR_BIT = 0x00080000;
  public static final int GL_ALL_ATTRIB_BITS = 0x000FFFFF;
  public static final int GL_PROXY_TEXTURE_1D = 0x8063;
  public static final int GL_PROXY_TEXTURE_2D = 0x8064;
  public static final int GL_TEXTURE_PRIORITY = 0x8066;
  public static final int GL_TEXTURE_RESIDENT = 0x8067;
  public static final int GL_TEXTURE_BINDING_1D = 0x8068;
  public static final int GL_TEXTURE_BINDING_2D = 0x8069;
  public static final int GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
  public static final int GL_ALPHA4 = 0x803B;
  public static final int GL_ALPHA8 = 0x803C;
  public static final int GL_ALPHA12 = 0x803D;
  public static final int GL_ALPHA16 = 0x803E;
  public static final int GL_LUMINANCE4 = 0x803F;
  public static final int GL_LUMINANCE8 = 0x8040;
  public static final int GL_LUMINANCE12 = 0x8041;
  public static final int GL_LUMINANCE16 = 0x8042;
  public static final int GL_LUMINANCE4_ALPHA4 = 0x8043;
  public static final int GL_LUMINANCE6_ALPHA2 = 0x8044;
  public static final int GL_LUMINANCE8_ALPHA8 = 0x8045;
  public static final int GL_LUMINANCE12_ALPHA4 = 0x8046;
  public static final int GL_LUMINANCE12_ALPHA12 = 0x8047;
  public static final int GL_LUMINANCE16_ALPHA16 = 0x8048;
  public static final int GL_INTENSITY = 0x8049;
  public static final int GL_INTENSITY4 = 0x804A;
  public static final int GL_INTENSITY8 = 0x804B;
  public static final int GL_INTENSITY12 = 0x804C;
  public static final int GL_INTENSITY16 = 0x804D;
  public static final int GL_R3_G3_B2 = 0x2A10;
  public static final int GL_RGB4 = 0x804F;
  public static final int GL_RGB5 = 0x8050;
  public static final int GL_RGB8 = 0x8051;
  public static final int GL_RGB10 = 0x8052;
  public static final int GL_RGB12 = 0x8053;
  public static final int GL_RGB16 = 0x8054;
  public static final int GL_RGBA2 = 0x8055;
  public static final int GL_RGBA4 = 0x8056;
  public static final int GL_RGB5_A1 = 0x8057;
  public static final int GL_RGBA8 = 0x8058;
  public static final int GL_RGB10_A2 = 0x8059;
  public static final int GL_RGBA12 = 0x805A;
  public static final int GL_RGBA16 = 0x805B;
  public static final int GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
  public static final int GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
  public static final long GL_ALL_CLIENT_ATTRIB_BITS = 0xFFFFFFFF;
  public static final long GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
  public static final int GL_VERTEX_ARRAY = 0x8074;
  public static final int GL_NORMAL_ARRAY = 0x8075;
  public static final int GL_COLOR_ARRAY = 0x8076;
  public static final int GL_INDEX_ARRAY = 0x8077;
  public static final int GL_TEXTURE_COORD_ARRAY = 0x8078;
  public static final int GL_EDGE_FLAG_ARRAY = 0x8079;
  public static final int GL_VERTEX_ARRAY_SIZE = 0x807A;
  public static final int GL_VERTEX_ARRAY_TYPE = 0x807B;
  public static final int GL_VERTEX_ARRAY_STRIDE = 0x807C;
  public static final int GL_NORMAL_ARRAY_TYPE = 0x807E;
  public static final int GL_NORMAL_ARRAY_STRIDE = 0x807F;
  public static final int GL_COLOR_ARRAY_SIZE = 0x8081;
  public static final int GL_COLOR_ARRAY_TYPE = 0x8082;
  public static final int GL_COLOR_ARRAY_STRIDE = 0x8083;
  public static final int GL_INDEX_ARRAY_TYPE = 0x8085;
  public static final int GL_INDEX_ARRAY_STRIDE = 0x8086;
  public static final int GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
  public static final int GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
  public static final int GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
  public static final int GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
  public static final int GL_VERTEX_ARRAY_POINTER = 0x808E;
  public static final int GL_NORMAL_ARRAY_POINTER = 0x808F;
  public static final int GL_COLOR_ARRAY_POINTER = 0x8090;
  public static final int GL_INDEX_ARRAY_POINTER = 0x8091;
  public static final int GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
  public static final int GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
  public static final int GL_V2F = 0x2A20;
  public static final int GL_V3F = 0x2A21;
  public static final int GL_C4UB_V2F = 0x2A22;
  public static final int GL_C4UB_V3F = 0x2A23;
  public static final int GL_C3F_V3F = 0x2A24;
  public static final int GL_N3F_V3F = 0x2A25;
  public static final int GL_C4F_N3F_V3F = 0x2A26;
  public static final int GL_T2F_V3F = 0x2A27;
  public static final int GL_T4F_V4F = 0x2A28;
  public static final int GL_T2F_C4UB_V3F = 0x2A29;
  public static final int GL_T2F_C3F_V3F = 0x2A2A;
  public static final int GL_T2F_N3F_V3F = 0x2A2B;
  public static final int GL_T2F_C4F_N3F_V3F = 0x2A2C;
  public static final int GL_T4F_C4F_N3F_V4F = 0x2A2D;
  public static final int GL_GLEXT_VERSION = 36;
  public static final int GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
  public static final int GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
  public static final int GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
  public static final int GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
  public static final int GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
  public static final int GL_RESCALE_NORMAL = 0x803A;
  public static final int GL_TEXTURE_BINDING_3D = 0x806A;
  public static final int GL_PACK_SKIP_IMAGES = 0x806B;
  public static final int GL_PACK_IMAGE_HEIGHT = 0x806C;
  public static final int GL_UNPACK_SKIP_IMAGES = 0x806D;
  public static final int GL_UNPACK_IMAGE_HEIGHT = 0x806E;
  public static final int GL_TEXTURE_3D = 0x806F;
  public static final int GL_PROXY_TEXTURE_3D = 0x8070;
  public static final int GL_TEXTURE_DEPTH = 0x8071;
  public static final int GL_TEXTURE_WRAP_R = 0x8072;
  public static final int GL_MAX_3D_TEXTURE_SIZE = 0x8073;
  public static final int GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
  public static final int GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
  public static final int GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
  public static final int GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
  public static final int GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
  public static final int GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
  public static final int GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
  public static final int GL_BGR = 0x80E0;
  public static final int GL_BGRA = 0x80E1;
  public static final int GL_MAX_ELEMENTS_VERTICES = 0x80E8;
  public static final int GL_MAX_ELEMENTS_INDICES = 0x80E9;
  public static final int GL_CLAMP_TO_EDGE = 0x812F;
  public static final int GL_TEXTURE_MIN_LOD = 0x813A;
  public static final int GL_TEXTURE_MAX_LOD = 0x813B;
  public static final int GL_TEXTURE_BASE_LEVEL = 0x813C;
  public static final int GL_TEXTURE_MAX_LEVEL = 0x813D;
  public static final int GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
  public static final int GL_SINGLE_COLOR = 0x81F9;
  public static final int GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
  public static final int GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
  public static final int GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
  public static final int GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
  public static final int GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
  public static final int GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
  public static final int GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
  public static final int GL_CONSTANT_COLOR = 0x8001;
  public static final int GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
  public static final int GL_CONSTANT_ALPHA = 0x8003;
  public static final int GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
  public static final int GL_BLEND_COLOR = 0x8005;
  public static final int GL_FUNC_ADD = 0x8006;
  public static final int GL_MIN = 0x8007;
  public static final int GL_MAX = 0x8008;
  public static final int GL_BLEND_EQUATION = 0x8009;
  public static final int GL_FUNC_SUBTRACT = 0x800A;
  public static final int GL_FUNC_REVERSE_SUBTRACT = 0x800B;
  public static final int GL_CONVOLUTION_1D = 0x8010;
  public static final int GL_CONVOLUTION_2D = 0x8011;
  public static final int GL_SEPARABLE_2D = 0x8012;
  public static final int GL_CONVOLUTION_BORDER_MODE = 0x8013;
  public static final int GL_CONVOLUTION_FILTER_SCALE = 0x8014;
  public static final int GL_CONVOLUTION_FILTER_BIAS = 0x8015;
  public static final int GL_REDUCE = 0x8016;
  public static final int GL_CONVOLUTION_FORMAT = 0x8017;
  public static final int GL_CONVOLUTION_WIDTH = 0x8018;
  public static final int GL_CONVOLUTION_HEIGHT = 0x8019;
  public static final int GL_MAX_CONVOLUTION_WIDTH = 0x801A;
  public static final int GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
  public static final int GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
  public static final int GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
  public static final int GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
  public static final int GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
  public static final int GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
  public static final int GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
  public static final int GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
  public static final int GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
  public static final int GL_HISTOGRAM = 0x8024;
  public static final int GL_PROXY_HISTOGRAM = 0x8025;
  public static final int GL_HISTOGRAM_WIDTH = 0x8026;
  public static final int GL_HISTOGRAM_FORMAT = 0x8027;
  public static final int GL_HISTOGRAM_RED_SIZE = 0x8028;
  public static final int GL_HISTOGRAM_GREEN_SIZE = 0x8029;
  public static final int GL_HISTOGRAM_BLUE_SIZE = 0x802A;
  public static final int GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
  public static final int GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
  public static final int GL_HISTOGRAM_SINK = 0x802D;
  public static final int GL_MINMAX = 0x802E;
  public static final int GL_MINMAX_FORMAT = 0x802F;
  public static final int GL_MINMAX_SINK = 0x8030;
  public static final int GL_TABLE_TOO_LARGE = 0x8031;
  public static final int GL_COLOR_MATRIX = 0x80B1;
  public static final int GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
  public static final int GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
  public static final int GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
  public static final int GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
  public static final int GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
  public static final int GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
  public static final int GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
  public static final int GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
  public static final int GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
  public static final int GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
  public static final int GL_COLOR_TABLE = 0x80D0;
  public static final int GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
  public static final int GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
  public static final int GL_PROXY_COLOR_TABLE = 0x80D3;
  public static final int GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
  public static final int GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
  public static final int GL_COLOR_TABLE_SCALE = 0x80D6;
  public static final int GL_COLOR_TABLE_BIAS = 0x80D7;
  public static final int GL_COLOR_TABLE_FORMAT = 0x80D8;
  public static final int GL_COLOR_TABLE_WIDTH = 0x80D9;
  public static final int GL_COLOR_TABLE_RED_SIZE = 0x80DA;
  public static final int GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
  public static final int GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
  public static final int GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
  public static final int GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
  public static final int GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
  public static final int GL_CONSTANT_BORDER = 0x8151;
  public static final int GL_REPLICATE_BORDER = 0x8153;
  public static final int GL_CONVOLUTION_BORDER_COLOR = 0x8154;
  public static final int GL_TEXTURE0 = 0x84C0;
  public static final int GL_TEXTURE1 = 0x84C1;
  public static final int GL_TEXTURE2 = 0x84C2;
  public static final int GL_TEXTURE3 = 0x84C3;
  public static final int GL_TEXTURE4 = 0x84C4;
  public static final int GL_TEXTURE5 = 0x84C5;
  public static final int GL_TEXTURE6 = 0x84C6;
  public static final int GL_TEXTURE7 = 0x84C7;
  public static final int GL_TEXTURE8 = 0x84C8;
  public static final int GL_TEXTURE9 = 0x84C9;
  public static final int GL_TEXTURE10 = 0x84CA;
  public static final int GL_TEXTURE11 = 0x84CB;
  public static final int GL_TEXTURE12 = 0x84CC;
  public static final int GL_TEXTURE13 = 0x84CD;
  public static final int GL_TEXTURE14 = 0x84CE;
  public static final int GL_TEXTURE15 = 0x84CF;
  public static final int GL_TEXTURE16 = 0x84D0;
  public static final int GL_TEXTURE17 = 0x84D1;
  public static final int GL_TEXTURE18 = 0x84D2;
  public static final int GL_TEXTURE19 = 0x84D3;
  public static final int GL_TEXTURE20 = 0x84D4;
  public static final int GL_TEXTURE21 = 0x84D5;
  public static final int GL_TEXTURE22 = 0x84D6;
  public static final int GL_TEXTURE23 = 0x84D7;
  public static final int GL_TEXTURE24 = 0x84D8;
  public static final int GL_TEXTURE25 = 0x84D9;
  public static final int GL_TEXTURE26 = 0x84DA;
  public static final int GL_TEXTURE27 = 0x84DB;
  public static final int GL_TEXTURE28 = 0x84DC;
  public static final int GL_TEXTURE29 = 0x84DD;
  public static final int GL_TEXTURE30 = 0x84DE;
  public static final int GL_TEXTURE31 = 0x84DF;
  public static final int GL_ACTIVE_TEXTURE = 0x84E0;
  public static final int GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
  public static final int GL_MAX_TEXTURE_UNITS = 0x84E2;
  public static final int GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
  public static final int GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
  public static final int GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
  public static final int GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
  public static final int GL_MULTISAMPLE = 0x809D;
  public static final int GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
  public static final int GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
  public static final int GL_SAMPLE_COVERAGE = 0x80A0;
  public static final int GL_SAMPLE_BUFFERS = 0x80A8;
  public static final int GL_SAMPLES = 0x80A9;
  public static final int GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
  public static final int GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
  public static final int GL_MULTISAMPLE_BIT = 0x20000000;
  public static final int GL_NORMAL_MAP = 0x8511;
  public static final int GL_REFLECTION_MAP = 0x8512;
  public static final int GL_TEXTURE_CUBE_MAP = 0x8513;
  public static final int GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
  public static final int GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
  public static final int GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
  public static final int GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
  public static final int GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
  public static final int GL_COMPRESSED_ALPHA = 0x84E9;
  public static final int GL_COMPRESSED_LUMINANCE = 0x84EA;
  public static final int GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
  public static final int GL_COMPRESSED_INTENSITY = 0x84EC;
  public static final int GL_COMPRESSED_RGB = 0x84ED;
  public static final int GL_COMPRESSED_RGBA = 0x84EE;
  public static final int GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
  public static final int GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
  public static final int GL_TEXTURE_COMPRESSED = 0x86A1;
  public static final int GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
  public static final int GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
  public static final int GL_CLAMP_TO_BORDER = 0x812D;
  public static final int GL_COMBINE = 0x8570;
  public static final int GL_COMBINE_RGB = 0x8571;
  public static final int GL_COMBINE_ALPHA = 0x8572;
  public static final int GL_SOURCE0_RGB = 0x8580;
  public static final int GL_SOURCE1_RGB = 0x8581;
  public static final int GL_SOURCE2_RGB = 0x8582;
  public static final int GL_SOURCE0_ALPHA = 0x8588;
  public static final int GL_SOURCE1_ALPHA = 0x8589;
  public static final int GL_SOURCE2_ALPHA = 0x858A;
  public static final int GL_OPERAND0_RGB = 0x8590;
  public static final int GL_OPERAND1_RGB = 0x8591;
  public static final int GL_OPERAND2_RGB = 0x8592;
  public static final int GL_OPERAND0_ALPHA = 0x8598;
  public static final int GL_OPERAND1_ALPHA = 0x8599;
  public static final int GL_OPERAND2_ALPHA = 0x859A;
  public static final int GL_RGB_SCALE = 0x8573;
  public static final int GL_ADD_SIGNED = 0x8574;
  public static final int GL_INTERPOLATE = 0x8575;
  public static final int GL_SUBTRACT = 0x84E7;
  public static final int GL_CONSTANT = 0x8576;
  public static final int GL_PRIMARY_COLOR = 0x8577;
  public static final int GL_PREVIOUS = 0x8578;
  public static final int GL_DOT3_RGB = 0x86AE;
  public static final int GL_DOT3_RGBA = 0x86AF;
  public static final int GL_BLEND_DST_RGB = 0x80C8;
  public static final int GL_BLEND_SRC_RGB = 0x80C9;
  public static final int GL_BLEND_DST_ALPHA = 0x80CA;
  public static final int GL_BLEND_SRC_ALPHA = 0x80CB;
  public static final int GL_POINT_SIZE_MIN = 0x8126;
  public static final int GL_POINT_SIZE_MAX = 0x8127;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
  public static final int GL_POINT_DISTANCE_ATTENUATION = 0x8129;
  public static final int GL_GENERATE_MIPMAP = 0x8191;
  public static final int GL_GENERATE_MIPMAP_HINT = 0x8192;
  public static final int GL_DEPTH_COMPONENT16 = 0x81A5;
  public static final int GL_DEPTH_COMPONENT24 = 0x81A6;
  public static final int GL_DEPTH_COMPONENT32 = 0x81A7;
  public static final int GL_MIRRORED_REPEAT = 0x8370;
  public static final int GL_FOG_COORDINATE_SOURCE = 0x8450;
  public static final int GL_FOG_COORDINATE = 0x8451;
  public static final int GL_FRAGMENT_DEPTH = 0x8452;
  public static final int GL_CURRENT_FOG_COORDINATE = 0x8453;
  public static final int GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
  public static final int GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
  public static final int GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
  public static final int GL_FOG_COORDINATE_ARRAY = 0x8457;
  public static final int GL_COLOR_SUM = 0x8458;
  public static final int GL_CURRENT_SECONDARY_COLOR = 0x8459;
  public static final int GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
  public static final int GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
  public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
  public static final int GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
  public static final int GL_SECONDARY_COLOR_ARRAY = 0x845E;
  public static final int GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
  public static final int GL_TEXTURE_FILTER_CONTROL = 0x8500;
  public static final int GL_TEXTURE_LOD_BIAS = 0x8501;
  public static final int GL_INCR_WRAP = 0x8507;
  public static final int GL_DECR_WRAP = 0x8508;
  public static final int GL_TEXTURE_DEPTH_SIZE = 0x884A;
  public static final int GL_DEPTH_TEXTURE_MODE = 0x884B;
  public static final int GL_TEXTURE_COMPARE_MODE = 0x884C;
  public static final int GL_TEXTURE_COMPARE_FUNC = 0x884D;
  public static final int GL_COMPARE_R_TO_TEXTURE = 0x884E;
  public static final int GL_BUFFER_SIZE = 0x8764;
  public static final int GL_BUFFER_USAGE = 0x8765;
  public static final int GL_QUERY_COUNTER_BITS = 0x8864;
  public static final int GL_CURRENT_QUERY = 0x8865;
  public static final int GL_QUERY_RESULT = 0x8866;
  public static final int GL_QUERY_RESULT_AVAILABLE = 0x8867;
  public static final int GL_ARRAY_BUFFER = 0x8892;
  public static final int GL_ELEMENT_ARRAY_BUFFER = 0x8893;
  public static final int GL_ARRAY_BUFFER_BINDING = 0x8894;
  public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
  public static final int GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
  public static final int GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
  public static final int GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
  public static final int GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
  public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
  public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
  public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
  public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
  public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
  public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
  public static final int GL_READ_ONLY = 0x88B8;
  public static final int GL_WRITE_ONLY = 0x88B9;
  public static final int GL_READ_WRITE = 0x88BA;
  public static final int GL_BUFFER_ACCESS = 0x88BB;
  public static final int GL_BUFFER_MAPPED = 0x88BC;
  public static final int GL_BUFFER_MAP_POINTER = 0x88BD;
  public static final int GL_STREAM_DRAW = 0x88E0;
  public static final int GL_STREAM_READ = 0x88E1;
  public static final int GL_STREAM_COPY = 0x88E2;
  public static final int GL_STATIC_DRAW = 0x88E4;
  public static final int GL_STATIC_READ = 0x88E5;
  public static final int GL_STATIC_COPY = 0x88E6;
  public static final int GL_DYNAMIC_DRAW = 0x88E8;
  public static final int GL_DYNAMIC_READ = 0x88E9;
  public static final int GL_DYNAMIC_COPY = 0x88EA;
  public static final int GL_SAMPLES_PASSED = 0x8914;
  public static final int GL_FOG_COORD_SRC = 0x8450;
  public static final int GL_FOG_COORD = 0x8451;
  public static final int GL_CURRENT_FOG_COORD = 0x8453;
  public static final int GL_FOG_COORD_ARRAY_TYPE = 0x8454;
  public static final int GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
  public static final int GL_FOG_COORD_ARRAY_POINTER = 0x8456;
  public static final int GL_FOG_COORD_ARRAY = 0x8457;
  public static final int GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
  public static final int GL_SRC0_RGB = 0x8580;
  public static final int GL_SRC1_RGB = 0x8581;
  public static final int GL_SRC2_RGB = 0x8582;
  public static final int GL_SRC0_ALPHA = 0x8588;
  public static final int GL_SRC1_ALPHA = 0x8589;
  public static final int GL_SRC2_ALPHA = 0x858A;
  public static final int GL_BLEND_EQUATION_RGB = 0x8009;
  public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
  public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
  public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
  public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
  public static final int GL_CURRENT_VERTEX_ATTRIB = 0x8626;
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
  public static final int GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
  public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
  public static final int GL_STENCIL_BACK_FUNC = 0x8800;
  public static final int GL_STENCIL_BACK_FAIL = 0x8801;
  public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
  public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
  public static final int GL_MAX_DRAW_BUFFERS = 0x8824;
  public static final int GL_DRAW_BUFFER0 = 0x8825;
  public static final int GL_DRAW_BUFFER1 = 0x8826;
  public static final int GL_DRAW_BUFFER2 = 0x8827;
  public static final int GL_DRAW_BUFFER3 = 0x8828;
  public static final int GL_DRAW_BUFFER4 = 0x8829;
  public static final int GL_DRAW_BUFFER5 = 0x882A;
  public static final int GL_DRAW_BUFFER6 = 0x882B;
  public static final int GL_DRAW_BUFFER7 = 0x882C;
  public static final int GL_DRAW_BUFFER8 = 0x882D;
  public static final int GL_DRAW_BUFFER9 = 0x882E;
  public static final int GL_DRAW_BUFFER10 = 0x882F;
  public static final int GL_DRAW_BUFFER11 = 0x8830;
  public static final int GL_DRAW_BUFFER12 = 0x8831;
  public static final int GL_DRAW_BUFFER13 = 0x8832;
  public static final int GL_DRAW_BUFFER14 = 0x8833;
  public static final int GL_DRAW_BUFFER15 = 0x8834;
  public static final int GL_BLEND_EQUATION_ALPHA = 0x883D;
  public static final int GL_POINT_SPRITE = 0x8861;
  public static final int GL_COORD_REPLACE = 0x8862;
  public static final int GL_MAX_VERTEX_ATTRIBS = 0x8869;
  public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
  public static final int GL_MAX_TEXTURE_COORDS = 0x8871;
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
  public static final int GL_FRAGMENT_SHADER = 0x8B30;
  public static final int GL_VERTEX_SHADER = 0x8B31;
  public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
  public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
  public static final int GL_MAX_VARYING_FLOATS = 0x8B4B;
  public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
  public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
  public static final int GL_SHADER_TYPE = 0x8B4F;
  public static final int GL_FLOAT_VEC2 = 0x8B50;
  public static final int GL_FLOAT_VEC3 = 0x8B51;
  public static final int GL_FLOAT_VEC4 = 0x8B52;
  public static final int GL_INT_VEC2 = 0x8B53;
  public static final int GL_INT_VEC3 = 0x8B54;
  public static final int GL_INT_VEC4 = 0x8B55;
  public static final int GL_BOOL = 0x8B56;
  public static final int GL_BOOL_VEC2 = 0x8B57;
  public static final int GL_BOOL_VEC3 = 0x8B58;
  public static final int GL_BOOL_VEC4 = 0x8B59;
  public static final int GL_FLOAT_MAT2 = 0x8B5A;
  public static final int GL_FLOAT_MAT3 = 0x8B5B;
  public static final int GL_FLOAT_MAT4 = 0x8B5C;
  public static final int GL_SAMPLER_1D = 0x8B5D;
  public static final int GL_SAMPLER_2D = 0x8B5E;
  public static final int GL_SAMPLER_3D = 0x8B5F;
  public static final int GL_SAMPLER_CUBE = 0x8B60;
  public static final int GL_SAMPLER_1D_SHADOW = 0x8B61;
  public static final int GL_SAMPLER_2D_SHADOW = 0x8B62;
  public static final int GL_DELETE_STATUS = 0x8B80;
  public static final int GL_COMPILE_STATUS = 0x8B81;
  public static final int GL_LINK_STATUS = 0x8B82;
  public static final int GL_VALIDATE_STATUS = 0x8B83;
  public static final int GL_INFO_LOG_LENGTH = 0x8B84;
  public static final int GL_ATTACHED_SHADERS = 0x8B85;
  public static final int GL_ACTIVE_UNIFORMS = 0x8B86;
  public static final int GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
  public static final int GL_SHADER_SOURCE_LENGTH = 0x8B88;
  public static final int GL_ACTIVE_ATTRIBUTES = 0x8B89;
  public static final int GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
  public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
  public static final int GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
  public static final int GL_CURRENT_PROGRAM = 0x8B8D;
  public static final int GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
  public static final int GL_LOWER_LEFT = 0x8CA1;
  public static final int GL_UPPER_LEFT = 0x8CA2;
  public static final int GL_STENCIL_BACK_REF = 0x8CA3;
  public static final int GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
  public static final int GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
  public static final int GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
  public static final int GL_PIXEL_PACK_BUFFER = 0x88EB;
  public static final int GL_PIXEL_UNPACK_BUFFER = 0x88EC;
  public static final int GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
  public static final int GL_FLOAT_MAT2x3 = 0x8B65;
  public static final int GL_FLOAT_MAT2x4 = 0x8B66;
  public static final int GL_FLOAT_MAT3x2 = 0x8B67;
  public static final int GL_FLOAT_MAT3x4 = 0x8B68;
  public static final int GL_FLOAT_MAT4x2 = 0x8B69;
  public static final int GL_FLOAT_MAT4x3 = 0x8B6A;
  public static final int GL_SRGB = 0x8C40;
  public static final int GL_SRGB8 = 0x8C41;
  public static final int GL_SRGB_ALPHA = 0x8C42;
  public static final int GL_SRGB8_ALPHA8 = 0x8C43;
  public static final int GL_SLUMINANCE_ALPHA = 0x8C44;
  public static final int GL_SLUMINANCE8_ALPHA8 = 0x8C45;
  public static final int GL_SLUMINANCE = 0x8C46;
  public static final int GL_SLUMINANCE8 = 0x8C47;
  public static final int GL_COMPRESSED_SRGB = 0x8C48;
  public static final int GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
  public static final int GL_COMPRESSED_SLUMINANCE = 0x8C4A;
  public static final int GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
  public static final int GL_POINT_SIZE_MIN_ARB = 0x8126;
  public static final int GL_POINT_SIZE_MAX_ARB = 0x8127;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
  public static final int GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
  public static final int GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
  public static final int GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
  public static final int GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
  public static final int GL_VERTEX_BLEND_ARB = 0x86A7;
  public static final int GL_CURRENT_WEIGHT_ARB = 0x86A8;
  public static final int GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
  public static final int GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
  public static final int GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
  public static final int GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
  public static final int GL_WEIGHT_ARRAY_ARB = 0x86AD;
  public static final int GL_MODELVIEW0_ARB = 0x1700;
  public static final int GL_MODELVIEW1_ARB = 0x850A;
  public static final int GL_MODELVIEW2_ARB = 0x8722;
  public static final int GL_MODELVIEW3_ARB = 0x8723;
  public static final int GL_MODELVIEW4_ARB = 0x8724;
  public static final int GL_MODELVIEW5_ARB = 0x8725;
  public static final int GL_MODELVIEW6_ARB = 0x8726;
  public static final int GL_MODELVIEW7_ARB = 0x8727;
  public static final int GL_MODELVIEW8_ARB = 0x8728;
  public static final int GL_MODELVIEW9_ARB = 0x8729;
  public static final int GL_MODELVIEW10_ARB = 0x872A;
  public static final int GL_MODELVIEW11_ARB = 0x872B;
  public static final int GL_MODELVIEW12_ARB = 0x872C;
  public static final int GL_MODELVIEW13_ARB = 0x872D;
  public static final int GL_MODELVIEW14_ARB = 0x872E;
  public static final int GL_MODELVIEW15_ARB = 0x872F;
  public static final int GL_MODELVIEW16_ARB = 0x8730;
  public static final int GL_MODELVIEW17_ARB = 0x8731;
  public static final int GL_MODELVIEW18_ARB = 0x8732;
  public static final int GL_MODELVIEW19_ARB = 0x8733;
  public static final int GL_MODELVIEW20_ARB = 0x8734;
  public static final int GL_MODELVIEW21_ARB = 0x8735;
  public static final int GL_MODELVIEW22_ARB = 0x8736;
  public static final int GL_MODELVIEW23_ARB = 0x8737;
  public static final int GL_MODELVIEW24_ARB = 0x8738;
  public static final int GL_MODELVIEW25_ARB = 0x8739;
  public static final int GL_MODELVIEW26_ARB = 0x873A;
  public static final int GL_MODELVIEW27_ARB = 0x873B;
  public static final int GL_MODELVIEW28_ARB = 0x873C;
  public static final int GL_MODELVIEW29_ARB = 0x873D;
  public static final int GL_MODELVIEW30_ARB = 0x873E;
  public static final int GL_MODELVIEW31_ARB = 0x873F;
  public static final int GL_MATRIX_PALETTE_ARB = 0x8840;
  public static final int GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
  public static final int GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
  public static final int GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
  public static final int GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
  public static final int GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
  public static final int GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
  public static final int GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
  public static final int GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
  public static final int GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
  public static final int GL_MIRRORED_REPEAT_ARB = 0x8370;
  public static final int GL_DEPTH_COMPONENT16_ARB = 0x81A5;
  public static final int GL_DEPTH_COMPONENT24_ARB = 0x81A6;
  public static final int GL_DEPTH_COMPONENT32_ARB = 0x81A7;
  public static final int GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
  public static final int GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
  public static final int GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
  public static final int GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
  public static final int GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
  public static final int GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
  public static final int GL_COLOR_SUM_ARB = 0x8458;
  public static final int GL_VERTEX_PROGRAM_ARB = 0x8620;
  public static final int GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
  public static final int GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
  public static final int GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
  public static final int GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
  public static final int GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
  public static final int GL_PROGRAM_LENGTH_ARB = 0x8627;
  public static final int GL_PROGRAM_STRING_ARB = 0x8628;
  public static final int GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
  public static final int GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
  public static final int GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
  public static final int GL_CURRENT_MATRIX_ARB = 0x8641;
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
  public static final int GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
  public static final int GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
  public static final int GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
  public static final int GL_PROGRAM_BINDING_ARB = 0x8677;
  public static final int GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
  public static final int GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
  public static final int GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
  public static final int GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
  public static final int GL_PROGRAM_FORMAT_ARB = 0x8876;
  public static final int GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
  public static final int GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
  public static final int GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
  public static final int GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
  public static final int GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
  public static final int GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
  public static final int GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
  public static final int GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
  public static final int GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
  public static final int GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
  public static final int GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
  public static final int GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
  public static final int GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
  public static final int GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
  public static final int GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
  public static final int GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
  public static final int GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
  public static final int GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
  public static final int GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
  public static final int GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
  public static final int GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
  public static final int GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
  public static final int GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
  public static final int GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
  public static final int GL_MATRIX0_ARB = 0x88C0;
  public static final int GL_MATRIX1_ARB = 0x88C1;
  public static final int GL_MATRIX2_ARB = 0x88C2;
  public static final int GL_MATRIX3_ARB = 0x88C3;
  public static final int GL_MATRIX4_ARB = 0x88C4;
  public static final int GL_MATRIX5_ARB = 0x88C5;
  public static final int GL_MATRIX6_ARB = 0x88C6;
  public static final int GL_MATRIX7_ARB = 0x88C7;
  public static final int GL_MATRIX8_ARB = 0x88C8;
  public static final int GL_MATRIX9_ARB = 0x88C9;
  public static final int GL_MATRIX10_ARB = 0x88CA;
  public static final int GL_MATRIX11_ARB = 0x88CB;
  public static final int GL_MATRIX12_ARB = 0x88CC;
  public static final int GL_MATRIX13_ARB = 0x88CD;
  public static final int GL_MATRIX14_ARB = 0x88CE;
  public static final int GL_MATRIX15_ARB = 0x88CF;
  public static final int GL_MATRIX16_ARB = 0x88D0;
  public static final int GL_MATRIX17_ARB = 0x88D1;
  public static final int GL_MATRIX18_ARB = 0x88D2;
  public static final int GL_MATRIX19_ARB = 0x88D3;
  public static final int GL_MATRIX20_ARB = 0x88D4;
  public static final int GL_MATRIX21_ARB = 0x88D5;
  public static final int GL_MATRIX22_ARB = 0x88D6;
  public static final int GL_MATRIX23_ARB = 0x88D7;
  public static final int GL_MATRIX24_ARB = 0x88D8;
  public static final int GL_MATRIX25_ARB = 0x88D9;
  public static final int GL_MATRIX26_ARB = 0x88DA;
  public static final int GL_MATRIX27_ARB = 0x88DB;
  public static final int GL_MATRIX28_ARB = 0x88DC;
  public static final int GL_MATRIX29_ARB = 0x88DD;
  public static final int GL_MATRIX30_ARB = 0x88DE;
  public static final int GL_MATRIX31_ARB = 0x88DF;
  public static final int GL_FRAGMENT_PROGRAM_ARB = 0x8804;
  public static final int GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
  public static final int GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
  public static final int GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
  public static final int GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
  public static final int GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
  public static final int GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
  public static final int GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
  public static final int GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
  public static final int GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
  public static final int GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
  public static final int GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
  public static final int GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
  public static final int GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
  public static final int GL_BUFFER_SIZE_ARB = 0x8764;
  public static final int GL_BUFFER_USAGE_ARB = 0x8765;
  public static final int GL_ARRAY_BUFFER_ARB = 0x8892;
  public static final int GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
  public static final int GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
  public static final int GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
  public static final int GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
  public static final int GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
  public static final int GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
  public static final int GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
  public static final int GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
  public static final int GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
  public static final int GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
  public static final int GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
  public static final int GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
  public static final int GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
  public static final int GL_READ_ONLY_ARB = 0x88B8;
  public static final int GL_WRITE_ONLY_ARB = 0x88B9;
  public static final int GL_READ_WRITE_ARB = 0x88BA;
  public static final int GL_BUFFER_ACCESS_ARB = 0x88BB;
  public static final int GL_BUFFER_MAPPED_ARB = 0x88BC;
  public static final int GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
  public static final int GL_STREAM_DRAW_ARB = 0x88E0;
  public static final int GL_STREAM_READ_ARB = 0x88E1;
  public static final int GL_STREAM_COPY_ARB = 0x88E2;
  public static final int GL_STATIC_DRAW_ARB = 0x88E4;
  public static final int GL_STATIC_READ_ARB = 0x88E5;
  public static final int GL_STATIC_COPY_ARB = 0x88E6;
  public static final int GL_DYNAMIC_DRAW_ARB = 0x88E8;
  public static final int GL_DYNAMIC_READ_ARB = 0x88E9;
  public static final int GL_DYNAMIC_COPY_ARB = 0x88EA;
  public static final int GL_QUERY_COUNTER_BITS_ARB = 0x8864;
  public static final int GL_CURRENT_QUERY_ARB = 0x8865;
  public static final int GL_QUERY_RESULT_ARB = 0x8866;
  public static final int GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
  public static final int GL_SAMPLES_PASSED_ARB = 0x8914;
  public static final int GL_PROGRAM_OBJECT_ARB = 0x8B40;
  public static final int GL_SHADER_OBJECT_ARB = 0x8B48;
  public static final int GL_OBJECT_TYPE_ARB = 0x8B4E;
  public static final int GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
  public static final int GL_FLOAT_VEC2_ARB = 0x8B50;
  public static final int GL_FLOAT_VEC3_ARB = 0x8B51;
  public static final int GL_FLOAT_VEC4_ARB = 0x8B52;
  public static final int GL_INT_VEC2_ARB = 0x8B53;
  public static final int GL_INT_VEC3_ARB = 0x8B54;
  public static final int GL_INT_VEC4_ARB = 0x8B55;
  public static final int GL_BOOL_ARB = 0x8B56;
  public static final int GL_BOOL_VEC2_ARB = 0x8B57;
  public static final int GL_BOOL_VEC3_ARB = 0x8B58;
  public static final int GL_BOOL_VEC4_ARB = 0x8B59;
  public static final int GL_FLOAT_MAT2_ARB = 0x8B5A;
  public static final int GL_FLOAT_MAT3_ARB = 0x8B5B;
  public static final int GL_FLOAT_MAT4_ARB = 0x8B5C;
  public static final int GL_SAMPLER_1D_ARB = 0x8B5D;
  public static final int GL_SAMPLER_2D_ARB = 0x8B5E;
  public static final int GL_SAMPLER_3D_ARB = 0x8B5F;
  public static final int GL_SAMPLER_CUBE_ARB = 0x8B60;
  public static final int GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
  public static final int GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
  public static final int GL_SAMPLER_2D_RECT_ARB = 0x8B63;
  public static final int GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
  public static final int GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
  public static final int GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
  public static final int GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
  public static final int GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
  public static final int GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
  public static final int GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
  public static final int GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
  public static final int GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
  public static final int GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
  public static final int GL_VERTEX_SHADER_ARB = 0x8B31;
  public static final int GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
  public static final int GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
  public static final int GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
  public static final int GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
  public static final int GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
  public static final int GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
  public static final int GL_FRAGMENT_SHADER_ARB = 0x8B30;
  public static final int GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
  public static final int GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
  public static final int GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
  public static final int GL_POINT_SPRITE_ARB = 0x8861;
  public static final int GL_COORD_REPLACE_ARB = 0x8862;
  public static final int GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
  public static final int GL_DRAW_BUFFER0_ARB = 0x8825;
  public static final int GL_DRAW_BUFFER1_ARB = 0x8826;
  public static final int GL_DRAW_BUFFER2_ARB = 0x8827;
  public static final int GL_DRAW_BUFFER3_ARB = 0x8828;
  public static final int GL_DRAW_BUFFER4_ARB = 0x8829;
  public static final int GL_DRAW_BUFFER5_ARB = 0x882A;
  public static final int GL_DRAW_BUFFER6_ARB = 0x882B;
  public static final int GL_DRAW_BUFFER7_ARB = 0x882C;
  public static final int GL_DRAW_BUFFER8_ARB = 0x882D;
  public static final int GL_DRAW_BUFFER9_ARB = 0x882E;
  public static final int GL_DRAW_BUFFER10_ARB = 0x882F;
  public static final int GL_DRAW_BUFFER11_ARB = 0x8830;
  public static final int GL_DRAW_BUFFER12_ARB = 0x8831;
  public static final int GL_DRAW_BUFFER13_ARB = 0x8832;
  public static final int GL_DRAW_BUFFER14_ARB = 0x8833;
  public static final int GL_DRAW_BUFFER15_ARB = 0x8834;
  public static final int GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
  public static final int GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
  public static final int GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
  public static final int GL_RGBA_FLOAT_MODE_ARB = 0x8820;
  public static final int GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
  public static final int GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
  public static final int GL_CLAMP_READ_COLOR_ARB = 0x891C;
  public static final int GL_FIXED_ONLY_ARB = 0x891D;
  public static final int GL_HALF_FLOAT_ARB = 0x140B;
  public static final int GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
  public static final int GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
  public static final int GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
  public static final int GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
  public static final int GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
  public static final int GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
  public static final int GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
  public static final int GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
  public static final int GL_RGBA32F_ARB = 0x8814;
  public static final int GL_RGB32F_ARB = 0x8815;
  public static final int GL_ALPHA32F_ARB = 0x8816;
  public static final int GL_INTENSITY32F_ARB = 0x8817;
  public static final int GL_LUMINANCE32F_ARB = 0x8818;
  public static final int GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
  public static final int GL_RGBA16F_ARB = 0x881A;
  public static final int GL_RGB16F_ARB = 0x881B;
  public static final int GL_ALPHA16F_ARB = 0x881C;
  public static final int GL_INTENSITY16F_ARB = 0x881D;
  public static final int GL_LUMINANCE16F_ARB = 0x881E;
  public static final int GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
  public static final int GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
  public static final int GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
  public static final int GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
  public static final int GL_ABGR_EXT = 0x8000;
  public static final int GL_FILTER4_SGIS = 0x8146;
  public static final int GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
  public static final int GL_PIXEL_TEXTURE_SGIS = 0x8353;
  public static final int GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
  public static final int GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
  public static final int GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
  public static final int GL_PIXEL_TEX_GEN_SGIX = 0x8139;
  public static final int GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
  public static final int GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
  public static final int GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
  public static final int GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
  public static final int GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
  public static final int GL_TEXTURE_4D_SGIS = 0x8134;
  public static final int GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
  public static final int GL_TEXTURE_4DSIZE_SGIS = 0x8136;
  public static final int GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
  public static final int GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
  public static final int GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
  public static final int GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
  public static final int GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
  public static final int GL_CMYK_EXT = 0x800C;
  public static final int GL_CMYKA_EXT = 0x800D;
  public static final int GL_PACK_CMYK_HINT_EXT = 0x800E;
  public static final int GL_UNPACK_CMYK_HINT_EXT = 0x800F;
  public static final int GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
  public static final int GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
  public static final int GL_LINEAR_DETAIL_SGIS = 0x8097;
  public static final int GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
  public static final int GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
  public static final int GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
  public static final int GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
  public static final int GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
  public static final int GL_LINEAR_SHARPEN_SGIS = 0x80AD;
  public static final int GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
  public static final int GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
  public static final int GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
  public static final int GL_MULTISAMPLE_SGIS = 0x809D;
  public static final int GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
  public static final int GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
  public static final int GL_SAMPLE_MASK_SGIS = 0x80A0;
  public static final int GL_1PASS_SGIS = 0x80A1;
  public static final int GL_2PASS_0_SGIS = 0x80A2;
  public static final int GL_2PASS_1_SGIS = 0x80A3;
  public static final int GL_4PASS_0_SGIS = 0x80A4;
  public static final int GL_4PASS_1_SGIS = 0x80A5;
  public static final int GL_4PASS_2_SGIS = 0x80A6;
  public static final int GL_4PASS_3_SGIS = 0x80A7;
  public static final int GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
  public static final int GL_SAMPLES_SGIS = 0x80A9;
  public static final int GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
  public static final int GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
  public static final int GL_SAMPLE_PATTERN_SGIS = 0x80AC;
  public static final int GL_GENERATE_MIPMAP_SGIS = 0x8191;
  public static final int GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
  public static final int GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
  public static final int GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
  public static final int GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
  public static final int GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
  public static final int GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
  public static final int GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
  public static final int GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
  public static final int GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
  public static final int GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
  public static final int GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
  public static final int GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
  public static final int GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
  public static final int GL_TEXTURE_COMPARE_SGIX = 0x819A;
  public static final int GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
  public static final int GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
  public static final int GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
  public static final int GL_INTERLACE_SGIX = 0x8094;
  public static final int GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
  public static final int GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
  public static final int GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
  public static final int GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
  public static final int GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
  public static final int GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
  public static final int GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
  public static final int GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
  public static final int GL_DUAL_ALPHA4_SGIS = 0x8110;
  public static final int GL_DUAL_ALPHA8_SGIS = 0x8111;
  public static final int GL_DUAL_ALPHA12_SGIS = 0x8112;
  public static final int GL_DUAL_ALPHA16_SGIS = 0x8113;
  public static final int GL_DUAL_LUMINANCE4_SGIS = 0x8114;
  public static final int GL_DUAL_LUMINANCE8_SGIS = 0x8115;
  public static final int GL_DUAL_LUMINANCE12_SGIS = 0x8116;
  public static final int GL_DUAL_LUMINANCE16_SGIS = 0x8117;
  public static final int GL_DUAL_INTENSITY4_SGIS = 0x8118;
  public static final int GL_DUAL_INTENSITY8_SGIS = 0x8119;
  public static final int GL_DUAL_INTENSITY12_SGIS = 0x811A;
  public static final int GL_DUAL_INTENSITY16_SGIS = 0x811B;
  public static final int GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
  public static final int GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
  public static final int GL_QUAD_ALPHA4_SGIS = 0x811E;
  public static final int GL_QUAD_ALPHA8_SGIS = 0x811F;
  public static final int GL_QUAD_LUMINANCE4_SGIS = 0x8120;
  public static final int GL_QUAD_LUMINANCE8_SGIS = 0x8121;
  public static final int GL_QUAD_INTENSITY4_SGIS = 0x8122;
  public static final int GL_QUAD_INTENSITY8_SGIS = 0x8123;
  public static final int GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
  public static final int GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
  public static final int GL_SPRITE_SGIX = 0x8148;
  public static final int GL_SPRITE_MODE_SGIX = 0x8149;
  public static final int GL_SPRITE_AXIS_SGIX = 0x814A;
  public static final int GL_SPRITE_TRANSLATION_SGIX = 0x814B;
  public static final int GL_SPRITE_AXIAL_SGIX = 0x814C;
  public static final int GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
  public static final int GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
  public static final int GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
  public static final int GL_POINT_SIZE_MIN_EXT = 0x8126;
  public static final int GL_POINT_SIZE_MAX_EXT = 0x8127;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
  public static final int GL_DISTANCE_ATTENUATION_EXT = 0x8129;
  public static final int GL_POINT_SIZE_MIN_SGIS = 0x8126;
  public static final int GL_POINT_SIZE_MAX_SGIS = 0x8127;
  public static final int GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
  public static final int GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
  public static final int GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
  public static final int GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
  public static final int GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
  public static final int GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
  public static final int GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
  public static final int GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
  public static final int GL_FRAMEZOOM_SGIX = 0x818B;
  public static final int GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
  public static final int GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
  public static final int GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
  public static final int GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
  public static final int GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
  public static final int GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
  public static final int GL_DEFORMATIONS_MASK_SGIX = 0x8196;
  public static final int GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
  public static final int GL_REFERENCE_PLANE_SGIX = 0x817D;
  public static final int GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
  public static final int GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
  public static final int GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
  public static final int GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
  public static final int GL_FOG_FUNC_SGIS = 0x812A;
  public static final int GL_FOG_FUNC_POINTS_SGIS = 0x812B;
  public static final int GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
  public static final int GL_FOG_OFFSET_SGIX = 0x8198;
  public static final int GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
  public static final int GL_IMAGE_SCALE_X_HP = 0x8155;
  public static final int GL_IMAGE_SCALE_Y_HP = 0x8156;
  public static final int GL_IMAGE_TRANSLATE_X_HP = 0x8157;
  public static final int GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
  public static final int GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
  public static final int GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
  public static final int GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
  public static final int GL_IMAGE_MAG_FILTER_HP = 0x815C;
  public static final int GL_IMAGE_MIN_FILTER_HP = 0x815D;
  public static final int GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
  public static final int GL_CUBIC_HP = 0x815F;
  public static final int GL_AVERAGE_HP = 0x8160;
  public static final int GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
  public static final int GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
  public static final int GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
  public static final int GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
  public static final int GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
  public static final int GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
  public static final int GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
  public static final int GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
  public static final int GL_COLOR3_BIT_PGI = 0x00010000;
  public static final int GL_COLOR4_BIT_PGI = 0x00020000;
  public static final int GL_EDGEFLAG_BIT_PGI = 0x00040000;
  public static final int GL_INDEX_BIT_PGI = 0x00080000;
  public static final int GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
  public static final int GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
  public static final int GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
  public static final int GL_MAT_EMISSION_BIT_PGI = 0x00800000;
  public static final int GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
  public static final int GL_MAT_SHININESS_BIT_PGI = 0x02000000;
  public static final int GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
  public static final int GL_NORMAL_BIT_PGI = 0x08000000;
  public static final int GL_TEXCOORD1_BIT_PGI = 0x10000000;
  public static final int GL_TEXCOORD2_BIT_PGI = 0x20000000;
  public static final int GL_TEXCOORD3_BIT_PGI = 0x40000000;
  public static final long GL_TEXCOORD4_BIT_PGI = 0x80000000;
  public static final int GL_VERTEX23_BIT_PGI = 0x00000004;
  public static final int GL_VERTEX4_BIT_PGI = 0x00000008;
  public static final int GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
  public static final int GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
  public static final int GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
  public static final int GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
  public static final int GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
  public static final int GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
  public static final int GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
  public static final int GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
  public static final int GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
  public static final int GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
  public static final int GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
  public static final int GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
  public static final int GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
  public static final int GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
  public static final int GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
  public static final int GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
  public static final int GL_CLIP_NEAR_HINT_PGI = 0x1A220;
  public static final int GL_CLIP_FAR_HINT_PGI = 0x1A221;
  public static final int GL_WIDE_LINE_HINT_PGI = 0x1A222;
  public static final int GL_BACK_NORMALS_HINT_PGI = 0x1A223;
  public static final int GL_COLOR_INDEX1_EXT = 0x80E2;
  public static final int GL_COLOR_INDEX2_EXT = 0x80E3;
  public static final int GL_COLOR_INDEX4_EXT = 0x80E4;
  public static final int GL_COLOR_INDEX8_EXT = 0x80E5;
  public static final int GL_COLOR_INDEX12_EXT = 0x80E6;
  public static final int GL_COLOR_INDEX16_EXT = 0x80E7;
  public static final int GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
  public static final int GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
  public static final int GL_LIST_PRIORITY_SGIX = 0x8182;
  public static final int GL_IR_INSTRUMENT1_SGIX = 0x817F;
  public static final int GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
  public static final int GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
  public static final int GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
  public static final int GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
  public static final int GL_SHADOW_AMBIENT_SGIX = 0x80BF;
  public static final int GL_INDEX_MATERIAL_EXT = 0x81B8;
  public static final int GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
  public static final int GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
  public static final int GL_INDEX_TEST_EXT = 0x81B5;
  public static final int GL_INDEX_TEST_FUNC_EXT = 0x81B6;
  public static final int GL_INDEX_TEST_REF_EXT = 0x81B7;
  public static final int GL_IUI_V2F_EXT = 0x81AD;
  public static final int GL_IUI_V3F_EXT = 0x81AE;
  public static final int GL_IUI_N3F_V2F_EXT = 0x81AF;
  public static final int GL_IUI_N3F_V3F_EXT = 0x81B0;
  public static final int GL_T2F_IUI_V2F_EXT = 0x81B1;
  public static final int GL_T2F_IUI_V3F_EXT = 0x81B2;
  public static final int GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
  public static final int GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
  public static final int GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
  public static final int GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
  public static final int GL_CULL_VERTEX_EXT = 0x81AA;
  public static final int GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
  public static final int GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
  public static final int GL_YCRCB_422_SGIX = 0x81BB;
  public static final int GL_YCRCB_444_SGIX = 0x81BC;
  public static final int GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
  public static final int GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
  public static final int GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
  public static final int GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
  public static final int GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
  public static final int GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
  public static final int GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
  public static final int GL_LIGHT_ENV_MODE_SGIX = 0x8407;
  public static final int GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
  public static final int GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
  public static final int GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
  public static final int GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
  public static final int GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
  public static final int GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
  public static final int GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
  public static final int GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
  public static final int GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
  public static final int GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
  public static final int GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
  public static final int GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
  public static final int GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
  public static final int GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
  public static final int GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
  public static final int GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
  public static final int GL_PHONG_WIN = 0x80EA;
  public static final int GL_PHONG_HINT_WIN = 0x80EB;
  public static final int GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
  public static final int GL_FRAGMENT_MATERIAL_EXT = 0x8349;
  public static final int GL_FRAGMENT_NORMAL_EXT = 0x834A;
  public static final int GL_FRAGMENT_COLOR_EXT = 0x834C;
  public static final int GL_ATTENUATION_EXT = 0x834D;
  public static final int GL_SHADOW_ATTENUATION_EXT = 0x834E;
  public static final int GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
  public static final int GL_TEXTURE_LIGHT_EXT = 0x8350;
  public static final int GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
  public static final int GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
  public static final int GL_ALPHA_MIN_SGIX = 0x8320;
  public static final int GL_ALPHA_MAX_SGIX = 0x8321;
  public static final int GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
  public static final int GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
  public static final int GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
  public static final int GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187;
  public static final int GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188;
  public static final int GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
  public static final int GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
  public static final int GL_ASYNC_MARKER_SGIX = 0x8329;
  public static final int GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
  public static final int GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
  public static final int GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
  public static final int GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
  public static final int GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
  public static final int GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
  public static final int GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
  public static final int GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
  public static final int GL_OCCLUSION_TEST_HP = 0x8165;
  public static final int GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
  public static final int GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
  public static final int GL_PIXEL_MAG_FILTER_EXT = 0x8331;
  public static final int GL_PIXEL_MIN_FILTER_EXT = 0x8332;
  public static final int GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
  public static final int GL_CUBIC_EXT = 0x8334;
  public static final int GL_AVERAGE_EXT = 0x8335;
  public static final int GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
  public static final int GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
  public static final int GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
  public static final int GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
  public static final int GL_COLOR_SUM_EXT = 0x8458;
  public static final int GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
  public static final int GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
  public static final int GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
  public static final int GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
  public static final int GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
  public static final int GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
  public static final int GL_PERTURB_EXT = 0x85AE;
  public static final int GL_TEXTURE_NORMAL_EXT = 0x85AF;
  public static final int GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
  public static final int GL_FOG_COORDINATE_EXT = 0x8451;
  public static final int GL_FRAGMENT_DEPTH_EXT = 0x8452;
  public static final int GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
  public static final int GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
  public static final int GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
  public static final int GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
  public static final int GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
  public static final int GL_SCREEN_COORDINATES_REND = 0x8490;
  public static final int GL_INVERTED_SCREEN_W_REND = 0x8491;
  public static final int GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
  public static final int GL_TRANSFORM_HINT_APPLE = 0x85B1;
  public static final int GL_FOG_SCALE_SGIX = 0x81FC;
  public static final int GL_FOG_SCALE_VALUE_SGIX = 0x81FD;
  public static final int GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
  public static final int GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
  public static final int GL_GLOBAL_ALPHA_SUN = 0x81D9;
  public static final int GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
  public static final int GL_BLEND_DST_RGB_EXT = 0x80C8;
  public static final int GL_BLEND_SRC_RGB_EXT = 0x80C9;
  public static final int GL_BLEND_DST_ALPHA_EXT = 0x80CA;
  public static final int GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
  public static final int GL_RED_MIN_CLAMP_INGR = 0x8560;
  public static final int GL_GREEN_MIN_CLAMP_INGR = 0x8561;
  public static final int GL_BLUE_MIN_CLAMP_INGR = 0x8562;
  public static final int GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
  public static final int GL_RED_MAX_CLAMP_INGR = 0x8564;
  public static final int GL_GREEN_MAX_CLAMP_INGR = 0x8565;
  public static final int GL_BLUE_MAX_CLAMP_INGR = 0x8566;
  public static final int GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
  public static final int GL_INTERLACE_READ_INGR = 0x8568;
  public static final int GL_INCR_WRAP_EXT = 0x8507;
  public static final int GL_DECR_WRAP_EXT = 0x8508;
  public static final int GL_422_EXT = 0x80CC;
  public static final int GL_422_REV_EXT = 0x80CD;
  public static final int GL_422_AVERAGE_EXT = 0x80CE;
  public static final int GL_422_REV_AVERAGE_EXT = 0x80CF;
  public static final int GL_NORMAL_MAP_NV = 0x8511;
  public static final int GL_REFLECTION_MAP_NV = 0x8512;
  public static final int GL_WRAP_BORDER_SUN = 0x81D4;
  public static final int GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
  public static final int GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
  public static final int GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
  public static final int GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
  public static final int GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
  public static final int GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
  public static final int GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
  public static final int GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
  public static final int GL_MODELVIEW1_MATRIX_EXT = 0x8506;
  public static final int GL_VERTEX_WEIGHTING_EXT = 0x8509;
  public static final int GL_MODELVIEW0_EXT = 0x1700;
  public static final int GL_MODELVIEW1_EXT = 0x850A;
  public static final int GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
  public static final int GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
  public static final int GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
  public static final int GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
  public static final int GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
  public static final int GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
  public static final int GL_MAX_SHININESS_NV = 0x8504;
  public static final int GL_MAX_SPOT_EXPONENT_NV = 0x8505;
  public static final int GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
  public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
  public static final int GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
  public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
  public static final int GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
  public static final int GL_REGISTER_COMBINERS_NV = 0x8522;
  public static final int GL_VARIABLE_A_NV = 0x8523;
  public static final int GL_VARIABLE_B_NV = 0x8524;
  public static final int GL_VARIABLE_C_NV = 0x8525;
  public static final int GL_VARIABLE_D_NV = 0x8526;
  public static final int GL_VARIABLE_E_NV = 0x8527;
  public static final int GL_VARIABLE_F_NV = 0x8528;
  public static final int GL_VARIABLE_G_NV = 0x8529;
  public static final int GL_CONSTANT_COLOR0_NV = 0x852A;
  public static final int GL_CONSTANT_COLOR1_NV = 0x852B;
  public static final int GL_PRIMARY_COLOR_NV = 0x852C;
  public static final int GL_SECONDARY_COLOR_NV = 0x852D;
  public static final int GL_SPARE0_NV = 0x852E;
  public static final int GL_SPARE1_NV = 0x852F;
  public static final int GL_DISCARD_NV = 0x8530;
  public static final int GL_E_TIMES_F_NV = 0x8531;
  public static final int GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
  public static final int GL_UNSIGNED_IDENTITY_NV = 0x8536;
  public static final int GL_UNSIGNED_INVERT_NV = 0x8537;
  public static final int GL_EXPAND_NORMAL_NV = 0x8538;
  public static final int GL_EXPAND_NEGATE_NV = 0x8539;
  public static final int GL_HALF_BIAS_NORMAL_NV = 0x853A;
  public static final int GL_HALF_BIAS_NEGATE_NV = 0x853B;
  public static final int GL_SIGNED_IDENTITY_NV = 0x853C;
  public static final int GL_SIGNED_NEGATE_NV = 0x853D;
  public static final int GL_SCALE_BY_TWO_NV = 0x853E;
  public static final int GL_SCALE_BY_FOUR_NV = 0x853F;
  public static final int GL_SCALE_BY_ONE_HALF_NV = 0x8540;
  public static final int GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
  public static final int GL_COMBINER_INPUT_NV = 0x8542;
  public static final int GL_COMBINER_MAPPING_NV = 0x8543;
  public static final int GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
  public static final int GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
  public static final int GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
  public static final int GL_COMBINER_MUX_SUM_NV = 0x8547;
  public static final int GL_COMBINER_SCALE_NV = 0x8548;
  public static final int GL_COMBINER_BIAS_NV = 0x8549;
  public static final int GL_COMBINER_AB_OUTPUT_NV = 0x854A;
  public static final int GL_COMBINER_CD_OUTPUT_NV = 0x854B;
  public static final int GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
  public static final int GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
  public static final int GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
  public static final int GL_COLOR_SUM_CLAMP_NV = 0x854F;
  public static final int GL_COMBINER0_NV = 0x8550;
  public static final int GL_COMBINER1_NV = 0x8551;
  public static final int GL_COMBINER2_NV = 0x8552;
  public static final int GL_COMBINER3_NV = 0x8553;
  public static final int GL_COMBINER4_NV = 0x8554;
  public static final int GL_COMBINER5_NV = 0x8555;
  public static final int GL_COMBINER6_NV = 0x8556;
  public static final int GL_COMBINER7_NV = 0x8557;
  public static final int GL_FOG_DISTANCE_MODE_NV = 0x855A;
  public static final int GL_EYE_RADIAL_NV = 0x855B;
  public static final int GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
  public static final int GL_EMBOSS_LIGHT_NV = 0x855D;
  public static final int GL_EMBOSS_CONSTANT_NV = 0x855E;
  public static final int GL_EMBOSS_MAP_NV = 0x855F;
  public static final int GL_COMBINE4_NV = 0x8503;
  public static final int GL_SOURCE3_RGB_NV = 0x8583;
  public static final int GL_SOURCE3_ALPHA_NV = 0x858B;
  public static final int GL_OPERAND3_RGB_NV = 0x8593;
  public static final int GL_OPERAND3_ALPHA_NV = 0x859B;
  public static final int GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
  public static final int GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
  public static final int GL_CULL_VERTEX_IBM = 103050;
  public static final int GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
  public static final int GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
  public static final int GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
  public static final int GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
  public static final int GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
  public static final int GL_YCRCB_SGIX = 0x8318;
  public static final int GL_YCRCBA_SGIX = 0x8319;
  public static final int GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
  public static final int GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
  public static final int GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
  public static final int GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
  public static final int GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
  public static final int GL_MULTISAMPLE_3DFX = 0x86B2;
  public static final int GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
  public static final int GL_SAMPLES_3DFX = 0x86B4;
  public static final int GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
  public static final int GL_MULTISAMPLE_EXT = 0x809D;
  public static final int GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
  public static final int GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
  public static final int GL_SAMPLE_MASK_EXT = 0x80A0;
  public static final int GL_1PASS_EXT = 0x80A1;
  public static final int GL_2PASS_0_EXT = 0x80A2;
  public static final int GL_2PASS_1_EXT = 0x80A3;
  public static final int GL_4PASS_0_EXT = 0x80A4;
  public static final int GL_4PASS_1_EXT = 0x80A5;
  public static final int GL_4PASS_2_EXT = 0x80A6;
  public static final int GL_4PASS_3_EXT = 0x80A7;
  public static final int GL_SAMPLE_BUFFERS_EXT = 0x80A8;
  public static final int GL_SAMPLES_EXT = 0x80A9;
  public static final int GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
  public static final int GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
  public static final int GL_SAMPLE_PATTERN_EXT = 0x80AC;
  public static final int GL_MULTISAMPLE_BIT_EXT = 0x20000000;
  public static final int GL_VERTEX_PRECLIP_SGIX = 0x83EE;
  public static final int GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
  public static final int GL_CONVOLUTION_HINT_SGIX = 0x8316;
  public static final int GL_PACK_RESAMPLE_SGIX = 0x842C;
  public static final int GL_UNPACK_RESAMPLE_SGIX = 0x842D;
  public static final int GL_RESAMPLE_REPLICATE_SGIX = 0x842E;
  public static final int GL_RESAMPLE_ZERO_FILL_SGIX = 0x842F;
  public static final int GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
  public static final int GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
  public static final int GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
  public static final int GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
  public static final int GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
  public static final int GL_EYE_POINT_SGIS = 0x81F4;
  public static final int GL_OBJECT_POINT_SGIS = 0x81F5;
  public static final int GL_EYE_LINE_SGIS = 0x81F6;
  public static final int GL_OBJECT_LINE_SGIS = 0x81F7;
  public static final int GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
  public static final int GL_MIRROR_CLAMP_ATI = 0x8742;
  public static final int GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
  public static final int GL_ALL_COMPLETED_NV = 0x84F2;
  public static final int GL_FENCE_STATUS_NV = 0x84F3;
  public static final int GL_FENCE_CONDITION_NV = 0x84F4;
  public static final int GL_MIRRORED_REPEAT_IBM = 0x8370;
  public static final int GL_EVAL_2D_NV = 0x86C0;
  public static final int GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
  public static final int GL_MAP_TESSELLATION_NV = 0x86C2;
  public static final int GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
  public static final int GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
  public static final int GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
  public static final int GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
  public static final int GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
  public static final int GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
  public static final int GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
  public static final int GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
  public static final int GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
  public static final int GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
  public static final int GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
  public static final int GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
  public static final int GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
  public static final int GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
  public static final int GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
  public static final int GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
  public static final int GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
  public static final int GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
  public static final int GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
  public static final int GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
  public static final int GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
  public static final int GL_DEPTH_STENCIL_NV = 0x84F9;
  public static final int GL_UNSIGNED_INT_24_8_NV = 0x84FA;
  public static final int GL_PER_STAGE_CONSTANTS_NV = 0x8535;
  public static final int GL_TEXTURE_RECTANGLE_NV = 0x84F5;
  public static final int GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
  public static final int GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
  public static final int GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
  public static final int GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
  public static final int GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
  public static final int GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
  public static final int GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
  public static final int GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
  public static final int GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
  public static final int GL_SHADER_CONSISTENT_NV = 0x86DD;
  public static final int GL_TEXTURE_SHADER_NV = 0x86DE;
  public static final int GL_SHADER_OPERATION_NV = 0x86DF;
  public static final int GL_CULL_MODES_NV = 0x86E0;
  public static final int GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
  public static final int GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
  public static final int GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
  public static final int GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
  public static final int GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
  public static final int GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
  public static final int GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
  public static final int GL_CONST_EYE_NV = 0x86E5;
  public static final int GL_PASS_THROUGH_NV = 0x86E6;
  public static final int GL_CULL_FRAGMENT_NV = 0x86E7;
  public static final int GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
  public static final int GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
  public static final int GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
  public static final int GL_DOT_PRODUCT_NV = 0x86EC;
  public static final int GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
  public static final int GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
  public static final int GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
  public static final int GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
  public static final int GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
  public static final int GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
  public static final int GL_HILO_NV = 0x86F4;
  public static final int GL_DSDT_NV = 0x86F5;
  public static final int GL_DSDT_MAG_NV = 0x86F6;
  public static final int GL_DSDT_MAG_VIB_NV = 0x86F7;
  public static final int GL_HILO16_NV = 0x86F8;
  public static final int GL_SIGNED_HILO_NV = 0x86F9;
  public static final int GL_SIGNED_HILO16_NV = 0x86FA;
  public static final int GL_SIGNED_RGBA_NV = 0x86FB;
  public static final int GL_SIGNED_RGBA8_NV = 0x86FC;
  public static final int GL_SIGNED_RGB_NV = 0x86FE;
  public static final int GL_SIGNED_RGB8_NV = 0x86FF;
  public static final int GL_SIGNED_LUMINANCE_NV = 0x8701;
  public static final int GL_SIGNED_LUMINANCE8_NV = 0x8702;
  public static final int GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
  public static final int GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
  public static final int GL_SIGNED_ALPHA_NV = 0x8705;
  public static final int GL_SIGNED_ALPHA8_NV = 0x8706;
  public static final int GL_SIGNED_INTENSITY_NV = 0x8707;
  public static final int GL_SIGNED_INTENSITY8_NV = 0x8708;
  public static final int GL_DSDT8_NV = 0x8709;
  public static final int GL_DSDT8_MAG8_NV = 0x870A;
  public static final int GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
  public static final int GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
  public static final int GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
  public static final int GL_HI_SCALE_NV = 0x870E;
  public static final int GL_LO_SCALE_NV = 0x870F;
  public static final int GL_DS_SCALE_NV = 0x8710;
  public static final int GL_DT_SCALE_NV = 0x8711;
  public static final int GL_MAGNITUDE_SCALE_NV = 0x8712;
  public static final int GL_VIBRANCE_SCALE_NV = 0x8713;
  public static final int GL_HI_BIAS_NV = 0x8714;
  public static final int GL_LO_BIAS_NV = 0x8715;
  public static final int GL_DS_BIAS_NV = 0x8716;
  public static final int GL_DT_BIAS_NV = 0x8717;
  public static final int GL_MAGNITUDE_BIAS_NV = 0x8718;
  public static final int GL_VIBRANCE_BIAS_NV = 0x8719;
  public static final int GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
  public static final int GL_TEXTURE_HI_SIZE_NV = 0x871B;
  public static final int GL_TEXTURE_LO_SIZE_NV = 0x871C;
  public static final int GL_TEXTURE_DS_SIZE_NV = 0x871D;
  public static final int GL_TEXTURE_DT_SIZE_NV = 0x871E;
  public static final int GL_TEXTURE_MAG_SIZE_NV = 0x871F;
  public static final int GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
  public static final int GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
  public static final int GL_VERTEX_PROGRAM_NV = 0x8620;
  public static final int GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
  public static final int GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
  public static final int GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
  public static final int GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
  public static final int GL_CURRENT_ATTRIB_NV = 0x8626;
  public static final int GL_PROGRAM_LENGTH_NV = 0x8627;
  public static final int GL_PROGRAM_STRING_NV = 0x8628;
  public static final int GL_MODELVIEW_PROJECTION_NV = 0x8629;
  public static final int GL_IDENTITY_NV = 0x862A;
  public static final int GL_INVERSE_NV = 0x862B;
  public static final int GL_TRANSPOSE_NV = 0x862C;
  public static final int GL_INVERSE_TRANSPOSE_NV = 0x862D;
  public static final int GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
  public static final int GL_MAX_TRACK_MATRICES_NV = 0x862F;
  public static final int GL_MATRIX0_NV = 0x8630;
  public static final int GL_MATRIX1_NV = 0x8631;
  public static final int GL_MATRIX2_NV = 0x8632;
  public static final int GL_MATRIX3_NV = 0x8633;
  public static final int GL_MATRIX4_NV = 0x8634;
  public static final int GL_MATRIX5_NV = 0x8635;
  public static final int GL_MATRIX6_NV = 0x8636;
  public static final int GL_MATRIX7_NV = 0x8637;
  public static final int GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
  public static final int GL_CURRENT_MATRIX_NV = 0x8641;
  public static final int GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
  public static final int GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
  public static final int GL_PROGRAM_PARAMETER_NV = 0x8644;
  public static final int GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
  public static final int GL_PROGRAM_TARGET_NV = 0x8646;
  public static final int GL_PROGRAM_RESIDENT_NV = 0x8647;
  public static final int GL_TRACK_MATRIX_NV = 0x8648;
  public static final int GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
  public static final int GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
  public static final int GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
  public static final int GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
  public static final int GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
  public static final int GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
  public static final int GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
  public static final int GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
  public static final int GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
  public static final int GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
  public static final int GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
  public static final int GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
  public static final int GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
  public static final int GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
  public static final int GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
  public static final int GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
  public static final int GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
  public static final int GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
  public static final int GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
  public static final int GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
  public static final int GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
  public static final int GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
  public static final int GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
  public static final int GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
  public static final int GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
  public static final int GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
  public static final int GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
  public static final int GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
  public static final int GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
  public static final int GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
  public static final int GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
  public static final int GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
  public static final int GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
  public static final int GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
  public static final int GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
  public static final int GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
  public static final int GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
  public static final int GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
  public static final int GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
  public static final int GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
  public static final int GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
  public static final int GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
  public static final int GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
  public static final int GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
  public static final int GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
  public static final int GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
  public static final int GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
  public static final int GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
  public static final int GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
  public static final int GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
  public static final int GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
  public static final int GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
  public static final int GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
  public static final int GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
  public static final int GL_SCALEBIAS_HINT_SGIX = 0x8322;
  public static final int GL_INTERLACE_OML = 0x8980;
  public static final int GL_INTERLACE_READ_OML = 0x8981;
  public static final int GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
  public static final int GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
  public static final int GL_PACK_RESAMPLE_OML = 0x8984;
  public static final int GL_UNPACK_RESAMPLE_OML = 0x8985;
  public static final int GL_RESAMPLE_REPLICATE_OML = 0x8986;
  public static final int GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
  public static final int GL_RESAMPLE_AVERAGE_OML = 0x8988;
  public static final int GL_RESAMPLE_DECIMATE_OML = 0x8989;
  public static final int GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
  public static final int GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
  public static final int GL_BUMP_ROT_MATRIX_ATI = 0x8775;
  public static final int GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
  public static final int GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
  public static final int GL_BUMP_TEX_UNITS_ATI = 0x8778;
  public static final int GL_DUDV_ATI = 0x8779;
  public static final int GL_DU8DV8_ATI = 0x877A;
  public static final int GL_BUMP_ENVMAP_ATI = 0x877B;
  public static final int GL_BUMP_TARGET_ATI = 0x877C;
  public static final int GL_FRAGMENT_SHADER_ATI = 0x8920;
  public static final int GL_REG_0_ATI = 0x8921;
  public static final int GL_REG_1_ATI = 0x8922;
  public static final int GL_REG_2_ATI = 0x8923;
  public static final int GL_REG_3_ATI = 0x8924;
  public static final int GL_REG_4_ATI = 0x8925;
  public static final int GL_REG_5_ATI = 0x8926;
  public static final int GL_REG_6_ATI = 0x8927;
  public static final int GL_REG_7_ATI = 0x8928;
  public static final int GL_REG_8_ATI = 0x8929;
  public static final int GL_REG_9_ATI = 0x892A;
  public static final int GL_REG_10_ATI = 0x892B;
  public static final int GL_REG_11_ATI = 0x892C;
  public static final int GL_REG_12_ATI = 0x892D;
  public static final int GL_REG_13_ATI = 0x892E;
  public static final int GL_REG_14_ATI = 0x892F;
  public static final int GL_REG_15_ATI = 0x8930;
  public static final int GL_REG_16_ATI = 0x8931;
  public static final int GL_REG_17_ATI = 0x8932;
  public static final int GL_REG_18_ATI = 0x8933;
  public static final int GL_REG_19_ATI = 0x8934;
  public static final int GL_REG_20_ATI = 0x8935;
  public static final int GL_REG_21_ATI = 0x8936;
  public static final int GL_REG_22_ATI = 0x8937;
  public static final int GL_REG_23_ATI = 0x8938;
  public static final int GL_REG_24_ATI = 0x8939;
  public static final int GL_REG_25_ATI = 0x893A;
  public static final int GL_REG_26_ATI = 0x893B;
  public static final int GL_REG_27_ATI = 0x893C;
  public static final int GL_REG_28_ATI = 0x893D;
  public static final int GL_REG_29_ATI = 0x893E;
  public static final int GL_REG_30_ATI = 0x893F;
  public static final int GL_REG_31_ATI = 0x8940;
  public static final int GL_CON_0_ATI = 0x8941;
  public static final int GL_CON_1_ATI = 0x8942;
  public static final int GL_CON_2_ATI = 0x8943;
  public static final int GL_CON_3_ATI = 0x8944;
  public static final int GL_CON_4_ATI = 0x8945;
  public static final int GL_CON_5_ATI = 0x8946;
  public static final int GL_CON_6_ATI = 0x8947;
  public static final int GL_CON_7_ATI = 0x8948;
  public static final int GL_CON_8_ATI = 0x8949;
  public static final int GL_CON_9_ATI = 0x894A;
  public static final int GL_CON_10_ATI = 0x894B;
  public static final int GL_CON_11_ATI = 0x894C;
  public static final int GL_CON_12_ATI = 0x894D;
  public static final int GL_CON_13_ATI = 0x894E;
  public static final int GL_CON_14_ATI = 0x894F;
  public static final int GL_CON_15_ATI = 0x8950;
  public static final int GL_CON_16_ATI = 0x8951;
  public static final int GL_CON_17_ATI = 0x8952;
  public static final int GL_CON_18_ATI = 0x8953;
  public static final int GL_CON_19_ATI = 0x8954;
  public static final int GL_CON_20_ATI = 0x8955;
  public static final int GL_CON_21_ATI = 0x8956;
  public static final int GL_CON_22_ATI = 0x8957;
  public static final int GL_CON_23_ATI = 0x8958;
  public static final int GL_CON_24_ATI = 0x8959;
  public static final int GL_CON_25_ATI = 0x895A;
  public static final int GL_CON_26_ATI = 0x895B;
  public static final int GL_CON_27_ATI = 0x895C;
  public static final int GL_CON_28_ATI = 0x895D;
  public static final int GL_CON_29_ATI = 0x895E;
  public static final int GL_CON_30_ATI = 0x895F;
  public static final int GL_CON_31_ATI = 0x8960;
  public static final int GL_MOV_ATI = 0x8961;
  public static final int GL_ADD_ATI = 0x8963;
  public static final int GL_MUL_ATI = 0x8964;
  public static final int GL_SUB_ATI = 0x8965;
  public static final int GL_DOT3_ATI = 0x8966;
  public static final int GL_DOT4_ATI = 0x8967;
  public static final int GL_MAD_ATI = 0x8968;
  public static final int GL_LERP_ATI = 0x8969;
  public static final int GL_CND_ATI = 0x896A;
  public static final int GL_CND0_ATI = 0x896B;
  public static final int GL_DOT2_ADD_ATI = 0x896C;
  public static final int GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
  public static final int GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
  public static final int GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
  public static final int GL_NUM_PASSES_ATI = 0x8970;
  public static final int GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
  public static final int GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
  public static final int GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
  public static final int GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
  public static final int GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
  public static final int GL_SWIZZLE_STR_ATI = 0x8976;
  public static final int GL_SWIZZLE_STQ_ATI = 0x8977;
  public static final int GL_SWIZZLE_STR_DR_ATI = 0x8978;
  public static final int GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
  public static final int GL_SWIZZLE_STRQ_ATI = 0x897A;
  public static final int GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
  public static final int GL_RED_BIT_ATI = 0x00000001;
  public static final int GL_GREEN_BIT_ATI = 0x00000002;
  public static final int GL_BLUE_BIT_ATI = 0x00000004;
  public static final int GL_2X_BIT_ATI = 0x00000001;
  public static final int GL_4X_BIT_ATI = 0x00000002;
  public static final int GL_8X_BIT_ATI = 0x00000004;
  public static final int GL_HALF_BIT_ATI = 0x00000008;
  public static final int GL_QUARTER_BIT_ATI = 0x00000010;
  public static final int GL_EIGHTH_BIT_ATI = 0x00000020;
  public static final int GL_SATURATE_BIT_ATI = 0x00000040;
  public static final int GL_COMP_BIT_ATI = 0x00000002;
  public static final int GL_NEGATE_BIT_ATI = 0x00000004;
  public static final int GL_BIAS_BIT_ATI = 0x00000008;
  public static final int GL_PN_TRIANGLES_ATI = 0x87F0;
  public static final int GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
  public static final int GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
  public static final int GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
  public static final int GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
  public static final int GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
  public static final int GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
  public static final int GL_STATIC_ATI = 0x8760;
  public static final int GL_DYNAMIC_ATI = 0x8761;
  public static final int GL_PRESERVE_ATI = 0x8762;
  public static final int GL_DISCARD_ATI = 0x8763;
  public static final int GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
  public static final int GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
  public static final int GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
  public static final int GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
  public static final int GL_VERTEX_SHADER_EXT = 0x8780;
  public static final int GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
  public static final int GL_OP_INDEX_EXT = 0x8782;
  public static final int GL_OP_NEGATE_EXT = 0x8783;
  public static final int GL_OP_DOT3_EXT = 0x8784;
  public static final int GL_OP_DOT4_EXT = 0x8785;
  public static final int GL_OP_MUL_EXT = 0x8786;
  public static final int GL_OP_ADD_EXT = 0x8787;
  public static final int GL_OP_MADD_EXT = 0x8788;
  public static final int GL_OP_FRAC_EXT = 0x8789;
  public static final int GL_OP_MAX_EXT = 0x878A;
  public static final int GL_OP_MIN_EXT = 0x878B;
  public static final int GL_OP_SET_GE_EXT = 0x878C;
  public static final int GL_OP_SET_LT_EXT = 0x878D;
  public static final int GL_OP_CLAMP_EXT = 0x878E;
  public static final int GL_OP_FLOOR_EXT = 0x878F;
  public static final int GL_OP_ROUND_EXT = 0x8790;
  public static final int GL_OP_EXP_BASE_2_EXT = 0x8791;
  public static final int GL_OP_LOG_BASE_2_EXT = 0x8792;
  public static final int GL_OP_POWER_EXT = 0x8793;
  public static final int GL_OP_RECIP_EXT = 0x8794;
  public static final int GL_OP_RECIP_SQRT_EXT = 0x8795;
  public static final int GL_OP_SUB_EXT = 0x8796;
  public static final int GL_OP_CROSS_PRODUCT_EXT = 0x8797;
  public static final int GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
  public static final int GL_OP_MOV_EXT = 0x8799;
  public static final int GL_OUTPUT_VERTEX_EXT = 0x879A;
  public static final int GL_OUTPUT_COLOR0_EXT = 0x879B;
  public static final int GL_OUTPUT_COLOR1_EXT = 0x879C;
  public static final int GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
  public static final int GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
  public static final int GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
  public static final int GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
  public static final int GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
  public static final int GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
  public static final int GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
  public static final int GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
  public static final int GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
  public static final int GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
  public static final int GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
  public static final int GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
  public static final int GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
  public static final int GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
  public static final int GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
  public static final int GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
  public static final int GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
  public static final int GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
  public static final int GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
  public static final int GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
  public static final int GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
  public static final int GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
  public static final int GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
  public static final int GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
  public static final int GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
  public static final int GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
  public static final int GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
  public static final int GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
  public static final int GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
  public static final int GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
  public static final int GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
  public static final int GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
  public static final int GL_OUTPUT_FOG_EXT = 0x87BD;
  public static final int GL_SCALAR_EXT = 0x87BE;
  public static final int GL_VECTOR_EXT = 0x87BF;
  public static final int GL_MATRIX_EXT = 0x87C0;
  public static final int GL_VARIANT_EXT = 0x87C1;
  public static final int GL_INVARIANT_EXT = 0x87C2;
  public static final int GL_LOCAL_CONSTANT_EXT = 0x87C3;
  public static final int GL_LOCAL_EXT = 0x87C4;
  public static final int GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
  public static final int GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
  public static final int GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
  public static final int GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
  public static final int GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
  public static final int GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
  public static final int GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
  public static final int GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
  public static final int GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
  public static final int GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
  public static final int GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
  public static final int GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
  public static final int GL_X_EXT = 0x87D5;
  public static final int GL_Y_EXT = 0x87D6;
  public static final int GL_Z_EXT = 0x87D7;
  public static final int GL_W_EXT = 0x87D8;
  public static final int GL_NEGATIVE_X_EXT = 0x87D9;
  public static final int GL_NEGATIVE_Y_EXT = 0x87DA;
  public static final int GL_NEGATIVE_Z_EXT = 0x87DB;
  public static final int GL_NEGATIVE_W_EXT = 0x87DC;
  public static final int GL_ZERO_EXT = 0x87DD;
  public static final int GL_ONE_EXT = 0x87DE;
  public static final int GL_NEGATIVE_ONE_EXT = 0x87DF;
  public static final int GL_NORMALIZED_RANGE_EXT = 0x87E0;
  public static final int GL_FULL_RANGE_EXT = 0x87E1;
  public static final int GL_CURRENT_VERTEX_EXT = 0x87E2;
  public static final int GL_MVP_MATRIX_EXT = 0x87E3;
  public static final int GL_VARIANT_VALUE_EXT = 0x87E4;
  public static final int GL_VARIANT_DATATYPE_EXT = 0x87E5;
  public static final int GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
  public static final int GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
  public static final int GL_VARIANT_ARRAY_EXT = 0x87E8;
  public static final int GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
  public static final int GL_INVARIANT_VALUE_EXT = 0x87EA;
  public static final int GL_INVARIANT_DATATYPE_EXT = 0x87EB;
  public static final int GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
  public static final int GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
  public static final int GL_TEXTURE_RECTANGLE_EXT = 0x84F5;
  public static final int GL_TEXTURE_BINDING_RECTANGLE_EXT = 0x84F6;
  public static final int GL_PROXY_TEXTURE_RECTANGLE_EXT = 0x84F7;
  public static final int GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT = 0x84F8;
  public static final int GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
  public static final int GL_VERTEX_STREAM0_ATI = 0x876C;
  public static final int GL_VERTEX_STREAM1_ATI = 0x876D;
  public static final int GL_VERTEX_STREAM2_ATI = 0x876E;
  public static final int GL_VERTEX_STREAM3_ATI = 0x876F;
  public static final int GL_VERTEX_STREAM4_ATI = 0x8770;
  public static final int GL_VERTEX_STREAM5_ATI = 0x8771;
  public static final int GL_VERTEX_STREAM6_ATI = 0x8772;
  public static final int GL_VERTEX_STREAM7_ATI = 0x8773;
  public static final int GL_VERTEX_SOURCE_ATI = 0x8774;
  public static final int GL_ELEMENT_ARRAY_ATI = 0x8768;
  public static final int GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
  public static final int GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
  public static final int GL_QUAD_MESH_SUN = 0x8614;
  public static final int GL_TRIANGLE_MESH_SUN = 0x8615;
  public static final int GL_SLICE_ACCUM_SUN = 0x85CC;
  public static final int GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
  public static final int GL_DEPTH_CLAMP_NV = 0x864F;
  public static final int GL_PIXEL_COUNTER_BITS_NV = 0x8864;
  public static final int GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
  public static final int GL_PIXEL_COUNT_NV = 0x8866;
  public static final int GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
  public static final int GL_POINT_SPRITE_NV = 0x8861;
  public static final int GL_COORD_REPLACE_NV = 0x8862;
  public static final int GL_POINT_SPRITE_R_MODE_NV = 0x8863;
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
  public static final int GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
  public static final int GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
  public static final int GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
  public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
  public static final int GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
  public static final int GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
  public static final int GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
  public static final int GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
  public static final int GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
  public static final int GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
  public static final int GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
  public static final int GL_HILO8_NV = 0x885E;
  public static final int GL_SIGNED_HILO8_NV = 0x885F;
  public static final int GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
  public static final int GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
  public static final int GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
  public static final int GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
  public static final int GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
  public static final int GL_ELEMENT_ARRAY_APPLE = 0x8768;
  public static final int GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8769;
  public static final int GL_ELEMENT_ARRAY_POINTER_APPLE = 0x876A;
  public static final int GL_DRAW_PIXELS_APPLE = 0x8A0A;
  public static final int GL_FENCE_APPLE = 0x8A0B;
  public static final int GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
  public static final int GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
  public static final int GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
  public static final int GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE = 0x8520;
  public static final int GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
  public static final int GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
  public static final int GL_STORAGE_PRIVATE_APPLE = 0x85BD;
  public static final int GL_STORAGE_CACHED_APPLE = 0x85BE;
  public static final int GL_STORAGE_SHARED_APPLE = 0x85BF;
  public static final int GL_YCBCR_422_APPLE = 0x85B9;
  public static final int GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
  public static final int GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
  public static final int GL_RGB_S3TC = 0x83A0;
  public static final int GL_RGB4_S3TC = 0x83A1;
  public static final int GL_RGBA_S3TC = 0x83A2;
  public static final int GL_RGBA4_S3TC = 0x83A3;
  public static final int GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
  public static final int GL_DRAW_BUFFER0_ATI = 0x8825;
  public static final int GL_DRAW_BUFFER1_ATI = 0x8826;
  public static final int GL_DRAW_BUFFER2_ATI = 0x8827;
  public static final int GL_DRAW_BUFFER3_ATI = 0x8828;
  public static final int GL_DRAW_BUFFER4_ATI = 0x8829;
  public static final int GL_DRAW_BUFFER5_ATI = 0x882A;
  public static final int GL_DRAW_BUFFER6_ATI = 0x882B;
  public static final int GL_DRAW_BUFFER7_ATI = 0x882C;
  public static final int GL_DRAW_BUFFER8_ATI = 0x882D;
  public static final int GL_DRAW_BUFFER9_ATI = 0x882E;
  public static final int GL_DRAW_BUFFER10_ATI = 0x882F;
  public static final int GL_DRAW_BUFFER11_ATI = 0x8830;
  public static final int GL_DRAW_BUFFER12_ATI = 0x8831;
  public static final int GL_DRAW_BUFFER13_ATI = 0x8832;
  public static final int GL_DRAW_BUFFER14_ATI = 0x8833;
  public static final int GL_DRAW_BUFFER15_ATI = 0x8834;
  public static final int GL_TYPE_RGBA_FLOAT_ATI = 0x8820;
  public static final int GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
  public static final int GL_MODULATE_ADD_ATI = 0x8744;
  public static final int GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
  public static final int GL_MODULATE_SUBTRACT_ATI = 0x8746;
  public static final int GL_RGBA_FLOAT32_ATI = 0x8814;
  public static final int GL_RGB_FLOAT32_ATI = 0x8815;
  public static final int GL_ALPHA_FLOAT32_ATI = 0x8816;
  public static final int GL_INTENSITY_FLOAT32_ATI = 0x8817;
  public static final int GL_LUMINANCE_FLOAT32_ATI = 0x8818;
  public static final int GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
  public static final int GL_RGBA_FLOAT16_ATI = 0x881A;
  public static final int GL_RGB_FLOAT16_ATI = 0x881B;
  public static final int GL_ALPHA_FLOAT16_ATI = 0x881C;
  public static final int GL_INTENSITY_FLOAT16_ATI = 0x881D;
  public static final int GL_LUMINANCE_FLOAT16_ATI = 0x881E;
  public static final int GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
  public static final int GL_FLOAT_R_NV = 0x8880;
  public static final int GL_FLOAT_RG_NV = 0x8881;
  public static final int GL_FLOAT_RGB_NV = 0x8882;
  public static final int GL_FLOAT_RGBA_NV = 0x8883;
  public static final int GL_FLOAT_R16_NV = 0x8884;
  public static final int GL_FLOAT_R32_NV = 0x8885;
  public static final int GL_FLOAT_RG16_NV = 0x8886;
  public static final int GL_FLOAT_RG32_NV = 0x8887;
  public static final int GL_FLOAT_RGB16_NV = 0x8888;
  public static final int GL_FLOAT_RGB32_NV = 0x8889;
  public static final int GL_FLOAT_RGBA16_NV = 0x888A;
  public static final int GL_FLOAT_RGBA32_NV = 0x888B;
  public static final int GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
  public static final int GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
  public static final int GL_FLOAT_RGBA_MODE_NV = 0x888E;
  public static final int GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
  public static final int GL_FRAGMENT_PROGRAM_NV = 0x8870;
  public static final int GL_MAX_TEXTURE_COORDS_NV = 0x8871;
  public static final int GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
  public static final int GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
  public static final int GL_PROGRAM_ERROR_STRING_NV = 0x8874;
  public static final int GL_HALF_FLOAT_NV = 0x140B;
  public static final int GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
  public static final int GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
  public static final int GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
  public static final int GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
  public static final int GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
  public static final int GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
  public static final int GL_PRIMITIVE_RESTART_NV = 0x8558;
  public static final int GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
  public static final int GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
  public static final int GL_STENCIL_BACK_FUNC_ATI = 0x8800;
  public static final int GL_STENCIL_BACK_FAIL_ATI = 0x8801;
  public static final int GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
  public static final int GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
  public static final int GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
  public static final int GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
  public static final int GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
  public static final int GL_DEPTH_BOUNDS_EXT = 0x8891;
  public static final int GL_MIRROR_CLAMP_EXT = 0x8742;
  public static final int GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
  public static final int GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
  public static final int GL_BLEND_EQUATION_RGB_EXT = 0x8009;
  public static final int GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
  public static final int GL_PACK_INVERT_MESA = 0x8758;
  public static final int GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
  public static final int GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
  public static final int GL_YCBCR_MESA = 0x8757;
  public static final int GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
  public static final int GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
  public static final int GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
  public static final int GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
  public static final int GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
  public static final int GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
  public static final int GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
  public static final int GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
  public static final int GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
  public static final int GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
  public static final int GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
  public static final int GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
  public static final int GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
  public static final int GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DUPLICATE_ATTACHMENT_EXT = 0x8CD8;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
  public static final int GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
  public static final int GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
  public static final int GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
  public static final int GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
  public static final int GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
  public static final int GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
  public static final int GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
  public static final int GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
  public static final int GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
  public static final int GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
  public static final int GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
  public static final int GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
  public static final int GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
  public static final int GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
  public static final int GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
  public static final int GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
  public static final int GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
  public static final int GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
  public static final int GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
  public static final int GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
  public static final int GL_FRAMEBUFFER_EXT = 0x8D40;
  public static final int GL_RENDERBUFFER_EXT = 0x8D41;
  public static final int GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
  public static final int GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
  public static final int GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
  public static final int GL_STENCIL_INDEX1_EXT = 0x8D46;
  public static final int GL_STENCIL_INDEX4_EXT = 0x8D47;
  public static final int GL_STENCIL_INDEX8_EXT = 0x8D48;
  public static final int GL_STENCIL_INDEX16_EXT = 0x8D49;
  public static final int GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
  public static final int GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
  public static final int GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
  public static final int GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
  public static final int GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
  public static final int GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
  public static final int GL_DEPTH_STENCIL_EXT = 0x84F9;
  public static final int GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
  public static final int GL_DEPTH24_STENCIL8_EXT = 0x88F0;
  public static final int GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
  public static final int GL_STENCIL_TAG_BITS_EXT = 0x88F2;
  public static final int GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
  public static final int GL_SRGB_EXT = 0x8C40;
  public static final int GL_SRGB8_EXT = 0x8C41;
  public static final int GL_SRGB_ALPHA_EXT = 0x8C42;
  public static final int GL_SRGB8_ALPHA8_EXT = 0x8C43;
  public static final int GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
  public static final int GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
  public static final int GL_SLUMINANCE_EXT = 0x8C46;
  public static final int GL_SLUMINANCE8_EXT = 0x8C47;
  public static final int GL_COMPRESSED_SRGB_EXT = 0x8C48;
  public static final int GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
  public static final int GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
  public static final int GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
  public static final int GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
  public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
  public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
  public static final int GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
  public static final int GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
  public static final int GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
  public static final int GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
  public static final int GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
  public static final int GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
  public static final int GL_MAX_SAMPLES_EXT = 0x8D57;
  public static final int GL_TEXTURE_1D_STACK_MESAX = 0x8759;
  public static final int GL_TEXTURE_2D_STACK_MESAX = 0x875A;
  public static final int GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
  public static final int GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
  public static final int GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
  public static final int GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
  public static final int GL_TIME_ELAPSED_EXT = 0x88BF;
  public static final int GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
  public static final int GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
  public static final int GL_CG_VERTEX_SHADER_EXT = 0x890E;
  public static final int GL_CG_FRAGMENT_SHADER_EXT = 0x890F;
  public static final int GL_TEXTURE_BUFFER_EXT = 0x8C2A;
  public static final int GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
  public static final int GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
  public static final int GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
  public static final int GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
  public static final int GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
  public static final int GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
  public static final int GL_SAMPLER_BUFFER_EXT = 0x8DC2;
  public static final int GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
  public static final int GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
  public static final int GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
  public static final int GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
  public static final int GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
  public static final int GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
  public static final int GL_INT_SAMPLER_1D_EXT = 0x8DC9;
  public static final int GL_INT_SAMPLER_2D_EXT = 0x8DCA;
  public static final int GL_INT_SAMPLER_3D_EXT = 0x8DCB;
  public static final int GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
  public static final int GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
  public static final int GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
  public static final int GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
  public static final int GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
  public static final int GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
  public static final int GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
  public static final int GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
  public static final int GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
  public static final int GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
  public static final int GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
  public static final int GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
  public static final int GL_GEOMETRY_SHADER_EXT = 0x8DD9;
  public static final int GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
  public static final int GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
  public static final int GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
  public static final int GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
  public static final int GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
  public static final int GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
  public static final int GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
  public static final int GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
  public static final int GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
  public static final int GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
  public static final int GL_LINES_ADJACENCY_EXT = 0xA;
  public static final int GL_LINE_STRIP_ADJACENCY_EXT = 0xB;
  public static final int GL_TRIANGLES_ADJACENCY_EXT = 0xC;
  public static final int GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0xD;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
  public static final int GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
  public static final int GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
  public static final int GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
  public static final int GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
  public static final int GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
  public static final int GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
  public static final int GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
  public static final int GL_UNIFORM_BUFFER_EXT = 0x8DEE;
  public static final int GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
  public static final int GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
  public static final int GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
  public static final int GL_RGB9_E5_EXT = 0x8C3D;
  public static final int GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
  public static final int GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
  public static final int GL_R11F_G11F_B10F_EXT = 0x8C3A;
  public static final int GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
  public static final int GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
  public static final int GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
  public static final int GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
  public static final int GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
  public static final int GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
  public static final int GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
  public static final int GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
  public static final int GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
  public static final int GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
  public static final int GL_RGBA32UI_EXT = 0x8D70;
  public static final int GL_RGB32UI_EXT = 0x8D71;
  public static final int GL_ALPHA32UI_EXT = 0x8D72;
  public static final int GL_INTENSITY32UI_EXT = 0x8D73;
  public static final int GL_LUMINANCE32UI_EXT = 0x8D74;
  public static final int GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
  public static final int GL_RGBA16UI_EXT = 0x8D76;
  public static final int GL_RGB16UI_EXT = 0x8D77;
  public static final int GL_ALPHA16UI_EXT = 0x8D78;
  public static final int GL_INTENSITY16UI_EXT = 0x8D79;
  public static final int GL_LUMINANCE16UI_EXT = 0x8D7A;
  public static final int GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
  public static final int GL_RGBA8UI_EXT = 0x8D7C;
  public static final int GL_RGB8UI_EXT = 0x8D7D;
  public static final int GL_ALPHA8UI_EXT = 0x8D7E;
  public static final int GL_INTENSITY8UI_EXT = 0x8D7F;
  public static final int GL_LUMINANCE8UI_EXT = 0x8D80;
  public static final int GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
  public static final int GL_RGBA32I_EXT = 0x8D82;
  public static final int GL_RGB32I_EXT = 0x8D83;
  public static final int GL_ALPHA32I_EXT = 0x8D84;
  public static final int GL_INTENSITY32I_EXT = 0x8D85;
  public static final int GL_LUMINANCE32I_EXT = 0x8D86;
  public static final int GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
  public static final int GL_RGBA16I_EXT = 0x8D88;
  public static final int GL_RGB16I_EXT = 0x8D89;
  public static final int GL_ALPHA16I_EXT = 0x8D8A;
  public static final int GL_INTENSITY16I_EXT = 0x8D8B;
  public static final int GL_LUMINANCE16I_EXT = 0x8D8C;
  public static final int GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
  public static final int GL_RGBA8I_EXT = 0x8D8E;
  public static final int GL_RGB8I_EXT = 0x8D8F;
  public static final int GL_ALPHA8I_EXT = 0x8D90;
  public static final int GL_INTENSITY8I_EXT = 0x8D91;
  public static final int GL_LUMINANCE8I_EXT = 0x8D92;
  public static final int GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
  public static final int GL_RED_INTEGER_EXT = 0x8D94;
  public static final int GL_GREEN_INTEGER_EXT = 0x8D95;
  public static final int GL_BLUE_INTEGER_EXT = 0x8D96;
  public static final int GL_ALPHA_INTEGER_EXT = 0x8D97;
  public static final int GL_RGB_INTEGER_EXT = 0x8D98;
  public static final int GL_RGBA_INTEGER_EXT = 0x8D99;
  public static final int GL_BGR_INTEGER_EXT = 0x8D9A;
  public static final int GL_BGRA_INTEGER_EXT = 0x8D9B;
  public static final int GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
  public static final int GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
  public static final int GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
  public static final int GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
  public static final int GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
  public static final int GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
  public static final int GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
  public static final int GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
  public static final int GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
  public static final int GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
  public static final int GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
  public static final int GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
  public static final int GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
  public static final int GL_TEXTURE_COORD_NV = 0x8C79;
  public static final int GL_CLIP_DISTANCE_NV = 0x8C7A;
  public static final int GL_VERTEX_ID_NV = 0x8C7B;
  public static final int GL_PRIMITIVE_ID_NV = 0x8C7C;
  public static final int GL_GENERIC_ATTRIB_NV = 0x8C7D;
  public static final int GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
  public static final int GL_ACTIVE_VARYINGS_NV = 0x8C81;
  public static final int GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
  public static final int GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
  public static final int GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
  public static final int GL_PRIMITIVES_GENERATED_NV = 0x8C87;
  public static final int GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
  public static final int GL_RASTERIZER_DISCARD_NV = 0x8C89;
  public static final int GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_ATTRIBS_NV = 0x8C8A;
  public static final int GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
  public static final int GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
  public static final int GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
  public static final int GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
  public static final int GL_GEOMETRY_PROGRAM_NV = 0x8C26;
  public static final int GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
  public static final int GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
  public static final int GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
  public static final int GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
  public static final int GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
  public static final int GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
  public static final int GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
  public static final int GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
  public static final int GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
  public static final int GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
  public static final int GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
  public static final int GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
  public static final int GL_MAX_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8D57;
  public static final int GL_MAX_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E11;
  public static final int GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
  public static final int GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E13;
  public static final int GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
  public static final int GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
  public static final int GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
  public static final int GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
  public static final int GL_OES_read_format = 1;
  public static final int GL_GREMEDY_string_marker = 1;
  public static final int GL_MESAX_texture_stack = 1;
  public static final int GL_KTX_FRONT_REGION = 0;
  public static final int GL_KTX_BACK_REGION = 1;
  public static final int GL_KTX_Z_REGION = 2;
  public static final int GL_KTX_STENCIL_REGION = 3;
  public static final int GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
  public static final int GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
  public static final int GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
  public static final int GL_TEXTURE_MINIMIZE_STORAGE_APPLE = 0x85B6;
  public static final int GL_HALF_APPLE = 0x140B;
  public static final int GL_COLOR_FLOAT_APPLE = 0x8A0F;
  public static final int GL_RGBA_FLOAT32_APPLE = 0x8814;
  public static final int GL_RGB_FLOAT32_APPLE = 0x8815;
  public static final int GL_ALPHA_FLOAT32_APPLE = 0x8816;
  public static final int GL_INTENSITY_FLOAT32_APPLE = 0x8817;
  public static final int GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
  public static final int GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
  public static final int GL_RGBA_FLOAT16_APPLE = 0x881A;
  public static final int GL_RGB_FLOAT16_APPLE = 0x881B;
  public static final int GL_ALPHA_FLOAT16_APPLE = 0x881C;
  public static final int GL_INTENSITY_FLOAT16_APPLE = 0x881D;
  public static final int GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
  public static final int GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
  public static final int GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE = 0x8A10;
  public static final int GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
  public static final int GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
  public static final int GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
  public static final int GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
  public static final int GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
  public static final int GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
  public static final int GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
  public static final int GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
  public static final int GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
  public static final int GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;

  /** Interface to C language function: <br> <code> void {@native glAccum}(GLenum op, GLfloat value); </code>    */
  public void glAccum(int op, float value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glActiveStencilFaceEXT}(GLenum mode); </code>    */
  public void glActiveStencilFaceEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glActiveTexture}(GLenum mode); </code>    */
  public void glActiveTexture(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glActiveVaryingNV}(GLuint program, const GLchar *  name); </code>    */
  public void glActiveVaryingNV(int program, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glActiveVaryingNV}(GLuint program, const GLchar *  name); </code>    */
  public void glActiveVaryingNV(int program, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glAlphaFragmentOp1ATI}(GLenum stage, GLuint portion, GLuint variable, GLuint input, GLuint mapping, GLuint componentUsage); </code>    */
  public void glAlphaFragmentOp1ATI(int stage, int portion, int variable, int input, int mapping, int componentUsage);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glAlphaFragmentOp2ATI}(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod); </code>    */
  public void glAlphaFragmentOp2ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glAlphaFragmentOp3ATI}(GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod); </code>    */
  public void glAlphaFragmentOp3ATI(int op, int dst, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod);

  /** Interface to C language function: <br> <code> void {@native glAlphaFunc}(GLenum func, GLclampf ref); </code>    */
  public void glAlphaFunc(int func, float ref);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glApplyTextureEXT}(GLenum mode); </code>    */
  public void glApplyTextureEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glAreProgramsResidentNV}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code>    */
  public boolean glAreProgramsResidentNV(int n, java.nio.IntBuffer textures, java.nio.ByteBuffer residences);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glAreProgramsResidentNV}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code>    */
  public boolean glAreProgramsResidentNV(int n, int[] textures, int textures_offset, byte[] residences, int residences_offset);

  /** Interface to C language function: <br> <code> GLboolean {@native glAreTexturesResident}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code>    */
  public boolean glAreTexturesResident(int n, java.nio.IntBuffer textures, java.nio.ByteBuffer residences);

  /** Interface to C language function: <br> <code> GLboolean {@native glAreTexturesResident}(GLsizei n, const GLuint *  textures, GLboolean *  residences); </code>    */
  public boolean glAreTexturesResident(int n, int[] textures, int textures_offset, byte[] residences, int residences_offset);

  /** Interface to C language function: <br> <code> void {@native glArrayElement}(GLint i); </code>    */
  public void glArrayElement(int i);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glArrayObjectATI}(GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset); </code>    */
  public void glArrayObjectATI(int array, int size, int type, int stride, int buffer, int offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glAsyncMarkerSGIX}(GLuint mode); </code>    */
  public void glAsyncMarkerSGIX(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glAttachObjectARB}(GLhandleARB target, GLhandleARB id); </code>    */
  public void glAttachObjectARB(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glAttachShader}(GLuint target, GLuint id); </code>    */
  public void glAttachShader(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glBegin}(GLenum mode); </code>    */
  public void glBegin(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBeginFragmentShaderATI}(void); </code>    */
  public void glBeginFragmentShaderATI();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBeginOcclusionQueryNV}(GLuint mode); </code>    */
  public void glBeginOcclusionQueryNV(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBeginQuery}(GLenum target, GLuint id); </code>    */
  public void glBeginQuery(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBeginQueryARB}(GLenum target, GLuint id); </code>    */
  public void glBeginQueryARB(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBeginTransformFeedbackNV}(GLenum primitiveMode); </code>    */
  public void glBeginTransformFeedbackNV(int primitiveMode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBeginVertexShaderEXT}(void); </code>    */
  public void glBeginVertexShaderEXT();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindAttribLocation}(GLuint program, GLuint index, const GLchar *  name); </code>    */
  public void glBindAttribLocation(int program, int index, java.lang.String name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindAttribLocationARB}(GLhandleARB program, GLuint index, const GLcharARB *  name); </code>    */
  public void glBindAttribLocationARB(int program, int index, java.lang.String name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindBuffer}(GLenum target, GLuint id); </code>    */
  public void glBindBuffer(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindBufferARB}(GLenum target, GLuint id); </code>    */
  public void glBindBufferARB(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindBufferBaseNV}(GLenum target, GLuint index, GLuint buffer); </code>    */
  public void glBindBufferBaseNV(int target, int index, int buffer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindBufferOffsetNV}(GLenum target, GLuint index, GLuint buffer, ptrdiff_t offset); </code>    */
  public void glBindBufferOffsetNV(int target, int index, int buffer, int offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindBufferRangeNV}(GLenum target, GLuint index, GLuint buffer, ptrdiff_t offset, ptrdiff_t size); </code>    */
  public void glBindBufferRangeNV(int target, int index, int buffer, int offset, int size);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindFragDataLocationEXT}(GLuint program, GLuint color, const GLchar *  name); </code>    */
  public void glBindFragDataLocationEXT(int program, int color, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindFragDataLocationEXT}(GLuint program, GLuint color, const GLchar *  name); </code>    */
  public void glBindFragDataLocationEXT(int program, int color, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindFragmentShaderATI}(GLuint mode); </code>    */
  public void glBindFragmentShaderATI(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindFramebufferEXT}(GLenum target, GLuint id); </code>    */
  public void glBindFramebufferEXT(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glBindLightParameterEXT}(GLenum light, GLenum value); </code>    */
  public int glBindLightParameterEXT(int light, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glBindMaterialParameterEXT}(GLenum light, GLenum value); </code>    */
  public int glBindMaterialParameterEXT(int light, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glBindParameterEXT}(GLenum type); </code>    */
  public int glBindParameterEXT(int type);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindProgramARB}(GLenum target, GLuint id); </code>    */
  public void glBindProgramARB(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindProgramNV}(GLenum target, GLuint id); </code>    */
  public void glBindProgramNV(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindRenderbufferEXT}(GLenum target, GLuint id); </code>    */
  public void glBindRenderbufferEXT(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glBindTexGenParameterEXT}(GLenum unit, GLenum coord, GLenum value); </code>    */
  public int glBindTexGenParameterEXT(int unit, int coord, int value);

  /** Interface to C language function: <br> <code> void {@native glBindTexture}(GLenum target, GLuint texture); </code>    */
  public void glBindTexture(int target, int texture);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glBindTextureUnitParameterEXT}(GLenum light, GLenum value); </code>    */
  public int glBindTextureUnitParameterEXT(int light, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindVertexArrayAPPLE}(GLuint mode); </code>    */
  public void glBindVertexArrayAPPLE(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBindVertexShaderEXT}(GLuint mode); </code>    */
  public void glBindVertexShaderEXT(int mode);

  /** Interface to C language function: <br> <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code>    */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, java.nio.ByteBuffer bitmap);

  /** Interface to C language function: <br> <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code>    */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, byte[] bitmap, int bitmap_offset);

  /** Interface to C language function: <br> <code> void {@native glBitmap}(GLsizei width, GLsizei height, GLfloat xorig, GLfloat yorig, GLfloat xmove, GLfloat ymove, const GLubyte *  bitmap); </code>    */
  public void glBitmap(int width, int height, float xorig, float yorig, float xmove, float ymove, long bitmap_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlendColor}(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha); </code>    */
  public void glBlendColor(float red, float green, float blue, float alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlendEquation}(GLenum mode); </code>    */
  public void glBlendEquation(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlendEquationSeparate}(GLenum target, GLenum id); </code>    */
  public void glBlendEquationSeparate(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlendEquationSeparateEXT}(GLenum target, GLenum id); </code>    */
  public void glBlendEquationSeparateEXT(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glBlendFunc}(GLenum sfactor, GLenum dfactor); </code>    */
  public void glBlendFunc(int sfactor, int dfactor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlendFuncSeparate}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code>    */
  public void glBlendFuncSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlendFuncSeparateEXT}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code>    */
  public void glBlendFuncSeparateEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlendFuncSeparateINGR}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code>    */
  public void glBlendFuncSeparateINGR(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBlitFramebufferEXT}(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter); </code>    */
  public void glBlitFramebufferEXT(int srcX0, int srcY0, int srcX1, int srcY1, int dstX0, int dstY0, int dstX1, int dstY1, int mask, int filter);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBufferData}(GLenum target, ptrdiff_t size, const GLvoid *  data, GLenum usage); </code>    */
  public void glBufferData(int target, int size, java.nio.Buffer data, int usage);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBufferDataARB}(GLenum target, ptrdiff_t size, const GLvoid *  data, GLenum usage); </code>    */
  public void glBufferDataARB(int target, int size, java.nio.Buffer data, int usage);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBufferParameteriAPPLE}(GLenum target, GLenum pname, GLint params); </code>    */
  public void glBufferParameteriAPPLE(int target, int pname, int params);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glBufferRegionEnabled}(GLvoid); </code>    */
  public int glBufferRegionEnabled();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBufferSubData}(GLenum target, ptrdiff_t offset, ptrdiff_t size, const GLvoid *  data); </code>    */
  public void glBufferSubData(int target, int offset, int size, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glBufferSubDataARB}(GLenum target, ptrdiff_t offset, ptrdiff_t size, const GLvoid *  data); </code>    */
  public void glBufferSubDataARB(int target, int offset, int size, java.nio.Buffer data);

  /** Interface to C language function: <br> <code> void {@native glCallList}(GLuint list); </code>    */
  public void glCallList(int list);

  /** Interface to C language function: <br> <code> void {@native glCallLists}(GLsizei n, GLenum type, const GLvoid *  lists); </code>    */
  public void glCallLists(int n, int type, java.nio.Buffer lists);

  /** Entry point (through function pointer) to C language function: <br> <code> GLenum {@native glCheckFramebufferStatusEXT}(GLenum type); </code>    */
  public int glCheckFramebufferStatusEXT(int type);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glClampColorARB}(GLenum target, GLenum id); </code>    */
  public void glClampColorARB(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glClear}(GLbitfield mask); </code>    */
  public void glClear(int mask);

  /** Interface to C language function: <br> <code> void {@native glClearAccum}(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha); </code>    */
  public void glClearAccum(float red, float green, float blue, float alpha);

  /** Interface to C language function: <br> <code> void {@native glClearColor}(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha); </code>    */
  public void glClearColor(float red, float green, float blue, float alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glClearColorIiEXT}(GLint red, GLint green, GLint blue, GLint alpha); </code>    */
  public void glClearColorIiEXT(int red, int green, int blue, int alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glClearColorIuiEXT}(GLuint red, GLuint green, GLuint blue, GLuint alpha); </code>    */
  public void glClearColorIuiEXT(int red, int green, int blue, int alpha);

  /** Interface to C language function: <br> <code> void {@native glClearDepth}(GLclampd depth); </code>    */
  public void glClearDepth(double depth);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glClearDepthdNV}(GLdouble depth); </code>    */
  public void glClearDepthdNV(double depth);

  /** Interface to C language function: <br> <code> void {@native glClearIndex}(GLfloat c); </code>    */
  public void glClearIndex(float c);

  /** Interface to C language function: <br> <code> void {@native glClearStencil}(GLint s); </code>    */
  public void glClearStencil(int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glClientActiveTexture}(GLenum mode); </code>    */
  public void glClientActiveTexture(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glClientActiveVertexStreamATI}(GLenum mode); </code>    */
  public void glClientActiveVertexStreamATI(int mode);

  /** Interface to C language function: <br> <code> void {@native glClipPlane}(GLenum plane, const GLdouble *  equation); </code>    */
  public void glClipPlane(int plane, java.nio.DoubleBuffer equation);

  /** Interface to C language function: <br> <code> void {@native glClipPlane}(GLenum plane, const GLdouble *  equation); </code>    */
  public void glClipPlane(int plane, double[] equation, int equation_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3b}(GLbyte red, GLbyte green, GLbyte blue); </code>    */
  public void glColor3b(byte red, byte green, byte blue);

  /** Interface to C language function: <br> <code> void {@native glColor3bv}(const GLbyte *  v); </code>    */
  public void glColor3bv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3bv}(const GLbyte *  v); </code>    */
  public void glColor3bv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3d}(GLdouble red, GLdouble green, GLdouble blue); </code>    */
  public void glColor3d(double red, double green, double blue);

  /** Interface to C language function: <br> <code> void {@native glColor3dv}(const GLdouble *  v); </code>    */
  public void glColor3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3dv}(const GLdouble *  v); </code>    */
  public void glColor3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3f}(GLfloat red, GLfloat green, GLfloat blue); </code>    */
  public void glColor3f(float red, float green, float blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor3fVertex3fSUN}(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glColor3fVertex3fSUN(float r, float g, float b, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glColor3fVertex3fvSUN(java.nio.FloatBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glColor3fVertex3fvSUN(float[] c, int c_offset, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3fv}(const GLfloat *  v); </code>    */
  public void glColor3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3fv}(const GLfloat *  v); </code>    */
  public void glColor3fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code>    */
  public void glColor3hNV(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor3hvNV}(const GLhalfNV *  v); </code>    */
  public void glColor3hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor3hvNV}(const GLhalfNV *  v); </code>    */
  public void glColor3hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3i}(GLint red, GLint green, GLint blue); </code>    */
  public void glColor3i(int red, int green, int blue);

  /** Interface to C language function: <br> <code> void {@native glColor3iv}(const GLint *  v); </code>    */
  public void glColor3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3iv}(const GLint *  v); </code>    */
  public void glColor3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3s}(GLshort red, GLshort green, GLshort blue); </code>    */
  public void glColor3s(short red, short green, short blue);

  /** Interface to C language function: <br> <code> void {@native glColor3sv}(const GLshort *  v); </code>    */
  public void glColor3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3sv}(const GLshort *  v); </code>    */
  public void glColor3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3ub}(GLubyte red, GLubyte green, GLubyte blue); </code>    */
  public void glColor3ub(byte red, byte green, byte blue);

  /** Interface to C language function: <br> <code> void {@native glColor3ubv}(const GLubyte *  v); </code>    */
  public void glColor3ubv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3ubv}(const GLubyte *  v); </code>    */
  public void glColor3ubv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3ui}(GLuint red, GLuint green, GLuint blue); </code>    */
  public void glColor3ui(int red, int green, int blue);

  /** Interface to C language function: <br> <code> void {@native glColor3uiv}(const GLuint *  v); </code>    */
  public void glColor3uiv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3uiv}(const GLuint *  v); </code>    */
  public void glColor3uiv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor3us}(GLushort red, GLushort green, GLushort blue); </code>    */
  public void glColor3us(short red, short green, short blue);

  /** Interface to C language function: <br> <code> void {@native glColor3usv}(const GLushort *  v); </code>    */
  public void glColor3usv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor3usv}(const GLushort *  v); </code>    */
  public void glColor3usv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4b}(GLbyte red, GLbyte green, GLbyte blue, GLbyte alpha); </code>    */
  public void glColor4b(byte red, byte green, byte blue, byte alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4bv}(const GLbyte *  v); </code>    */
  public void glColor4bv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4bv}(const GLbyte *  v); </code>    */
  public void glColor4bv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4d}(GLdouble red, GLdouble green, GLdouble blue, GLdouble alpha); </code>    */
  public void glColor4d(double red, double green, double blue, double alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4dv}(const GLdouble *  v); </code>    */
  public void glColor4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4dv}(const GLdouble *  v); </code>    */
  public void glColor4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4f}(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha); </code>    */
  public void glColor4f(float red, float green, float blue, float alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4fNormal3fVertex3fSUN}(GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glColor4fNormal3fVertex3fSUN(float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4fNormal3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glColor4fNormal3fVertex3fvSUN(java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4fNormal3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glColor4fNormal3fVertex3fvSUN(float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4fv}(const GLfloat *  v); </code>    */
  public void glColor4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4fv}(const GLfloat *  v); </code>    */
  public void glColor4fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code>    */
  public void glColor4hNV(short x, short y, short z, short w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4hvNV}(const GLhalfNV *  v); </code>    */
  public void glColor4hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4hvNV}(const GLhalfNV *  v); </code>    */
  public void glColor4hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4i}(GLint red, GLint green, GLint blue, GLint alpha); </code>    */
  public void glColor4i(int red, int green, int blue, int alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4iv}(const GLint *  v); </code>    */
  public void glColor4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4iv}(const GLint *  v); </code>    */
  public void glColor4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4s}(GLshort red, GLshort green, GLshort blue, GLshort alpha); </code>    */
  public void glColor4s(short red, short green, short blue, short alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4sv}(const GLshort *  v); </code>    */
  public void glColor4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4sv}(const GLshort *  v); </code>    */
  public void glColor4sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4ub}(GLubyte red, GLubyte green, GLubyte blue, GLubyte alpha); </code>    */
  public void glColor4ub(byte red, byte green, byte blue, byte alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4ubVertex2fSUN}(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y); </code>    */
  public void glColor4ubVertex2fSUN(byte r, byte g, byte b, byte a, float x, float y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4ubVertex2fvSUN}(const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glColor4ubVertex2fvSUN(java.nio.ByteBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4ubVertex2fvSUN}(const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glColor4ubVertex2fvSUN(byte[] c, int c_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4ubVertex3fSUN}(GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glColor4ubVertex3fSUN(byte r, byte g, byte b, byte a, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4ubVertex3fvSUN}(const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glColor4ubVertex3fvSUN(java.nio.ByteBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColor4ubVertex3fvSUN}(const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glColor4ubVertex3fvSUN(byte[] c, int c_offset, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4ubv}(const GLubyte *  v); </code>    */
  public void glColor4ubv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4ubv}(const GLubyte *  v); </code>    */
  public void glColor4ubv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4ui}(GLuint red, GLuint green, GLuint blue, GLuint alpha); </code>    */
  public void glColor4ui(int red, int green, int blue, int alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4uiv}(const GLuint *  v); </code>    */
  public void glColor4uiv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4uiv}(const GLuint *  v); </code>    */
  public void glColor4uiv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glColor4us}(GLushort red, GLushort green, GLushort blue, GLushort alpha); </code>    */
  public void glColor4us(short red, short green, short blue, short alpha);

  /** Interface to C language function: <br> <code> void {@native glColor4usv}(const GLushort *  v); </code>    */
  public void glColor4usv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glColor4usv}(const GLushort *  v); </code>    */
  public void glColor4usv(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorFragmentOp1ATI}(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod); </code>    */
  public void glColorFragmentOp1ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorFragmentOp2ATI}(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod); </code>    */
  public void glColorFragmentOp2ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorFragmentOp3ATI}(GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod); </code>    */
  public void glColorFragmentOp3ATI(int op, int dst, int dstMask, int dstMod, int arg1, int arg1Rep, int arg1Mod, int arg2, int arg2Rep, int arg2Mod, int arg3, int arg3Rep, int arg3Mod);

  /** Interface to C language function: <br> <code> void {@native glColorMask}(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha); </code>    */
  public void glColorMask(boolean red, boolean green, boolean blue, boolean alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorMaskIndexedEXT}(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a); </code>    */
  public void glColorMaskIndexedEXT(int index, boolean r, boolean g, boolean b, boolean a);

  /** Interface to C language function: <br> <code> void {@native glColorMaterial}(GLenum face, GLenum mode); </code>    */
  public void glColorMaterial(int face, int mode);

  /** Interface to C language function: <br> <code> void {@native glColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  ptr); </code> 
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glColorPointer(int size, int type, int stride, java.nio.Buffer ptr);

  /** Interface to C language function: <br> <code> void {@native glColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  ptr); </code>    */
  public void glColorPointer(int size, int type, int stride, long ptr_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorSubTable}(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *  data); </code>    */
  public void glColorSubTable(int target, int start, int count, int format, int type, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorSubTable}(GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const GLvoid *  data); </code>    */
  public void glColorSubTable(int target, int start, int count, int format, int type, long data_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorTable}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code>    */
  public void glColorTable(int target, int internalformat, int width, int format, int type, java.nio.Buffer table);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorTable}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code>    */
  public void glColorTable(int target, int internalformat, int width, int format, int type, long table_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorTableEXT}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code>    */
  public void glColorTableEXT(int target, int internalformat, int width, int format, int type, java.nio.Buffer table);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorTableParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glColorTableParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorTableParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glColorTableParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorTableParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glColorTableParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glColorTableParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glColorTableParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerInputNV}(GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage); </code>    */
  public void glCombinerInputNV(int stage, int portion, int variable, int input, int mapping, int componentUsage);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerOutputNV}(GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum); </code>    */
  public void glCombinerOutputNV(int stage, int portion, int abOutput, int cdOutput, int sumOutput, int scale, int bias, boolean abDotProduct, boolean cdDotProduct, boolean muxSum);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerParameterfNV}(GLenum target, GLfloat s); </code>    */
  public void glCombinerParameterfNV(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerParameterfvNV}(GLenum target, const GLfloat *  v); </code>    */
  public void glCombinerParameterfvNV(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerParameterfvNV}(GLenum target, const GLfloat *  v); </code>    */
  public void glCombinerParameterfvNV(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerParameteriNV}(GLenum target, GLint s); </code>    */
  public void glCombinerParameteriNV(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerParameterivNV}(GLenum target, const GLint *  v); </code>    */
  public void glCombinerParameterivNV(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerParameterivNV}(GLenum target, const GLint *  v); </code>    */
  public void glCombinerParameterivNV(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerStageParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glCombinerStageParameterfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCombinerStageParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glCombinerStageParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompileShader}(GLuint mode); </code>    */
  public void glCompileShader(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompileShaderARB}(GLhandleARB mode); </code>    */
  public void glCompileShaderARB(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexImage1D(int target, int level, int internalformat, int width, int border, int imageSize, long data_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexImage2D(int target, int level, int internalformat, int width, int height, int border, int imageSize, long data_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexImage3D}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int imageSize, long data_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexSubImage1D(int target, int level, int xoffset, int width, int format, int imageSize, long data_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int imageSize, long data_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCompressedTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *  data); </code>    */
  public void glCompressedTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int imageSize, long data_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionFilter1D}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code>    */
  public void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, java.nio.Buffer table);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionFilter1D}(GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const GLvoid *  table); </code>    */
  public void glConvolutionFilter1D(int target, int internalformat, int width, int format, int type, long table_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  image); </code>    */
  public void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, java.nio.Buffer image);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  image); </code>    */
  public void glConvolutionFilter2D(int target, int internalformat, int width, int height, int format, int type, long image_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionParameterf}(GLenum target, GLenum pname, GLfloat params); </code>    */
  public void glConvolutionParameterf(int target, int pname, float params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glConvolutionParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glConvolutionParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionParameteri}(GLenum target, GLenum pname, GLint params); </code>    */
  public void glConvolutionParameteri(int target, int pname, int params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glConvolutionParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glConvolutionParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glConvolutionParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCopyColorSubTable}(GLenum target, GLsizei start, GLint x, GLint y, GLsizei width); </code>    */
  public void glCopyColorSubTable(int target, int start, int x, int y, int width);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCopyColorTable}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width); </code>    */
  public void glCopyColorTable(int target, int internalformat, int x, int y, int width);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCopyConvolutionFilter1D}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width); </code>    */
  public void glCopyConvolutionFilter1D(int target, int internalformat, int x, int y, int width);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCopyConvolutionFilter2D}(GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glCopyConvolutionFilter2D(int target, int internalformat, int x, int y, int width, int height);

  /** Interface to C language function: <br> <code> void {@native glCopyPixels}(GLint x, GLint y, GLsizei width, GLsizei height, GLenum type); </code>    */
  public void glCopyPixels(int x, int y, int width, int height, int type);

  /** Interface to C language function: <br> <code> void {@native glCopyTexImage1D}(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border); </code>    */
  public void glCopyTexImage1D(int target, int level, int internalformat, int x, int y, int width, int border);

  /** Interface to C language function: <br> <code> void {@native glCopyTexImage2D}(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border); </code>    */
  public void glCopyTexImage2D(int target, int level, int internalformat, int x, int y, int width, int height, int border);

  /** Interface to C language function: <br> <code> void {@native glCopyTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width); </code>    */
  public void glCopyTexSubImage1D(int target, int level, int xoffset, int x, int y, int width);

  /** Interface to C language function: <br> <code> void {@native glCopyTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glCopyTexSubImage2D(int target, int level, int xoffset, int yoffset, int x, int y, int width, int height);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCopyTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glCopyTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int x, int y, int width, int height);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glCreateProgram}(void); </code>    */
  public int glCreateProgram();

  /** Entry point (through function pointer) to C language function: <br> <code> GLhandleARB {@native glCreateProgramObjectARB}(void); </code>    */
  public int glCreateProgramObjectARB();

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glCreateShader}(GLenum type); </code>    */
  public int glCreateShader(int type);

  /** Entry point (through function pointer) to C language function: <br> <code> GLhandleARB {@native glCreateShaderObjectARB}(GLenum type); </code>    */
  public int glCreateShaderObjectARB(int type);

  /** Interface to C language function: <br> <code> void {@native glCullFace}(GLenum mode); </code>    */
  public void glCullFace(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCullParameterdvEXT}(GLenum pname, GLdouble *  params); </code>    */
  public void glCullParameterdvEXT(int pname, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCullParameterdvEXT}(GLenum pname, GLdouble *  params); </code>    */
  public void glCullParameterdvEXT(int pname, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCullParameterfvEXT}(GLenum pname, GLfloat *  params); </code>    */
  public void glCullParameterfvEXT(int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCullParameterfvEXT}(GLenum pname, GLfloat *  params); </code>    */
  public void glCullParameterfvEXT(int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glCurrentPaletteMatrixARB}(GLint count); </code>    */
  public void glCurrentPaletteMatrixARB(int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeformSGIX}(GLbitfield mode); </code>    */
  public void glDeformSGIX(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeformationMap3dSGIX}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *  points); </code>    */
  public void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, java.nio.DoubleBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeformationMap3dSGIX}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *  points); </code>    */
  public void glDeformationMap3dSGIX(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double w1, double w2, int wstride, int worder, double[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeformationMap3fSGIX}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *  points); </code>    */
  public void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeformationMap3fSGIX}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *  points); </code>    */
  public void glDeformationMap3fSGIX(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float w1, float w2, int wstride, int worder, float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteAsyncMarkersSGIX}(GLuint target, GLsizei s); </code>    */
  public void glDeleteAsyncMarkersSGIX(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteBufferRegion}(GLuint mode); </code>    */
  public void glDeleteBufferRegion(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteBuffers}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteBuffers(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteBuffers}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteBuffers(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteBuffersARB}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteBuffersARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteBuffersARB}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteBuffersARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteFencesAPPLE}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteFencesAPPLE(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteFencesAPPLE}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteFencesAPPLE(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteFencesNV(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteFencesNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteFencesNV(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteFragmentShaderATI}(GLuint mode); </code>    */
  public void glDeleteFragmentShaderATI(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteFramebuffersEXT}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteFramebuffersEXT(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteFramebuffersEXT}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteFramebuffersEXT(int n, int[] ids, int ids_offset);

  /** Interface to C language function: <br> <code> void {@native glDeleteLists}(GLuint list, GLsizei range); </code>    */
  public void glDeleteLists(int list, int range);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteObjectARB}(GLhandleARB mode); </code>    */
  public void glDeleteObjectARB(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteOcclusionQueriesNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteOcclusionQueriesNV(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteOcclusionQueriesNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteOcclusionQueriesNV(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteProgram}(GLuint mode); </code>    */
  public void glDeleteProgram(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteProgramsARB}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteProgramsARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteProgramsARB}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteProgramsARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteProgramsNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteProgramsNV(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteProgramsNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteProgramsNV(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteQueries}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteQueries(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteQueries}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteQueries(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteQueriesARB}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteQueriesARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteQueriesARB}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteQueriesARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteRenderbuffersEXT}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteRenderbuffersEXT(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteRenderbuffersEXT}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteRenderbuffersEXT(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteShader}(GLuint mode); </code>    */
  public void glDeleteShader(int mode);

  /** Interface to C language function: <br> <code> void {@native glDeleteTextures}(GLsizei n, const GLuint *  textures); </code>    */
  public void glDeleteTextures(int n, java.nio.IntBuffer textures);

  /** Interface to C language function: <br> <code> void {@native glDeleteTextures}(GLsizei n, const GLuint *  textures); </code>    */
  public void glDeleteTextures(int n, int[] textures, int textures_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteVertexArraysAPPLE}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteVertexArraysAPPLE(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteVertexArraysAPPLE}(GLsizei n, const GLuint *  ids); </code>    */
  public void glDeleteVertexArraysAPPLE(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDeleteVertexShaderEXT}(GLuint mode); </code>    */
  public void glDeleteVertexShaderEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDepthBoundsEXT}(GLclampd x, GLclampd y); </code>    */
  public void glDepthBoundsEXT(double x, double y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDepthBoundsdNV}(GLdouble zmin, GLdouble zmax); </code>    */
  public void glDepthBoundsdNV(double zmin, double zmax);

  /** Interface to C language function: <br> <code> void {@native glDepthFunc}(GLenum func); </code>    */
  public void glDepthFunc(int func);

  /** Interface to C language function: <br> <code> void {@native glDepthMask}(GLboolean flag); </code>    */
  public void glDepthMask(boolean flag);

  /** Interface to C language function: <br> <code> void {@native glDepthRange}(GLclampd near_val, GLclampd far_val); </code>    */
  public void glDepthRange(double near_val, double far_val);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDepthRangedNV}(GLdouble zNear, GLdouble zFar); </code>    */
  public void glDepthRangedNV(double zNear, double zFar);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDetachObjectARB}(GLhandleARB target, GLhandleARB id); </code>    */
  public void glDetachObjectARB(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDetachShader}(GLuint target, GLuint id); </code>    */
  public void glDetachShader(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDetailTexFuncSGIS}(GLenum target, GLsizei n, const GLfloat *  points); </code>    */
  public void glDetailTexFuncSGIS(int target, int n, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDetailTexFuncSGIS}(GLenum target, GLsizei n, const GLfloat *  points); </code>    */
  public void glDetailTexFuncSGIS(int target, int n, float[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glDisable}(GLenum cap); </code>    */
  public void glDisable(int cap);

  /** Interface to C language function: <br> <code> void {@native glDisableClientState}(GLenum cap); </code>    */
  public void glDisableClientState(int cap);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDisableIndexedEXT}(GLenum target, GLuint index); </code>    */
  public void glDisableIndexedEXT(int target, int index);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDisableVariantClientStateEXT}(GLuint mode); </code>    */
  public void glDisableVariantClientStateEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDisableVertexAttribAPPLE}(GLuint index, GLenum pname); </code>    */
  public void glDisableVertexAttribAPPLE(int index, int pname);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDisableVertexAttribArray}(GLuint mode); </code>    */
  public void glDisableVertexAttribArray(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDisableVertexAttribArrayARB}(GLuint mode); </code>    */
  public void glDisableVertexAttribArrayARB(int mode);

  /** Interface to C language function: <br> <code> void {@native glDrawArrays}(GLenum mode, GLint first, GLsizei count); </code>    */
  public void glDrawArrays(int mode, int first, int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawArraysInstancedEXT}(GLenum mode, GLint start, GLsizei count, GLsizei primcount); </code>    */
  public void glDrawArraysInstancedEXT(int mode, int start, int count, int primcount);

  /** Interface to C language function: <br> <code> void {@native glDrawBuffer}(GLenum mode); </code>    */
  public void glDrawBuffer(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawBufferRegion}(GLuint region, GLint x, GLint y, GLsizei width, GLsizei height, GLint xDest, GLint yDest); </code>    */
  public void glDrawBufferRegion(int region, int x, int y, int width, int height, int xDest, int yDest);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  ids); </code>    */
  public void glDrawBuffers(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawBuffers}(GLsizei n, const GLenum *  ids); </code>    */
  public void glDrawBuffers(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawBuffersARB}(GLsizei n, const GLenum *  ids); </code>    */
  public void glDrawBuffersARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawBuffersARB}(GLsizei n, const GLenum *  ids); </code>    */
  public void glDrawBuffersARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawBuffersATI}(GLsizei n, const GLenum *  ids); </code>    */
  public void glDrawBuffersATI(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawBuffersATI}(GLsizei n, const GLenum *  ids); </code>    */
  public void glDrawBuffersATI(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawElementArrayAPPLE}(GLenum target, GLint s, GLsizei t); </code>    */
  public void glDrawElementArrayAPPLE(int target, int s, int t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawElementArrayATI}(GLenum target, GLsizei s); </code>    */
  public void glDrawElementArrayATI(int target, int s);

  /** Interface to C language function: <br> <code> void {@native glDrawElements}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices); </code>    */
  public void glDrawElements(int mode, int count, int type, java.nio.Buffer indices);

  /** Interface to C language function: <br> <code> void {@native glDrawElements}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices); </code>    */
  public void glDrawElements(int mode, int count, int type, long indices_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawElementsInstancedEXT}(GLenum mode, GLsizei count, GLenum type, const GLvoid *  indices, GLsizei primcount); </code>    */
  public void glDrawElementsInstancedEXT(int mode, int count, int type, java.nio.Buffer indices, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawMeshArraysSUN}(GLenum target, GLint s, GLsizei t, GLsizei r); </code>    */
  public void glDrawMeshArraysSUN(int target, int s, int t, int r);

  /** Interface to C language function: <br> <code> void {@native glDrawPixels}(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glDrawPixels(int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glDrawPixels}(GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glDrawPixels(int width, int height, int format, int type, long pixels_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawRangeElementArrayAPPLE}(GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count); </code>    */
  public void glDrawRangeElementArrayAPPLE(int mode, int start, int end, int first, int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawRangeElementArrayATI}(GLenum mode, GLuint start, GLuint end, GLsizei count); </code>    */
  public void glDrawRangeElementArrayATI(int mode, int start, int end, int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawRangeElements}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *  indices); </code>    */
  public void glDrawRangeElements(int mode, int start, int end, int count, int type, java.nio.Buffer indices);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glDrawRangeElements}(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *  indices); </code>    */
  public void glDrawRangeElements(int mode, int start, int end, int count, int type, long indices_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlag}(GLboolean flag); </code>    */
  public void glEdgeFlag(boolean flag);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlagPointer}(GLsizei stride, const GLvoid *  ptr); </code> 
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glEdgeFlagPointer(int stride, java.nio.Buffer ptr);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlagPointer}(GLsizei stride, const GLvoid *  ptr); </code>    */
  public void glEdgeFlagPointer(int stride, long ptr_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlagv}(const GLboolean *  flag); </code>    */
  public void glEdgeFlagv(java.nio.ByteBuffer flag);

  /** Interface to C language function: <br> <code> void {@native glEdgeFlagv}(const GLboolean *  flag); </code>    */
  public void glEdgeFlagv(byte[] flag, int flag_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glElementPointerAPPLE}(GLenum pname, const GLvoid *  params); </code> 
      @param params a direct {@link java.nio.Buffer}   */
  public void glElementPointerAPPLE(int pname, java.nio.Buffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glElementPointerATI}(GLenum pname, const GLvoid *  params); </code> 
      @param params a direct {@link java.nio.Buffer}   */
  public void glElementPointerATI(int pname, java.nio.Buffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glElementPointerATI}(GLenum pname, const GLvoid *  params); </code>    */
  public void glElementPointerATI(int pname, long params_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glEnable}(GLenum cap); </code>    */
  public void glEnable(int cap);

  /** Interface to C language function: <br> <code> void {@native glEnableClientState}(GLenum cap); </code>    */
  public void glEnableClientState(int cap);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEnableIndexedEXT}(GLenum target, GLuint index); </code>    */
  public void glEnableIndexedEXT(int target, int index);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEnableVariantClientStateEXT}(GLuint mode); </code>    */
  public void glEnableVariantClientStateEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEnableVertexAttribAPPLE}(GLuint index, GLenum pname); </code>    */
  public void glEnableVertexAttribAPPLE(int index, int pname);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEnableVertexAttribArray}(GLuint mode); </code>    */
  public void glEnableVertexAttribArray(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEnableVertexAttribArrayARB}(GLuint mode); </code>    */
  public void glEnableVertexAttribArrayARB(int mode);

  /** Interface to C language function: <br> <code> void {@native glEnd}(void); </code>    */
  public void glEnd();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEndFragmentShaderATI}(void); </code>    */
  public void glEndFragmentShaderATI();

  /** Interface to C language function: <br> <code> void {@native glEndList}(void); </code>    */
  public void glEndList();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEndOcclusionQueryNV}(void); </code>    */
  public void glEndOcclusionQueryNV();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEndQuery}(GLenum mode); </code>    */
  public void glEndQuery(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEndQueryARB}(GLenum mode); </code>    */
  public void glEndQueryARB(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEndTransformFeedbackNV}(void); </code>    */
  public void glEndTransformFeedbackNV();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEndVertexShaderEXT}(void); </code>    */
  public void glEndVertexShaderEXT();

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1d}(GLdouble u); </code>    */
  public void glEvalCoord1d(double u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord1dv(java.nio.DoubleBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord1dv(double[] u, int u_offset);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1f}(GLfloat u); </code>    */
  public void glEvalCoord1f(float u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord1fv(java.nio.FloatBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord1fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord1fv(float[] u, int u_offset);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2d}(GLdouble u, GLdouble v); </code>    */
  public void glEvalCoord2d(double u, double v);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord2dv(java.nio.DoubleBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2dv}(const GLdouble *  u); </code>    */
  public void glEvalCoord2dv(double[] u, int u_offset);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2f}(GLfloat u, GLfloat v); </code>    */
  public void glEvalCoord2f(float u, float v);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord2fv(java.nio.FloatBuffer u);

  /** Interface to C language function: <br> <code> void {@native glEvalCoord2fv}(const GLfloat *  u); </code>    */
  public void glEvalCoord2fv(float[] u, int u_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glEvalMapsNV}(GLenum target, GLenum id); </code>    */
  public void glEvalMapsNV(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glEvalMesh1}(GLenum mode, GLint i1, GLint i2); </code>    */
  public void glEvalMesh1(int mode, int i1, int i2);

  /** Interface to C language function: <br> <code> void {@native glEvalMesh2}(GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2); </code>    */
  public void glEvalMesh2(int mode, int i1, int i2, int j1, int j2);

  /** Interface to C language function: <br> <code> void {@native glEvalPoint1}(GLint i); </code>    */
  public void glEvalPoint1(int i);

  /** Interface to C language function: <br> <code> void {@native glEvalPoint2}(GLint i, GLint j); </code>    */
  public void glEvalPoint2(int i, int j);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glExecuteProgramNV}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glExecuteProgramNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glExecuteProgramNV}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glExecuteProgramNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glExtractComponentEXT}(GLuint red, GLuint green, GLuint blue); </code>    */
  public void glExtractComponentEXT(int red, int green, int blue);

  /** Interface to C language function: <br> <code> void {@native glFeedbackBuffer}(GLsizei size, GLenum type, GLfloat *  buffer); </code> 
      @param buffer a direct {@link java.nio.FloatBuffer}   */
  public void glFeedbackBuffer(int size, int type, java.nio.FloatBuffer buffer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFinalCombinerInputNV}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code>    */
  public void glFinalCombinerInputNV(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Interface to C language function: <br> <code> void {@native glFinish}(void); </code>    */
  public void glFinish();

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glFinishAsyncSGIX}(GLuint *  markerp); </code>    */
  public int glFinishAsyncSGIX(java.nio.IntBuffer markerp);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glFinishAsyncSGIX}(GLuint *  markerp); </code>    */
  public int glFinishAsyncSGIX(int[] markerp, int markerp_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFinishFenceAPPLE}(GLuint mode); </code>    */
  public void glFinishFenceAPPLE(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFinishFenceNV}(GLuint mode); </code>    */
  public void glFinishFenceNV(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFinishObjectAPPLE}(GLenum target, GLint s); </code>    */
  public void glFinishObjectAPPLE(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFinishRenderAPPLE}(void); </code>    */
  public void glFinishRenderAPPLE();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFinishTextureSUNX}(void); </code>    */
  public void glFinishTextureSUNX();

  /** Interface to C language function: <br> <code> void {@native glFlush}(void); </code>    */
  public void glFlush();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFlushMappedBufferRangeAPPLE}(GLenum target, ptrdiff_t s, ptrdiff_t t); </code>    */
  public void glFlushMappedBufferRangeAPPLE(int target, int s, int t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFlushPixelDataRangeNV}(GLenum mode); </code>    */
  public void glFlushPixelDataRangeNV(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFlushRasterSGIX}(void); </code>    */
  public void glFlushRasterSGIX();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFlushRenderAPPLE}(void); </code>    */
  public void glFlushRenderAPPLE();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFlushVertexArrayRangeAPPLE}(GLsizei length, GLvoid *  pointer); </code>    */
  public void glFlushVertexArrayRangeAPPLE(int length, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFlushVertexArrayRangeNV}(void); </code>    */
  public void glFlushVertexArrayRangeNV();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordPointer}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glFogCoordPointer(int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordPointer}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glFogCoordPointer(int type, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordPointerEXT}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glFogCoordPointerEXT(int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordPointerEXT}(GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glFogCoordPointerEXT(int type, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordd}(GLdouble coord); </code>    */
  public void glFogCoordd(double coord);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoorddEXT}(GLdouble coord); </code>    */
  public void glFogCoorddEXT(double coord);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoorddv}(const GLdouble *  m); </code>    */
  public void glFogCoorddv(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoorddv}(const GLdouble *  m); </code>    */
  public void glFogCoorddv(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoorddvEXT}(const GLdouble *  m); </code>    */
  public void glFogCoorddvEXT(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoorddvEXT}(const GLdouble *  m); </code>    */
  public void glFogCoorddvEXT(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordf}(GLfloat coord); </code>    */
  public void glFogCoordf(float coord);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordfEXT}(GLfloat coord); </code>    */
  public void glFogCoordfEXT(float coord);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordfv}(const GLfloat *  m); </code>    */
  public void glFogCoordfv(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordfv}(const GLfloat *  m); </code>    */
  public void glFogCoordfv(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordfvEXT}(const GLfloat *  m); </code>    */
  public void glFogCoordfvEXT(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordfvEXT}(const GLfloat *  m); </code>    */
  public void glFogCoordfvEXT(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordhNV}(GLhalfNV factor); </code>    */
  public void glFogCoordhNV(short factor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordhvNV}(const GLhalfNV *  v); </code>    */
  public void glFogCoordhvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogCoordhvNV}(const GLhalfNV *  v); </code>    */
  public void glFogCoordhvNV(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogFuncSGIS}(GLsizei size, const GLfloat *  weights); </code>    */
  public void glFogFuncSGIS(int size, java.nio.FloatBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFogFuncSGIS}(GLsizei size, const GLfloat *  weights); </code>    */
  public void glFogFuncSGIS(int size, float[] weights, int weights_offset);

  /** Interface to C language function: <br> <code> void {@native glFogf}(GLenum pname, GLfloat param); </code>    */
  public void glFogf(int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glFogfv}(GLenum pname, const GLfloat *  params); </code>    */
  public void glFogfv(int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glFogfv}(GLenum pname, const GLfloat *  params); </code>    */
  public void glFogfv(int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glFogi}(GLenum pname, GLint param); </code>    */
  public void glFogi(int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glFogiv}(GLenum pname, const GLint *  params); </code>    */
  public void glFogiv(int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glFogiv}(GLenum pname, const GLint *  params); </code>    */
  public void glFogiv(int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentColorMaterialSGIX}(GLenum target, GLenum id); </code>    */
  public void glFragmentColorMaterialSGIX(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightModelfSGIX}(GLenum target, GLfloat s); </code>    */
  public void glFragmentLightModelfSGIX(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightModelfvSGIX}(GLenum target, const GLfloat *  v); </code>    */
  public void glFragmentLightModelfvSGIX(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightModelfvSGIX}(GLenum target, const GLfloat *  v); </code>    */
  public void glFragmentLightModelfvSGIX(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightModeliSGIX}(GLenum target, GLint s); </code>    */
  public void glFragmentLightModeliSGIX(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightModelivSGIX}(GLenum target, const GLint *  v); </code>    */
  public void glFragmentLightModelivSGIX(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightModelivSGIX}(GLenum target, const GLint *  v); </code>    */
  public void glFragmentLightModelivSGIX(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightfSGIX}(GLenum target, GLenum pname, GLfloat params); </code>    */
  public void glFragmentLightfSGIX(int target, int pname, float params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightfvSGIX}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glFragmentLightfvSGIX(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightfvSGIX}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glFragmentLightfvSGIX(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightiSGIX}(GLenum target, GLenum pname, GLint params); </code>    */
  public void glFragmentLightiSGIX(int target, int pname, int params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightivSGIX}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glFragmentLightivSGIX(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentLightivSGIX}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glFragmentLightivSGIX(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentMaterialfSGIX}(GLenum target, GLenum pname, GLfloat params); </code>    */
  public void glFragmentMaterialfSGIX(int target, int pname, float params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentMaterialfvSGIX}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glFragmentMaterialfvSGIX(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentMaterialfvSGIX}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glFragmentMaterialfvSGIX(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentMaterialiSGIX}(GLenum target, GLenum pname, GLint params); </code>    */
  public void glFragmentMaterialiSGIX(int target, int pname, int params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentMaterialivSGIX}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glFragmentMaterialivSGIX(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFragmentMaterialivSGIX}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glFragmentMaterialivSGIX(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFrameZoomSGIX}(GLint count); </code>    */
  public void glFrameZoomSGIX(int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFramebufferRenderbufferEXT}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLuint dfactorAlpha); </code>    */
  public void glFramebufferRenderbufferEXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFramebufferTexture1DEXT}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code>    */
  public void glFramebufferTexture1DEXT(int target, int attachment, int textarget, int texture, int level);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFramebufferTexture2DEXT}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level); </code>    */
  public void glFramebufferTexture2DEXT(int target, int attachment, int textarget, int texture, int level);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFramebufferTexture3DEXT}(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset); </code>    */
  public void glFramebufferTexture3DEXT(int target, int attachment, int textarget, int texture, int level, int zoffset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFramebufferTextureEXT}(GLenum target, GLenum attachment, GLuint texture, GLint level); </code>    */
  public void glFramebufferTextureEXT(int target, int attachment, int texture, int level);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFramebufferTextureFaceEXT}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face); </code>    */
  public void glFramebufferTextureFaceEXT(int target, int attachment, int texture, int level, int face);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFramebufferTextureLayerEXT}(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer); </code>    */
  public void glFramebufferTextureLayerEXT(int target, int attachment, int texture, int level, int layer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glFreeObjectBufferATI}(GLuint mode); </code>    */
  public void glFreeObjectBufferATI(int mode);

  /** Interface to C language function: <br> <code> void {@native glFrontFace}(GLenum mode); </code>    */
  public void glFrontFace(int mode);

  /** Interface to C language function: <br> <code> void {@native glFrustum}(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val); </code>    */
  public void glFrustum(double left, double right, double bottom, double top, double near_val, double far_val);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glGenAsyncMarkersSGIX}(GLsizei range); </code>    */
  public int glGenAsyncMarkersSGIX(int range);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenBuffers}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenBuffers(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenBuffers}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenBuffers(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenBuffersARB}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenBuffersARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenBuffersARB}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenBuffersARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenFencesAPPLE}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenFencesAPPLE(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenFencesAPPLE}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenFencesAPPLE(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenFencesNV(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenFencesNV}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenFencesNV(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glGenFragmentShadersATI}(GLuint type); </code>    */
  public int glGenFragmentShadersATI(int type);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenFramebuffersEXT}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenFramebuffersEXT(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenFramebuffersEXT}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenFramebuffersEXT(int n, int[] ids, int ids_offset);

  /** Interface to C language function: <br> <code> GLuint {@native glGenLists}(GLsizei range); </code>    */
  public int glGenLists(int range);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenOcclusionQueriesNV}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenOcclusionQueriesNV(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenOcclusionQueriesNV}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenOcclusionQueriesNV(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenProgramsARB}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenProgramsARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenProgramsARB}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenProgramsARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenProgramsNV}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenProgramsNV(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenProgramsNV}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenProgramsNV(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenQueries}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenQueries(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenQueries}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenQueries(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenQueriesARB}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenQueriesARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenQueriesARB}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenQueriesARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenRenderbuffersEXT}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenRenderbuffersEXT(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenRenderbuffersEXT}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenRenderbuffersEXT(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glGenSymbolsEXT}(GLenum datatype, GLenum storagetype, GLenum range, GLuint components); </code>    */
  public int glGenSymbolsEXT(int datatype, int storagetype, int range, int components);

  /** Interface to C language function: <br> <code> void {@native glGenTextures}(GLsizei n, GLuint *  textures); </code>    */
  public void glGenTextures(int n, java.nio.IntBuffer textures);

  /** Interface to C language function: <br> <code> void {@native glGenTextures}(GLsizei n, GLuint *  textures); </code>    */
  public void glGenTextures(int n, int[] textures, int textures_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenVertexArraysAPPLE}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenVertexArraysAPPLE(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenVertexArraysAPPLE}(GLsizei n, GLuint *  ids); </code>    */
  public void glGenVertexArraysAPPLE(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glGenVertexShadersEXT}(GLuint type); </code>    */
  public int glGenVertexShadersEXT(int type);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGenerateMipmapEXT}(GLenum mode); </code>    */
  public void glGenerateMipmapEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveAttrib}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name); </code>    */
  public void glGetActiveAttrib(int program, int index, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveAttrib}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name); </code>    */
  public void glGetActiveAttrib(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveAttribARB}(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code>    */
  public void glGetActiveAttribARB(int program, int index, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveAttribARB}(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code>    */
  public void glGetActiveAttribARB(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveUniform}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name); </code>    */
  public void glGetActiveUniform(int program, int index, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveUniform}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLchar *  name); </code>    */
  public void glGetActiveUniform(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveUniformARB}(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code>    */
  public void glGetActiveUniformARB(int program, int index, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveUniformARB}(GLhandleARB program, GLuint index, GLsizei bufSize, GLsizei *  length, GLint *  size, GLenum *  type, GLcharARB *  name); </code>    */
  public void glGetActiveUniformARB(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveVaryingNV}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLsizei *  size, GLenum *  type, GLchar *  name); </code>    */
  public void glGetActiveVaryingNV(int program, int index, int bufSize, java.nio.IntBuffer length, java.nio.IntBuffer size, java.nio.IntBuffer type, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetActiveVaryingNV}(GLuint program, GLuint index, GLsizei bufSize, GLsizei *  length, GLsizei *  size, GLenum *  type, GLchar *  name); </code>    */
  public void glGetActiveVaryingNV(int program, int index, int bufSize, int[] length, int length_offset, int[] size, int size_offset, int[] type, int type_offset, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetArrayObjectfvATI}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetArrayObjectfvATI(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetArrayObjectfvATI}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetArrayObjectfvATI(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetArrayObjectivATI}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetArrayObjectivATI(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetArrayObjectivATI}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetArrayObjectivATI(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetAttachedObjectsARB}(GLhandleARB program, GLsizei maxCount, GLsizei *  count, GLhandleARB *  obj); </code>    */
  public void glGetAttachedObjectsARB(int program, int maxCount, java.nio.IntBuffer count, java.nio.IntBuffer obj);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetAttachedObjectsARB}(GLhandleARB program, GLsizei maxCount, GLsizei *  count, GLhandleARB *  obj); </code>    */
  public void glGetAttachedObjectsARB(int program, int maxCount, int[] count, int count_offset, int[] obj, int obj_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetAttachedShaders}(GLuint program, GLsizei maxCount, GLsizei *  count, GLuint *  obj); </code>    */
  public void glGetAttachedShaders(int program, int maxCount, java.nio.IntBuffer count, java.nio.IntBuffer obj);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetAttachedShaders}(GLuint program, GLsizei maxCount, GLsizei *  count, GLuint *  obj); </code>    */
  public void glGetAttachedShaders(int program, int maxCount, int[] count, int count_offset, int[] obj, int obj_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetAttribLocation}(GLuint program, const GLchar *  name); </code>    */
  public int glGetAttribLocation(int program, java.lang.String name);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetAttribLocationARB}(GLhandleARB program, const GLcharARB *  name); </code>    */
  public int glGetAttribLocationARB(int program, java.lang.String name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBooleanIndexedvEXT}(GLenum target, GLuint index, GLboolean *  data); </code>    */
  public void glGetBooleanIndexedvEXT(int target, int index, java.nio.ByteBuffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBooleanIndexedvEXT}(GLenum target, GLuint index, GLboolean *  data); </code>    */
  public void glGetBooleanIndexedvEXT(int target, int index, byte[] data, int data_offset);

  /** Interface to C language function: <br> <code> void {@native glGetBooleanv}(GLenum pname, GLboolean *  params); </code>    */
  public void glGetBooleanv(int pname, java.nio.ByteBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetBooleanv}(GLenum pname, GLboolean *  params); </code>    */
  public void glGetBooleanv(int pname, byte[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetBufferParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBufferParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetBufferParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBufferParameterivARB}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetBufferParameterivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBufferParameterivARB}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetBufferParameterivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBufferSubData}(GLenum target, ptrdiff_t offset, ptrdiff_t size, GLvoid *  data); </code>    */
  public void glGetBufferSubData(int target, int offset, int size, java.nio.Buffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetBufferSubDataARB}(GLenum target, ptrdiff_t offset, ptrdiff_t size, GLvoid *  data); </code> 
      @param data a direct {@link java.nio.Buffer}   */
  public void glGetBufferSubDataARB(int target, int offset, int size, java.nio.Buffer data);

  /** Interface to C language function: <br> <code> void {@native glGetClipPlane}(GLenum plane, GLdouble *  equation); </code>    */
  public void glGetClipPlane(int plane, java.nio.DoubleBuffer equation);

  /** Interface to C language function: <br> <code> void {@native glGetClipPlane}(GLenum plane, GLdouble *  equation); </code>    */
  public void glGetClipPlane(int plane, double[] equation, int equation_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTable}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code>    */
  public void glGetColorTable(int target, int format, int type, java.nio.Buffer table);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTable}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code>    */
  public void glGetColorTable(int target, int format, int type, long table_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableEXT}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code>    */
  public void glGetColorTableEXT(int target, int format, int type, java.nio.Buffer table);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetColorTableParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetColorTableParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameterfvEXT}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetColorTableParameterfvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameterfvEXT}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetColorTableParameterfvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetColorTableParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetColorTableParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameterivEXT}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetColorTableParameterivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetColorTableParameterivEXT}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetColorTableParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerInputParameterfvNV}(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *  params); </code>    */
  public void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerInputParameterfvNV}(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *  params); </code>    */
  public void glGetCombinerInputParameterfvNV(int stage, int portion, int variable, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerInputParameterivNV}(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *  params); </code>    */
  public void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerInputParameterivNV}(GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *  params); </code>    */
  public void glGetCombinerInputParameterivNV(int stage, int portion, int variable, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerOutputParameterfvNV}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code>    */
  public void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerOutputParameterfvNV}(GLenum stage, GLenum portion, GLenum pname, GLfloat *  params); </code>    */
  public void glGetCombinerOutputParameterfvNV(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerOutputParameterivNV}(GLenum stage, GLenum portion, GLenum pname, GLint *  params); </code>    */
  public void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerOutputParameterivNV}(GLenum stage, GLenum portion, GLenum pname, GLint *  params); </code>    */
  public void glGetCombinerOutputParameterivNV(int stage, int portion, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerStageParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetCombinerStageParameterfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCombinerStageParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetCombinerStageParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code>    */
  public void glGetCompressedTexImage(int target, int level, java.nio.Buffer img);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetCompressedTexImage}(GLenum target, GLint level, GLvoid *  img); </code>    */
  public void glGetCompressedTexImage(int target, int level, long img_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetConvolutionFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code>    */
  public void glGetConvolutionFilter(int target, int format, int type, java.nio.Buffer table);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetConvolutionFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  table); </code>    */
  public void glGetConvolutionFilter(int target, int format, int type, long table_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetConvolutionParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetConvolutionParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetConvolutionParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetConvolutionParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetConvolutionParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetConvolutionParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetConvolutionParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetConvolutionParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetDetailTexFuncSGIS}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetDetailTexFuncSGIS(int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetDetailTexFuncSGIS}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetDetailTexFuncSGIS(int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code>    */
  public void glGetDoublev(int pname, java.nio.DoubleBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetDoublev}(GLenum pname, GLdouble *  params); </code>    */
  public void glGetDoublev(int pname, double[] params, int params_offset);

  /** Interface to C language function: <br> <code> GLenum {@native glGetError}(void); </code>    */
  public int glGetError();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetFenceivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFenceivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetFenceivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFinalCombinerInputParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetFinalCombinerInputParameterfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFinalCombinerInputParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetFinalCombinerInputParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFinalCombinerInputParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetFinalCombinerInputParameterivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFinalCombinerInputParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetFinalCombinerInputParameterivNV(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetFloatv}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetFloatv(int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetFloatv}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetFloatv(int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFogFuncSGIS}(GLfloat *  points); </code>    */
  public void glGetFogFuncSGIS(java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFogFuncSGIS}(GLfloat *  points); </code>    */
  public void glGetFogFuncSGIS(float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetFragDataLocationEXT}(GLuint program, const GLchar *  name); </code>    */
  public int glGetFragDataLocationEXT(int program, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetFragDataLocationEXT}(GLuint program, const GLchar *  name); </code>    */
  public int glGetFragDataLocationEXT(int program, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentLightfvSGIX}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetFragmentLightfvSGIX(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentLightfvSGIX}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetFragmentLightfvSGIX(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentLightivSGIX}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetFragmentLightivSGIX(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentLightivSGIX}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetFragmentLightivSGIX(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentMaterialfvSGIX}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetFragmentMaterialfvSGIX(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentMaterialfvSGIX}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetFragmentMaterialfvSGIX(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentMaterialivSGIX}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetFragmentMaterialivSGIX(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFragmentMaterialivSGIX}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetFragmentMaterialivSGIX(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFramebufferAttachmentParameterivEXT}(GLenum stage, GLenum portion, GLenum pname, GLint *  params); </code>    */
  public void glGetFramebufferAttachmentParameterivEXT(int stage, int portion, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetFramebufferAttachmentParameterivEXT}(GLenum stage, GLenum portion, GLenum pname, GLint *  params); </code>    */
  public void glGetFramebufferAttachmentParameterivEXT(int stage, int portion, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLhandleARB {@native glGetHandleARB}(GLenum type); </code>    */
  public int glGetHandleARB(int type);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetHistogram}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code>    */
  public void glGetHistogram(int target, boolean reset, int format, int type, java.nio.Buffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetHistogram}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code>    */
  public void glGetHistogram(int target, boolean reset, int format, int type, long values_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetHistogramParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetHistogramParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetHistogramParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetHistogramParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetHistogramParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetHistogramParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetHistogramParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetHistogramParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetImageTransformParameterfvHP}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetImageTransformParameterfvHP(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetImageTransformParameterfvHP}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetImageTransformParameterfvHP(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetImageTransformParameterivHP}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetImageTransformParameterivHP(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetImageTransformParameterivHP}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetImageTransformParameterivHP(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInfoLogARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code>    */
  public void glGetInfoLogARB(int program, int bufSize, java.nio.IntBuffer length, java.nio.ByteBuffer infoLog);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInfoLogARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code>    */
  public void glGetInfoLogARB(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetInstrumentsSGIX}(void); </code>    */
  public int glGetInstrumentsSGIX();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetIntegerIndexedvEXT}(GLenum target, GLuint index, GLint *  data); </code>    */
  public void glGetIntegerIndexedvEXT(int target, int index, java.nio.IntBuffer data);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetIntegerIndexedvEXT}(GLenum target, GLuint index, GLint *  data); </code>    */
  public void glGetIntegerIndexedvEXT(int target, int index, int[] data, int data_offset);

  /** Interface to C language function: <br> <code> void {@native glGetIntegerv}(GLenum pname, GLint *  params); </code>    */
  public void glGetIntegerv(int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetIntegerv}(GLenum pname, GLint *  params); </code>    */
  public void glGetIntegerv(int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInvariantBooleanvEXT}(GLuint id, GLenum pname, GLboolean *  program); </code>    */
  public void glGetInvariantBooleanvEXT(int id, int pname, java.nio.ByteBuffer program);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInvariantBooleanvEXT}(GLuint id, GLenum pname, GLboolean *  program); </code>    */
  public void glGetInvariantBooleanvEXT(int id, int pname, byte[] program, int program_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInvariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetInvariantFloatvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInvariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetInvariantFloatvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInvariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetInvariantIntegervEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetInvariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetInvariantIntegervEXT(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetLightfv}(GLenum light, GLenum pname, GLfloat *  params); </code>    */
  public void glGetLightfv(int light, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetLightfv}(GLenum light, GLenum pname, GLfloat *  params); </code>    */
  public void glGetLightfv(int light, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetLightiv}(GLenum light, GLenum pname, GLint *  params); </code>    */
  public void glGetLightiv(int light, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetLightiv}(GLenum light, GLenum pname, GLint *  params); </code>    */
  public void glGetLightiv(int light, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetListParameterfvSGIX}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetListParameterfvSGIX(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetListParameterfvSGIX}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetListParameterfvSGIX(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetListParameterivSGIX}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetListParameterivSGIX(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetListParameterivSGIX}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetListParameterivSGIX(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetLocalConstantBooleanvEXT}(GLuint id, GLenum pname, GLboolean *  program); </code>    */
  public void glGetLocalConstantBooleanvEXT(int id, int pname, java.nio.ByteBuffer program);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetLocalConstantBooleanvEXT}(GLuint id, GLenum pname, GLboolean *  program); </code>    */
  public void glGetLocalConstantBooleanvEXT(int id, int pname, byte[] program, int program_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetLocalConstantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetLocalConstantFloatvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetLocalConstantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetLocalConstantFloatvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetLocalConstantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetLocalConstantIntegervEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetLocalConstantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetLocalConstantIntegervEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapAttribParameterfvNV}(GLenum stage, GLuint portion, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMapAttribParameterfvNV(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapAttribParameterfvNV}(GLenum stage, GLuint portion, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMapAttribParameterfvNV(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapAttribParameterivNV}(GLenum stage, GLuint portion, GLenum pname, GLint *  params); </code>    */
  public void glGetMapAttribParameterivNV(int stage, int portion, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapAttribParameterivNV}(GLenum stage, GLuint portion, GLenum pname, GLint *  params); </code>    */
  public void glGetMapAttribParameterivNV(int stage, int portion, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapControlPointsNV}(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, GLvoid *  points); </code>    */
  public void glGetMapControlPointsNV(int target, int index, int type, int ustride, int vstride, boolean packed, java.nio.Buffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMapParameterfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapParameterfvNV}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMapParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetMapParameterivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMapParameterivNV}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetMapParameterivNV(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMapdv}(GLenum target, GLenum query, GLdouble *  v); </code>    */
  public void glGetMapdv(int target, int query, java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glGetMapdv}(GLenum target, GLenum query, GLdouble *  v); </code>    */
  public void glGetMapdv(int target, int query, double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMapfv}(GLenum target, GLenum query, GLfloat *  v); </code>    */
  public void glGetMapfv(int target, int query, java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glGetMapfv}(GLenum target, GLenum query, GLfloat *  v); </code>    */
  public void glGetMapfv(int target, int query, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMapiv}(GLenum target, GLenum query, GLint *  v); </code>    */
  public void glGetMapiv(int target, int query, java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glGetMapiv}(GLenum target, GLenum query, GLint *  v); </code>    */
  public void glGetMapiv(int target, int query, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMaterialfv}(GLenum face, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMaterialfv(int face, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetMaterialfv}(GLenum face, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMaterialfv(int face, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetMaterialiv}(GLenum face, GLenum pname, GLint *  params); </code>    */
  public void glGetMaterialiv(int face, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetMaterialiv}(GLenum face, GLenum pname, GLint *  params); </code>    */
  public void glGetMaterialiv(int face, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMinmax}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code>    */
  public void glGetMinmax(int target, boolean reset, int format, int type, java.nio.Buffer values);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMinmax}(GLenum target, GLboolean reset, GLenum format, GLenum type, GLvoid *  values); </code>    */
  public void glGetMinmax(int target, boolean reset, int format, int type, long values_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMinmaxParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMinmaxParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMinmaxParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetMinmaxParameterfv(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMinmaxParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetMinmaxParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetMinmaxParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetMinmaxParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectBufferfvATI}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetObjectBufferfvATI(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectBufferfvATI}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetObjectBufferfvATI(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectBufferivATI}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetObjectBufferivATI(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectBufferivATI}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetObjectBufferivATI(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectParameterfvARB}(GLhandleARB target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetObjectParameterfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectParameterfvARB}(GLhandleARB target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetObjectParameterfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectParameterivARB}(GLhandleARB target, GLenum pname, GLint *  params); </code>    */
  public void glGetObjectParameterivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetObjectParameterivARB}(GLhandleARB target, GLenum pname, GLint *  params); </code>    */
  public void glGetObjectParameterivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetOcclusionQueryivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetOcclusionQueryivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetOcclusionQueryivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetOcclusionQueryivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetOcclusionQueryuivNV}(GLuint id, GLenum pname, GLuint *  params); </code>    */
  public void glGetOcclusionQueryuivNV(int id, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetOcclusionQueryuivNV}(GLuint id, GLenum pname, GLuint *  params); </code>    */
  public void glGetOcclusionQueryuivNV(int id, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code>    */
  public void glGetPixelMapfv(int map, java.nio.FloatBuffer values);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code>    */
  public void glGetPixelMapfv(int map, float[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapfv}(GLenum map, GLfloat *  values); </code>    */
  public void glGetPixelMapfv(int map, long values_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code>    */
  public void glGetPixelMapuiv(int map, java.nio.IntBuffer values);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code>    */
  public void glGetPixelMapuiv(int map, int[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapuiv}(GLenum map, GLuint *  values); </code>    */
  public void glGetPixelMapuiv(int map, long values_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code>    */
  public void glGetPixelMapusv(int map, java.nio.ShortBuffer values);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code>    */
  public void glGetPixelMapusv(int map, short[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPixelMapusv}(GLenum map, GLushort *  values); </code>    */
  public void glGetPixelMapusv(int map, long values_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetPixelTexGenParameterfvSGIS}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetPixelTexGenParameterfvSGIS(int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetPixelTexGenParameterfvSGIS}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetPixelTexGenParameterfvSGIS(int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetPixelTexGenParameterivSGIS}(GLenum pname, GLint *  params); </code>    */
  public void glGetPixelTexGenParameterivSGIS(int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetPixelTexGenParameterivSGIS}(GLenum pname, GLint *  params); </code>    */
  public void glGetPixelTexGenParameterivSGIS(int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code>    */
  public void glGetPolygonStipple(java.nio.ByteBuffer mask);

  /** Interface to C language function: <br> <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code>    */
  public void glGetPolygonStipple(byte[] mask, int mask_offset);

  /** Interface to C language function: <br> <code> void {@native glGetPolygonStipple}(GLubyte *  mask); </code>    */
  public void glGetPolygonStipple(long mask_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code>    */
  public void glGetProgramEnvParameterIivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code>    */
  public void glGetProgramEnvParameterIivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code>    */
  public void glGetProgramEnvParameterIuivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code>    */
  public void glGetProgramEnvParameterIuivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code>    */
  public void glGetProgramEnvParameterdvARB(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code>    */
  public void glGetProgramEnvParameterdvARB(int index, int pname, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code>    */
  public void glGetProgramEnvParameterfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramEnvParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code>    */
  public void glGetProgramEnvParameterfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramInfoLog}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code>    */
  public void glGetProgramInfoLog(int program, int bufSize, java.nio.IntBuffer length, java.nio.ByteBuffer infoLog);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramInfoLog}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code>    */
  public void glGetProgramInfoLog(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code>    */
  public void glGetProgramLocalParameterIivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterIivNV}(GLenum target, GLuint index, GLint *  params); </code>    */
  public void glGetProgramLocalParameterIivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code>    */
  public void glGetProgramLocalParameterIuivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterIuivNV}(GLenum target, GLuint index, GLuint *  params); </code>    */
  public void glGetProgramLocalParameterIuivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code>    */
  public void glGetProgramLocalParameterdvARB(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterdvARB}(GLenum index, GLuint pname, GLdouble *  params); </code>    */
  public void glGetProgramLocalParameterdvARB(int index, int pname, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code>    */
  public void glGetProgramLocalParameterfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramLocalParameterfvARB}(GLenum target, GLuint pname, GLfloat *  params); </code>    */
  public void glGetProgramLocalParameterfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramNamedParameterdvNV}(GLuint id, GLsizei len, const GLubyte *  name, GLdouble *  params); </code>    */
  public void glGetProgramNamedParameterdvNV(int id, int len, java.lang.String name, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramNamedParameterdvNV}(GLuint id, GLsizei len, const GLubyte *  name, GLdouble *  params); </code>    */
  public void glGetProgramNamedParameterdvNV(int id, int len, java.lang.String name, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramNamedParameterfvNV}(GLuint id, GLsizei len, const GLubyte *  name, GLfloat *  params); </code>    */
  public void glGetProgramNamedParameterfvNV(int id, int len, java.lang.String name, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramNamedParameterfvNV}(GLuint id, GLsizei len, const GLubyte *  name, GLfloat *  params); </code>    */
  public void glGetProgramNamedParameterfvNV(int id, int len, java.lang.String name, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramParameterdvNV}(GLenum target, GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetProgramParameterdvNV(int target, int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramParameterdvNV}(GLenum target, GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetProgramParameterdvNV(int target, int index, int pname, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramParameterfvNV}(GLenum stage, GLuint portion, GLenum pname, GLfloat *  params); </code>    */
  public void glGetProgramParameterfvNV(int stage, int portion, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramParameterfvNV}(GLenum stage, GLuint portion, GLenum pname, GLfloat *  params); </code>    */
  public void glGetProgramParameterfvNV(int stage, int portion, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramStringARB}(GLenum target, GLenum pname, GLvoid *  string); </code> 
      @param string a direct {@link java.nio.Buffer}   */
  public void glGetProgramStringARB(int target, int pname, java.nio.Buffer string);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramStringNV}(GLuint id, GLenum pname, GLubyte *  program); </code>    */
  public void glGetProgramStringNV(int id, int pname, java.nio.ByteBuffer program);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramStringNV}(GLuint id, GLenum pname, GLubyte *  program); </code>    */
  public void glGetProgramStringNV(int id, int pname, byte[] program, int program_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramiv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramivARB}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramivARB}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetProgramivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetProgramivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjecti64vEXT}(GLuint id, GLenum pname, int64_t *  params); </code>    */
  public void glGetQueryObjecti64vEXT(int id, int pname, java.nio.LongBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjecti64vEXT}(GLuint id, GLenum pname, int64_t *  params); </code>    */
  public void glGetQueryObjecti64vEXT(int id, int pname, long[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryObjectiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryObjectiv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectivARB}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryObjectivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectivARB}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryObjectivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectui64vEXT}(GLuint id, GLenum pname, uint64_t *  params); </code>    */
  public void glGetQueryObjectui64vEXT(int id, int pname, java.nio.LongBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectui64vEXT}(GLuint id, GLenum pname, uint64_t *  params); </code>    */
  public void glGetQueryObjectui64vEXT(int id, int pname, long[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectuiv}(GLuint id, GLenum pname, GLuint *  params); </code>    */
  public void glGetQueryObjectuiv(int id, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectuiv}(GLuint id, GLenum pname, GLuint *  params); </code>    */
  public void glGetQueryObjectuiv(int id, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectuivARB}(GLuint id, GLenum pname, GLuint *  params); </code>    */
  public void glGetQueryObjectuivARB(int id, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryObjectuivARB}(GLuint id, GLenum pname, GLuint *  params); </code>    */
  public void glGetQueryObjectuivARB(int id, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryiv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryiv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryiv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryivARB}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetQueryivARB}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetQueryivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetRenderbufferParameterivEXT}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetRenderbufferParameterivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetRenderbufferParameterivEXT}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetRenderbufferParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetSeparableFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  row, GLvoid *  column, GLvoid *  span); </code>    */
  public void glGetSeparableFilter(int target, int format, int type, java.nio.Buffer row, java.nio.Buffer column, java.nio.Buffer span);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetSeparableFilter}(GLenum target, GLenum format, GLenum type, GLvoid *  row, GLvoid *  column, GLvoid *  span); </code>    */
  public void glGetSeparableFilter(int target, int format, int type, long row_buffer_offset, long column_buffer_offset, long span_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderInfoLog}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code>    */
  public void glGetShaderInfoLog(int program, int bufSize, java.nio.IntBuffer length, java.nio.ByteBuffer infoLog);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderInfoLog}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code>    */
  public void glGetShaderInfoLog(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderSource}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code>    */
  public void glGetShaderSource(int program, int bufSize, java.nio.IntBuffer length, java.nio.ByteBuffer infoLog);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderSource}(GLuint program, GLsizei bufSize, GLsizei *  length, GLchar *  infoLog); </code>    */
  public void glGetShaderSource(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderSourceARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code>    */
  public void glGetShaderSourceARB(int program, int bufSize, java.nio.IntBuffer length, java.nio.ByteBuffer infoLog);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderSourceARB}(GLhandleARB program, GLsizei bufSize, GLsizei *  length, GLcharARB *  infoLog); </code>    */
  public void glGetShaderSourceARB(int program, int bufSize, int[] length, int length_offset, byte[] infoLog, int infoLog_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetShaderiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetShaderiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetShaderiv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetSharpenTexFuncSGIS}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetSharpenTexFuncSGIS(int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetSharpenTexFuncSGIS}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetSharpenTexFuncSGIS(int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> const GLubyte *  {@native glGetString}(GLenum name); </code>    */
  public java.lang.String glGetString(int name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexBumpParameterfvATI}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexBumpParameterfvATI(int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexBumpParameterfvATI}(GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexBumpParameterfvATI(int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexBumpParameterivATI}(GLenum pname, GLint *  params); </code>    */
  public void glGetTexBumpParameterivATI(int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexBumpParameterivATI}(GLenum pname, GLint *  params); </code>    */
  public void glGetTexBumpParameterivATI(int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexEnvfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexEnvfv(int target, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexEnvfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexEnvfv(int target, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexEnviv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexEnviv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexEnviv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexEnviv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexFilterFuncSGIS}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexFilterFuncSGIS(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexFilterFuncSGIS}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexFilterFuncSGIS(int target, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexGendv}(GLenum coord, GLenum pname, GLdouble *  params); </code>    */
  public void glGetTexGendv(int coord, int pname, java.nio.DoubleBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexGendv}(GLenum coord, GLenum pname, GLdouble *  params); </code>    */
  public void glGetTexGendv(int coord, int pname, double[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexGenfv}(GLenum coord, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexGenfv(int coord, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexGenfv}(GLenum coord, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexGenfv(int coord, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexGeniv}(GLenum coord, GLenum pname, GLint *  params); </code>    */
  public void glGetTexGeniv(int coord, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexGeniv}(GLenum coord, GLenum pname, GLint *  params); </code>    */
  public void glGetTexGeniv(int coord, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code>    */
  public void glGetTexImage(int target, int level, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glGetTexImage}(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *  pixels); </code>    */
  public void glGetTexImage(int target, int level, int format, int type, long pixels_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexLevelParameterfv(int target, int level, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexLevelParameterfv}(GLenum target, GLint level, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexLevelParameterfv(int target, int level, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code>    */
  public void glGetTexLevelParameteriv(int target, int level, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexLevelParameteriv}(GLenum target, GLint level, GLenum pname, GLint *  params); </code>    */
  public void glGetTexLevelParameteriv(int target, int level, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexParameterIivEXT}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexParameterIivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexParameterIivEXT}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexParameterIivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexParameterIuivEXT}(GLenum target, GLenum pname, GLuint *  params); </code>    */
  public void glGetTexParameterIuivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTexParameterIuivEXT}(GLenum target, GLenum pname, GLuint *  params); </code>    */
  public void glGetTexParameterIuivEXT(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameterfv}(GLenum target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetTexParameterfv(int target, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glGetTexParameteriv}(GLenum target, GLenum pname, GLint *  params); </code>    */
  public void glGetTexParameteriv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTrackMatrixivNV}(GLenum stage, GLuint portion, GLenum pname, GLint *  params); </code>    */
  public void glGetTrackMatrixivNV(int stage, int portion, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTrackMatrixivNV}(GLenum stage, GLuint portion, GLenum pname, GLint *  params); </code>    */
  public void glGetTrackMatrixivNV(int stage, int portion, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTransformFeedbackVaryingNV}(GLuint program, GLuint index, GLint *  location); </code>    */
  public void glGetTransformFeedbackVaryingNV(int program, int index, java.nio.IntBuffer location);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetTransformFeedbackVaryingNV}(GLuint program, GLuint index, GLint *  location); </code>    */
  public void glGetTransformFeedbackVaryingNV(int program, int index, int[] location, int location_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetUniformBufferSizeEXT}(GLuint program, GLint location); </code>    */
  public int glGetUniformBufferSizeEXT(int program, int location);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetUniformLocation}(GLuint program, const GLchar *  name); </code>    */
  public int glGetUniformLocation(int program, java.lang.String name);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetUniformLocationARB}(GLhandleARB program, const GLcharARB *  name); </code>    */
  public int glGetUniformLocationARB(int program, java.lang.String name);

  /** Entry point (through function pointer) to C language function: <br> <code> ptrdiff_t {@native glGetUniformOffsetEXT}(GLuint program, GLint location); </code>    */
  public int glGetUniformOffsetEXT(int program, int location);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformfv}(GLuint program, GLint location, GLfloat *  params); </code>    */
  public void glGetUniformfv(int program, int location, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformfv}(GLuint program, GLint location, GLfloat *  params); </code>    */
  public void glGetUniformfv(int program, int location, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformfvARB}(GLhandleARB program, GLint location, GLfloat *  params); </code>    */
  public void glGetUniformfvARB(int program, int location, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformfvARB}(GLhandleARB program, GLint location, GLfloat *  params); </code>    */
  public void glGetUniformfvARB(int program, int location, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformiv}(GLuint program, GLint location, GLint *  params); </code>    */
  public void glGetUniformiv(int program, int location, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformiv}(GLuint program, GLint location, GLint *  params); </code>    */
  public void glGetUniformiv(int program, int location, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformivARB}(GLhandleARB program, GLint location, GLint *  params); </code>    */
  public void glGetUniformivARB(int program, int location, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformivARB}(GLhandleARB program, GLint location, GLint *  params); </code>    */
  public void glGetUniformivARB(int program, int location, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformuivEXT}(GLuint program, GLint location, GLuint *  params); </code>    */
  public void glGetUniformuivEXT(int program, int location, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetUniformuivEXT}(GLuint program, GLint location, GLuint *  params); </code>    */
  public void glGetUniformuivEXT(int program, int location, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantArrayObjectfvATI}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVariantArrayObjectfvATI(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantArrayObjectfvATI}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVariantArrayObjectfvATI(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantArrayObjectivATI}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVariantArrayObjectivATI(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantArrayObjectivATI}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVariantArrayObjectivATI(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantBooleanvEXT}(GLuint id, GLenum pname, GLboolean *  program); </code>    */
  public void glGetVariantBooleanvEXT(int id, int pname, java.nio.ByteBuffer program);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantBooleanvEXT}(GLuint id, GLenum pname, GLboolean *  program); </code>    */
  public void glGetVariantBooleanvEXT(int id, int pname, byte[] program, int program_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVariantFloatvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantFloatvEXT}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVariantFloatvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVariantIntegervEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVariantIntegervEXT}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVariantIntegervEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetVaryingLocationNV}(GLuint program, const GLchar *  name); </code>    */
  public int glGetVaryingLocationNV(int program, java.nio.ByteBuffer name);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glGetVaryingLocationNV}(GLuint program, const GLchar *  name); </code>    */
  public int glGetVaryingLocationNV(int program, byte[] name, int name_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribArrayObjectfvATI}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribArrayObjectfvATI(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribArrayObjectfvATI}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribArrayObjectfvATI(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribArrayObjectivATI}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribArrayObjectivATI(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribArrayObjectivATI}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribArrayObjectivATI(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribIivEXT}(GLuint index, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribIivEXT(int index, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribIivEXT}(GLuint index, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribIivEXT(int index, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribIuivEXT}(GLuint index, GLenum pname, GLuint *  params); </code>    */
  public void glGetVertexAttribIuivEXT(int index, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribIuivEXT}(GLuint index, GLenum pname, GLuint *  params); </code>    */
  public void glGetVertexAttribIuivEXT(int index, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetVertexAttribdv(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribdv}(GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetVertexAttribdv(int index, int pname, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribdvARB}(GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetVertexAttribdvARB(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribdvARB}(GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetVertexAttribdvARB(int index, int pname, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribdvNV}(GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetVertexAttribdvNV(int index, int pname, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribdvNV}(GLuint index, GLenum pname, GLdouble *  params); </code>    */
  public void glGetVertexAttribdvNV(int index, int pname, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribfv}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfv(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribfv}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfv(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribfvARB}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribfvARB}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribfvNV}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribfvNV}(GLuint target, GLenum pname, GLfloat *  params); </code>    */
  public void glGetVertexAttribfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribiv(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribiv}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribiv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribivARB}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribivARB(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribivARB}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribivARB(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGetVertexAttribivNV}(GLuint target, GLenum pname, GLint *  params); </code>    */
  public void glGetVertexAttribivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactorbSUN}(GLbyte factor); </code>    */
  public void glGlobalAlphaFactorbSUN(byte factor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactordSUN}(GLdouble coord); </code>    */
  public void glGlobalAlphaFactordSUN(double coord);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactorfSUN}(GLfloat coord); </code>    */
  public void glGlobalAlphaFactorfSUN(float coord);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactoriSUN}(GLint count); </code>    */
  public void glGlobalAlphaFactoriSUN(int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactorsSUN}(GLshort factor); </code>    */
  public void glGlobalAlphaFactorsSUN(short factor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactorubSUN}(GLubyte factor); </code>    */
  public void glGlobalAlphaFactorubSUN(byte factor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactoruiSUN}(GLuint mode); </code>    */
  public void glGlobalAlphaFactoruiSUN(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glGlobalAlphaFactorusSUN}(GLushort factor); </code>    */
  public void glGlobalAlphaFactorusSUN(short factor);

  /** Interface to C language function: <br> <code> void {@native glHint}(GLenum target, GLenum mode); </code>    */
  public void glHint(int target, int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glHintPGI}(GLenum target, GLint s); </code>    */
  public void glHintPGI(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glHistogram}(GLenum target, GLsizei width, GLenum internalformat, GLboolean sink); </code>    */
  public void glHistogram(int target, int width, int internalformat, boolean sink);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glIglooInterfaceSGIX}(GLenum pname, const GLvoid *  params); </code>    */
  public void glIglooInterfaceSGIX(int pname, java.nio.Buffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glImageTransformParameterfHP}(GLenum target, GLenum pname, GLfloat params); </code>    */
  public void glImageTransformParameterfHP(int target, int pname, float params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glImageTransformParameterfvHP}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glImageTransformParameterfvHP(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glImageTransformParameterfvHP}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glImageTransformParameterfvHP(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glImageTransformParameteriHP}(GLenum target, GLenum pname, GLint params); </code>    */
  public void glImageTransformParameteriHP(int target, int pname, int params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glImageTransformParameterivHP}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glImageTransformParameterivHP(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glImageTransformParameterivHP}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glImageTransformParameterivHP(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glIndexFuncEXT}(GLenum target, GLclampf s); </code>    */
  public void glIndexFuncEXT(int target, float s);

  /** Interface to C language function: <br> <code> void {@native glIndexMask}(GLuint mask); </code>    */
  public void glIndexMask(int mask);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glIndexMaterialEXT}(GLenum target, GLenum id); </code>    */
  public void glIndexMaterialEXT(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glIndexPointer}(GLenum type, GLsizei stride, const GLvoid *  ptr); </code> 
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glIndexPointer(int type, int stride, java.nio.Buffer ptr);

  /** Interface to C language function: <br> <code> void {@native glIndexd}(GLdouble c); </code>    */
  public void glIndexd(double c);

  /** Interface to C language function: <br> <code> void {@native glIndexdv}(const GLdouble *  c); </code>    */
  public void glIndexdv(java.nio.DoubleBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexdv}(const GLdouble *  c); </code>    */
  public void glIndexdv(double[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexf}(GLfloat c); </code>    */
  public void glIndexf(float c);

  /** Interface to C language function: <br> <code> void {@native glIndexfv}(const GLfloat *  c); </code>    */
  public void glIndexfv(java.nio.FloatBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexfv}(const GLfloat *  c); </code>    */
  public void glIndexfv(float[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexi}(GLint c); </code>    */
  public void glIndexi(int c);

  /** Interface to C language function: <br> <code> void {@native glIndexiv}(const GLint *  c); </code>    */
  public void glIndexiv(java.nio.IntBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexiv}(const GLint *  c); </code>    */
  public void glIndexiv(int[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexs}(GLshort c); </code>    */
  public void glIndexs(short c);

  /** Interface to C language function: <br> <code> void {@native glIndexsv}(const GLshort *  c); </code>    */
  public void glIndexsv(java.nio.ShortBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexsv}(const GLshort *  c); </code>    */
  public void glIndexsv(short[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glIndexub}(GLubyte c); </code>    */
  public void glIndexub(byte c);

  /** Interface to C language function: <br> <code> void {@native glIndexubv}(const GLubyte *  c); </code>    */
  public void glIndexubv(java.nio.ByteBuffer c);

  /** Interface to C language function: <br> <code> void {@native glIndexubv}(const GLubyte *  c); </code>    */
  public void glIndexubv(byte[] c, int c_offset);

  /** Interface to C language function: <br> <code> void {@native glInitNames}(void); </code>    */
  public void glInitNames();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glInsertComponentEXT}(GLuint red, GLuint green, GLuint blue); </code>    */
  public void glInsertComponentEXT(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glInstrumentsBufferSGIX}(GLsizei size, GLint *  buffer); </code>    */
  public void glInstrumentsBufferSGIX(int size, java.nio.IntBuffer buffer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glInstrumentsBufferSGIX}(GLsizei size, GLint *  buffer); </code>    */
  public void glInstrumentsBufferSGIX(int size, int[] buffer, int buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glInterleavedArrays}(GLenum format, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glInterleavedArrays(int format, int stride, java.nio.Buffer pointer);

  /** Interface to C language function: <br> <code> void {@native glInterleavedArrays}(GLenum format, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glInterleavedArrays(int format, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsAsyncMarkerSGIX}(GLuint id); </code>    */
  public boolean glIsAsyncMarkerSGIX(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsBuffer}(GLuint id); </code>    */
  public boolean glIsBuffer(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsBufferARB}(GLuint id); </code>    */
  public boolean glIsBufferARB(int id);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsEnabled}(GLenum cap); </code>    */
  public boolean glIsEnabled(int cap);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsEnabledIndexedEXT}(GLenum target, GLuint index); </code>    */
  public boolean glIsEnabledIndexedEXT(int target, int index);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsFenceAPPLE}(GLuint id); </code>    */
  public boolean glIsFenceAPPLE(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsFenceNV}(GLuint id); </code>    */
  public boolean glIsFenceNV(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsFramebufferEXT}(GLuint id); </code>    */
  public boolean glIsFramebufferEXT(int id);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsList}(GLuint list); </code>    */
  public boolean glIsList(int list);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsObjectBufferATI}(GLuint id); </code>    */
  public boolean glIsObjectBufferATI(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsOcclusionQueryNV}(GLuint id); </code>    */
  public boolean glIsOcclusionQueryNV(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsProgram}(GLuint id); </code>    */
  public boolean glIsProgram(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsProgramARB}(GLuint id); </code>    */
  public boolean glIsProgramARB(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsProgramNV}(GLuint id); </code>    */
  public boolean glIsProgramNV(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsQuery}(GLuint id); </code>    */
  public boolean glIsQuery(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsQueryARB}(GLuint id); </code>    */
  public boolean glIsQueryARB(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsRenderbufferEXT}(GLuint id); </code>    */
  public boolean glIsRenderbufferEXT(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsShader}(GLuint id); </code>    */
  public boolean glIsShader(int id);

  /** Interface to C language function: <br> <code> GLboolean {@native glIsTexture}(GLuint texture); </code>    */
  public boolean glIsTexture(int texture);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsVariantEnabledEXT}(GLuint id, GLenum cap); </code>    */
  public boolean glIsVariantEnabledEXT(int id, int cap);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsVertexArrayAPPLE}(GLuint id); </code>    */
  public boolean glIsVertexArrayAPPLE(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glIsVertexAttribEnabledAPPLE}(GLuint index, GLenum pname); </code>    */
  public boolean glIsVertexAttribEnabledAPPLE(int index, int pname);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLightEnviSGIX}(GLenum target, GLint s); </code>    */
  public void glLightEnviSGIX(int target, int s);

  /** Interface to C language function: <br> <code> void {@native glLightModelf}(GLenum pname, GLfloat param); </code>    */
  public void glLightModelf(int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glLightModelfv}(GLenum pname, const GLfloat *  params); </code>    */
  public void glLightModelfv(int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glLightModelfv}(GLenum pname, const GLfloat *  params); </code>    */
  public void glLightModelfv(int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glLightModeli}(GLenum pname, GLint param); </code>    */
  public void glLightModeli(int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glLightModeliv}(GLenum pname, const GLint *  params); </code>    */
  public void glLightModeliv(int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glLightModeliv}(GLenum pname, const GLint *  params); </code>    */
  public void glLightModeliv(int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glLightf}(GLenum light, GLenum pname, GLfloat param); </code>    */
  public void glLightf(int light, int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glLightfv}(GLenum light, GLenum pname, const GLfloat *  params); </code>    */
  public void glLightfv(int light, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glLightfv}(GLenum light, GLenum pname, const GLfloat *  params); </code>    */
  public void glLightfv(int light, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glLighti}(GLenum light, GLenum pname, GLint param); </code>    */
  public void glLighti(int light, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glLightiv}(GLenum light, GLenum pname, const GLint *  params); </code>    */
  public void glLightiv(int light, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glLightiv}(GLenum light, GLenum pname, const GLint *  params); </code>    */
  public void glLightiv(int light, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glLineStipple}(GLint factor, GLushort pattern); </code>    */
  public void glLineStipple(int factor, short pattern);

  /** Interface to C language function: <br> <code> void {@native glLineWidth}(GLfloat width); </code>    */
  public void glLineWidth(float width);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLinkProgram}(GLuint mode); </code>    */
  public void glLinkProgram(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLinkProgramARB}(GLhandleARB mode); </code>    */
  public void glLinkProgramARB(int mode);

  /** Interface to C language function: <br> <code> void {@native glListBase}(GLuint base); </code>    */
  public void glListBase(int base);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glListParameterfSGIX}(GLuint target, GLenum pname, GLfloat params); </code>    */
  public void glListParameterfSGIX(int target, int pname, float params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glListParameterfvSGIX}(GLuint target, GLenum pname, const GLfloat *  params); </code>    */
  public void glListParameterfvSGIX(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glListParameterfvSGIX}(GLuint target, GLenum pname, const GLfloat *  params); </code>    */
  public void glListParameterfvSGIX(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glListParameteriSGIX}(GLuint target, GLenum pname, GLint params); </code>    */
  public void glListParameteriSGIX(int target, int pname, int params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glListParameterivSGIX}(GLuint target, GLenum pname, const GLint *  params); </code>    */
  public void glListParameterivSGIX(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glListParameterivSGIX}(GLuint target, GLenum pname, const GLint *  params); </code>    */
  public void glListParameterivSGIX(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glLoadIdentity}(void); </code>    */
  public void glLoadIdentity();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLoadIdentityDeformationMapSGIX}(GLbitfield mode); </code>    */
  public void glLoadIdentityDeformationMapSGIX(int mode);

  /** Interface to C language function: <br> <code> void {@native glLoadMatrixd}(const GLdouble *  m); </code>    */
  public void glLoadMatrixd(java.nio.DoubleBuffer m);

  /** Interface to C language function: <br> <code> void {@native glLoadMatrixd}(const GLdouble *  m); </code>    */
  public void glLoadMatrixd(double[] m, int m_offset);

  /** Interface to C language function: <br> <code> void {@native glLoadMatrixf}(const GLfloat *  m); </code>    */
  public void glLoadMatrixf(java.nio.FloatBuffer m);

  /** Interface to C language function: <br> <code> void {@native glLoadMatrixf}(const GLfloat *  m); </code>    */
  public void glLoadMatrixf(float[] m, int m_offset);

  /** Interface to C language function: <br> <code> void {@native glLoadName}(GLuint name); </code>    */
  public void glLoadName(int name);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLoadProgramNV}(GLenum target, GLuint id, GLsizei len, const GLubyte *  program); </code>    */
  public void glLoadProgramNV(int target, int id, int len, java.lang.String program);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLoadTransposeMatrixd}(const GLdouble *  m); </code>    */
  public void glLoadTransposeMatrixd(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLoadTransposeMatrixd}(const GLdouble *  m); </code>    */
  public void glLoadTransposeMatrixd(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLoadTransposeMatrixf}(const GLfloat *  m); </code>    */
  public void glLoadTransposeMatrixf(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLoadTransposeMatrixf}(const GLfloat *  m); </code>    */
  public void glLoadTransposeMatrixf(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glLockArraysEXT}(GLint x, GLsizei y); </code>    */
  public void glLockArraysEXT(int x, int y);

  /** Interface to C language function: <br> <code> void {@native glLogicOp}(GLenum opcode); </code>    */
  public void glLogicOp(int opcode);

  /** Interface to C language function: <br> <code> void {@native glMap1d}(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code>    */
  public void glMap1d(int target, double u1, double u2, int stride, int order, java.nio.DoubleBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap1d}(GLenum target, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code>    */
  public void glMap1d(int target, double u1, double u2, int stride, int order, double[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMap1f}(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code>    */
  public void glMap1f(int target, float u1, float u2, int stride, int order, java.nio.FloatBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap1f}(GLenum target, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code>    */
  public void glMap1f(int target, float u1, float u2, int stride, int order, float[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMap2d}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code>    */
  public void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, java.nio.DoubleBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap2d}(GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code>    */
  public void glMap2d(int target, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMap2f}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code>    */
  public void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, java.nio.FloatBuffer points);

  /** Interface to C language function: <br> <code> void {@native glMap2f}(GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code>    */
  public void glMap2f(int target, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points, int points_offset);

  /** Interface to C language function: <br> <code> GLvoid *  {@native glMapBuffer}(GLenum target, GLenum access); </code>    */
  public java.nio.ByteBuffer glMapBuffer(int target, int access);

  /** Interface to C language function: <br> <code> GLvoid *  {@native glMapBufferARB}(GLenum target, GLenum access); </code>    */
  public java.nio.ByteBuffer glMapBufferARB(int target, int access);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapControlPointsNV}(GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const GLvoid *  points); </code>    */
  public void glMapControlPointsNV(int target, int index, int type, int ustride, int vstride, int uorder, int vorder, boolean packed, java.nio.Buffer points);

  /** Interface to C language function: <br> <code> void {@native glMapGrid1d}(GLint un, GLdouble u1, GLdouble u2); </code>    */
  public void glMapGrid1d(int un, double u1, double u2);

  /** Interface to C language function: <br> <code> void {@native glMapGrid1f}(GLint un, GLfloat u1, GLfloat u2); </code>    */
  public void glMapGrid1f(int un, float u1, float u2);

  /** Interface to C language function: <br> <code> void {@native glMapGrid2d}(GLint un, GLdouble u1, GLdouble u2, GLint vn, GLdouble v1, GLdouble v2); </code>    */
  public void glMapGrid2d(int un, double u1, double u2, int vn, double v1, double v2);

  /** Interface to C language function: <br> <code> void {@native glMapGrid2f}(GLint un, GLfloat u1, GLfloat u2, GLint vn, GLfloat v1, GLfloat v2); </code>    */
  public void glMapGrid2f(int un, float u1, float u2, int vn, float v1, float v2);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glMapParameterfvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapParameterfvNV}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glMapParameterfvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapParameterivNV}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glMapParameterivNV(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapParameterivNV}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glMapParameterivNV(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib1dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code>    */
  public void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, java.nio.DoubleBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib1dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *  points); </code>    */
  public void glMapVertexAttrib1dAPPLE(int index, int size, double u1, double u2, int stride, int order, double[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib1fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code>    */
  public void glMapVertexAttrib1fAPPLE(int index, int size, float u1, float u2, int stride, int order, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib1fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *  points); </code>    */
  public void glMapVertexAttrib1fAPPLE(int index, int size, float u1, float u2, int stride, int order, float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib2dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code>    */
  public void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, java.nio.DoubleBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib2dAPPLE}(GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *  points); </code>    */
  public void glMapVertexAttrib2dAPPLE(int index, int size, double u1, double u2, int ustride, int uorder, double v1, double v2, int vstride, int vorder, double[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib2fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code>    */
  public void glMapVertexAttrib2fAPPLE(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMapVertexAttrib2fAPPLE}(GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *  points); </code>    */
  public void glMapVertexAttrib2fAPPLE(int index, int size, float u1, float u2, int ustride, int uorder, float v1, float v2, int vstride, int vorder, float[] points, int points_offset);

  /** Interface to C language function: <br> <code> void {@native glMaterialf}(GLenum face, GLenum pname, GLfloat param); </code>    */
  public void glMaterialf(int face, int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glMaterialfv}(GLenum face, GLenum pname, const GLfloat *  params); </code>    */
  public void glMaterialfv(int face, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glMaterialfv}(GLenum face, GLenum pname, const GLfloat *  params); </code>    */
  public void glMaterialfv(int face, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glMateriali}(GLenum face, GLenum pname, GLint param); </code>    */
  public void glMateriali(int face, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glMaterialiv}(GLenum face, GLenum pname, const GLint *  params); </code>    */
  public void glMaterialiv(int face, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glMaterialiv}(GLenum face, GLenum pname, const GLint *  params); </code>    */
  public void glMaterialiv(int face, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexPointerARB}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glMatrixIndexPointerARB(int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexPointerARB}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glMatrixIndexPointerARB(int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexubvARB}(GLint size, const GLubyte *  weights); </code>    */
  public void glMatrixIndexubvARB(int size, java.nio.ByteBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexubvARB}(GLint size, const GLubyte *  weights); </code>    */
  public void glMatrixIndexubvARB(int size, byte[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexuivARB}(GLint n, const GLuint *  ids); </code>    */
  public void glMatrixIndexuivARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexuivARB}(GLint n, const GLuint *  ids); </code>    */
  public void glMatrixIndexuivARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexusvARB}(GLint size, const GLushort *  weights); </code>    */
  public void glMatrixIndexusvARB(int size, java.nio.ShortBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMatrixIndexusvARB}(GLint size, const GLushort *  weights); </code>    */
  public void glMatrixIndexusvARB(int size, short[] weights, int weights_offset);

  /** Interface to C language function: <br> <code> void {@native glMatrixMode}(GLenum mode); </code>    */
  public void glMatrixMode(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMinmax}(GLenum target, GLenum internalformat, GLboolean sink); </code>    */
  public void glMinmax(int target, int internalformat, boolean sink);

  /** Interface to C language function: <br> <code> void {@native glMultMatrixd}(const GLdouble *  m); </code>    */
  public void glMultMatrixd(java.nio.DoubleBuffer m);

  /** Interface to C language function: <br> <code> void {@native glMultMatrixd}(const GLdouble *  m); </code>    */
  public void glMultMatrixd(double[] m, int m_offset);

  /** Interface to C language function: <br> <code> void {@native glMultMatrixf}(const GLfloat *  m); </code>    */
  public void glMultMatrixf(java.nio.FloatBuffer m);

  /** Interface to C language function: <br> <code> void {@native glMultMatrixf}(const GLfloat *  m); </code>    */
  public void glMultMatrixf(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultTransposeMatrixd}(const GLdouble *  m); </code>    */
  public void glMultTransposeMatrixd(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultTransposeMatrixd}(const GLdouble *  m); </code>    */
  public void glMultTransposeMatrixd(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultTransposeMatrixf}(const GLfloat *  m); </code>    */
  public void glMultTransposeMatrixf(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultTransposeMatrixf}(const GLfloat *  m); </code>    */
  public void glMultTransposeMatrixf(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawArrays}(GLenum mode, GLint *  first, GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawArrays(int mode, java.nio.IntBuffer first, java.nio.IntBuffer count, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawArrays}(GLenum mode, GLint *  first, GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawArrays(int mode, int[] first, int first_offset, int[] count, int count_offset, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawArraysEXT}(GLenum mode, GLint *  first, GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawArraysEXT(int mode, java.nio.IntBuffer first, java.nio.IntBuffer count, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawArraysEXT}(GLenum mode, GLint *  first, GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawArraysEXT(int mode, int[] first, int first_offset, int[] count, int count_offset, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawElementArrayAPPLE}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawElementArrayAPPLE(int mode, java.nio.IntBuffer first, java.nio.IntBuffer count, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawElementArrayAPPLE}(GLenum mode, const GLint *  first, const GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawElementArrayAPPLE(int mode, int[] first, int first_offset, int[] count, int count_offset, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code>    */
  public void glMultiDrawElements(int mode, java.nio.IntBuffer count, int type, java.nio.Buffer[] indices, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawElements}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code>    */
  public void glMultiDrawElements(int mode, int[] count, int count_offset, int type, java.nio.Buffer[] indices, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawElementsEXT}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code>    */
  public void glMultiDrawElementsEXT(int mode, java.nio.IntBuffer count, int type, java.nio.Buffer[] indices, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawElementsEXT}(GLenum mode, const GLsizei *  count, GLenum type, const GLvoid *  *  indices, GLsizei primcount); </code>    */
  public void glMultiDrawElementsEXT(int mode, int[] count, int count_offset, int type, java.nio.Buffer[] indices, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawRangeElementArrayAPPLE}(GLenum mode, GLuint start, GLuint end, const GLint *  first, const GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, java.nio.IntBuffer first, java.nio.IntBuffer count, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiDrawRangeElementArrayAPPLE}(GLenum mode, GLuint start, GLuint end, const GLint *  first, const GLsizei *  count, GLsizei primcount); </code>    */
  public void glMultiDrawRangeElementArrayAPPLE(int mode, int start, int end, int[] first, int first_offset, int[] count, int count_offset, int primcount);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiModeDrawArraysIBM}(const GLenum *  mode, const GLint *  first, const GLsizei *  count, GLsizei primcount, GLint modestride); </code>    */
  public void glMultiModeDrawArraysIBM(java.nio.IntBuffer mode, java.nio.IntBuffer first, java.nio.IntBuffer count, int primcount, int modestride);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiModeDrawArraysIBM}(const GLenum *  mode, const GLint *  first, const GLsizei *  count, GLsizei primcount, GLint modestride); </code>    */
  public void glMultiModeDrawArraysIBM(int[] mode, int mode_offset, int[] first, int first_offset, int[] count, int count_offset, int primcount, int modestride);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiModeDrawElementsIBM}(const GLenum *  mode, const GLsizei *  count, GLenum type, const GLvoid * const  *  indices, GLsizei primcount, GLint modestride); </code>    */
  public void glMultiModeDrawElementsIBM(java.nio.IntBuffer mode, java.nio.IntBuffer count, int type, java.nio.Buffer[] indices, int primcount, int modestride);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiModeDrawElementsIBM}(const GLenum *  mode, const GLsizei *  count, GLenum type, const GLvoid * const  *  indices, GLsizei primcount, GLint modestride); </code>    */
  public void glMultiModeDrawElementsIBM(int[] mode, int mode_offset, int[] count, int count_offset, int type, java.nio.Buffer[] indices, int primcount, int modestride);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1d}(GLenum target, GLdouble s); </code>    */
  public void glMultiTexCoord1d(int target, double s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord1dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord1dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1f}(GLenum target, GLfloat s); </code>    */
  public void glMultiTexCoord1f(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord1fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord1fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1hNV}(GLenum target, GLhalfNV s); </code>    */
  public void glMultiTexCoord1hNV(int target, short s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord1hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord1hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1i}(GLenum target, GLint s); </code>    */
  public void glMultiTexCoord1i(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord1iv(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord1iv(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1s}(GLenum target, GLshort s); </code>    */
  public void glMultiTexCoord1s(int target, short s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord1sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord1sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord1sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2d}(GLenum target, GLdouble s, GLdouble t); </code>    */
  public void glMultiTexCoord2d(int target, double s, double t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord2dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord2dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2f}(GLenum target, GLfloat s, GLfloat t); </code>    */
  public void glMultiTexCoord2f(int target, float s, float t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord2fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord2fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2hNV}(GLenum target, GLhalfNV s, GLhalfNV t); </code>    */
  public void glMultiTexCoord2hNV(int target, short s, short t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord2hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord2hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2i}(GLenum target, GLint s, GLint t); </code>    */
  public void glMultiTexCoord2i(int target, int s, int t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord2iv(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord2iv(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2s}(GLenum target, GLshort s, GLshort t); </code>    */
  public void glMultiTexCoord2s(int target, short s, short t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord2sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord2sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord2sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3d}(GLenum target, GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glMultiTexCoord3d(int target, double s, double t, double r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord3dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord3dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3f}(GLenum target, GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glMultiTexCoord3f(int target, float s, float t, float r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord3fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord3fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3hNV}(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r); </code>    */
  public void glMultiTexCoord3hNV(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord3hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord3hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3i}(GLenum target, GLint s, GLint t, GLint r); </code>    */
  public void glMultiTexCoord3i(int target, int s, int t, int r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord3iv(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord3iv(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3s}(GLenum target, GLshort s, GLshort t, GLshort r); </code>    */
  public void glMultiTexCoord3s(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord3sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord3sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord3sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4d}(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code>    */
  public void glMultiTexCoord4d(int target, double s, double t, double r, double q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord4dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4dv}(GLenum target, const GLdouble *  v); </code>    */
  public void glMultiTexCoord4dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4f}(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code>    */
  public void glMultiTexCoord4f(int target, float s, float t, float r, float q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord4fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4fv}(GLenum target, const GLfloat *  v); </code>    */
  public void glMultiTexCoord4fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4hNV}(GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q); </code>    */
  public void glMultiTexCoord4hNV(int target, short s, short t, short r, short q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord4hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4hvNV}(GLenum index, const GLhalfNV *  v); </code>    */
  public void glMultiTexCoord4hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4i}(GLenum target, GLint start, GLint x, GLint y, GLint width); </code>    */
  public void glMultiTexCoord4i(int target, int start, int x, int y, int width);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord4iv(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4iv}(GLenum target, const GLint *  v); </code>    */
  public void glMultiTexCoord4iv(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4s}(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q); </code>    */
  public void glMultiTexCoord4s(int target, short s, short t, short r, short q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord4sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glMultiTexCoord4sv}(GLenum target, const GLshort *  v); </code>    */
  public void glMultiTexCoord4sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glNewBufferRegion}(GLenum type); </code>    */
  public int glNewBufferRegion(int type);

  /** Interface to C language function: <br> <code> void {@native glNewList}(GLuint list, GLenum mode); </code>    */
  public void glNewList(int list, int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> GLuint {@native glNewObjectBufferATI}(GLsizei size, const GLvoid *  pointer, GLenum usage); </code>    */
  public int glNewObjectBufferATI(int size, java.nio.Buffer pointer, int usage);

  /** Interface to C language function: <br> <code> void {@native glNormal3b}(GLbyte nx, GLbyte ny, GLbyte nz); </code>    */
  public void glNormal3b(byte nx, byte ny, byte nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3bv}(const GLbyte *  v); </code>    */
  public void glNormal3bv(java.nio.ByteBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3bv}(const GLbyte *  v); </code>    */
  public void glNormal3bv(byte[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3d}(GLdouble nx, GLdouble ny, GLdouble nz); </code>    */
  public void glNormal3d(double nx, double ny, double nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3dv}(const GLdouble *  v); </code>    */
  public void glNormal3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3dv}(const GLdouble *  v); </code>    */
  public void glNormal3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3f}(GLfloat nx, GLfloat ny, GLfloat nz); </code>    */
  public void glNormal3f(float nx, float ny, float nz);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormal3fVertex3fSUN}(GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glNormal3fVertex3fSUN(float r, float g, float b, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormal3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glNormal3fVertex3fvSUN(java.nio.FloatBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormal3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glNormal3fVertex3fvSUN(float[] c, int c_offset, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3fv}(const GLfloat *  v); </code>    */
  public void glNormal3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3fv}(const GLfloat *  v); </code>    */
  public void glNormal3fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormal3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code>    */
  public void glNormal3hNV(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormal3hvNV}(const GLhalfNV *  v); </code>    */
  public void glNormal3hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormal3hvNV}(const GLhalfNV *  v); </code>    */
  public void glNormal3hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3i}(GLint nx, GLint ny, GLint nz); </code>    */
  public void glNormal3i(int nx, int ny, int nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3iv}(const GLint *  v); </code>    */
  public void glNormal3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3iv}(const GLint *  v); </code>    */
  public void glNormal3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormal3s}(GLshort nx, GLshort ny, GLshort nz); </code>    */
  public void glNormal3s(short nx, short ny, short nz);

  /** Interface to C language function: <br> <code> void {@native glNormal3sv}(const GLshort *  v); </code>    */
  public void glNormal3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glNormal3sv}(const GLshort *  v); </code>    */
  public void glNormal3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glNormalPointer}(GLenum type, GLsizei stride, const GLvoid *  ptr); </code> 
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glNormalPointer(int type, int stride, java.nio.Buffer ptr);

  /** Interface to C language function: <br> <code> void {@native glNormalPointer}(GLenum type, GLsizei stride, const GLvoid *  ptr); </code>    */
  public void glNormalPointer(int type, int stride, long ptr_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3bATI}(GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz); </code>    */
  public void glNormalStream3bATI(int stream, byte nx, byte ny, byte nz);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3bvATI}(GLenum index, const GLbyte *  v); </code>    */
  public void glNormalStream3bvATI(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3bvATI}(GLenum index, const GLbyte *  v); </code>    */
  public void glNormalStream3bvATI(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3dATI}(GLenum target, GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glNormalStream3dATI(int target, double s, double t, double r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glNormalStream3dvATI(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glNormalStream3dvATI(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3fATI}(GLenum target, GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glNormalStream3fATI(int target, float s, float t, float r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glNormalStream3fvATI(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glNormalStream3fvATI(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3iATI}(GLenum target, GLint s, GLint t, GLint r); </code>    */
  public void glNormalStream3iATI(int target, int s, int t, int r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glNormalStream3ivATI(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glNormalStream3ivATI(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3sATI}(GLenum target, GLshort s, GLshort t, GLshort r); </code>    */
  public void glNormalStream3sATI(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glNormalStream3svATI(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glNormalStream3svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glNormalStream3svATI(int target, short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glOrtho}(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble near_val, GLdouble far_val); </code>    */
  public void glOrtho(double left, double right, double bottom, double top, double near_val, double far_val);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPNTrianglesfATI}(GLenum target, GLfloat s); </code>    */
  public void glPNTrianglesfATI(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPNTrianglesiATI}(GLenum target, GLint s); </code>    */
  public void glPNTrianglesiATI(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPassTexCoordATI}(GLuint red, GLuint green, GLenum blue); </code>    */
  public void glPassTexCoordATI(int red, int green, int blue);

  /** Interface to C language function: <br> <code> void {@native glPassThrough}(GLfloat token); </code>    */
  public void glPassThrough(float token);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelDataRangeNV}(GLenum target, GLsizei level, GLvoid *  img); </code> 
      @param img a direct {@link java.nio.Buffer}   */
  public void glPixelDataRangeNV(int target, int level, java.nio.Buffer img);

  /** Interface to C language function: <br> <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code>    */
  public void glPixelMapfv(int map, int mapsize, java.nio.FloatBuffer values);

  /** Interface to C language function: <br> <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code>    */
  public void glPixelMapfv(int map, int mapsize, float[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelMapfv}(GLenum map, GLint mapsize, const GLfloat *  values); </code>    */
  public void glPixelMapfv(int map, int mapsize, long values_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code>    */
  public void glPixelMapuiv(int map, int mapsize, java.nio.IntBuffer values);

  /** Interface to C language function: <br> <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code>    */
  public void glPixelMapuiv(int map, int mapsize, int[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelMapuiv}(GLenum map, GLint mapsize, const GLuint *  values); </code>    */
  public void glPixelMapuiv(int map, int mapsize, long values_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code>    */
  public void glPixelMapusv(int map, int mapsize, java.nio.ShortBuffer values);

  /** Interface to C language function: <br> <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code>    */
  public void glPixelMapusv(int map, int mapsize, short[] values, int values_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelMapusv}(GLenum map, GLint mapsize, const GLushort *  values); </code>    */
  public void glPixelMapusv(int map, int mapsize, long values_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelStoref}(GLenum pname, GLfloat param); </code>    */
  public void glPixelStoref(int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glPixelStorei}(GLenum pname, GLint param); </code>    */
  public void glPixelStorei(int pname, int param);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTexGenParameterfSGIS}(GLenum target, GLfloat s); </code>    */
  public void glPixelTexGenParameterfSGIS(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTexGenParameterfvSGIS}(GLenum target, const GLfloat *  v); </code>    */
  public void glPixelTexGenParameterfvSGIS(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTexGenParameterfvSGIS}(GLenum target, const GLfloat *  v); </code>    */
  public void glPixelTexGenParameterfvSGIS(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTexGenParameteriSGIS}(GLenum target, GLint s); </code>    */
  public void glPixelTexGenParameteriSGIS(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTexGenParameterivSGIS}(GLenum target, const GLint *  v); </code>    */
  public void glPixelTexGenParameterivSGIS(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTexGenParameterivSGIS}(GLenum target, const GLint *  v); </code>    */
  public void glPixelTexGenParameterivSGIS(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTexGenSGIX}(GLenum mode); </code>    */
  public void glPixelTexGenSGIX(int mode);

  /** Interface to C language function: <br> <code> void {@native glPixelTransferf}(GLenum pname, GLfloat param); </code>    */
  public void glPixelTransferf(int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glPixelTransferi}(GLenum pname, GLint param); </code>    */
  public void glPixelTransferi(int pname, int param);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTransformParameterfEXT}(GLenum target, GLenum pname, GLfloat params); </code>    */
  public void glPixelTransformParameterfEXT(int target, int pname, float params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTransformParameterfvEXT}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glPixelTransformParameterfvEXT(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTransformParameterfvEXT}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glPixelTransformParameterfvEXT(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTransformParameteriEXT}(GLenum target, GLenum pname, GLint params); </code>    */
  public void glPixelTransformParameteriEXT(int target, int pname, int params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTransformParameterivEXT}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glPixelTransformParameterivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPixelTransformParameterivEXT}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glPixelTransformParameterivEXT(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glPixelZoom}(GLfloat xfactor, GLfloat yfactor); </code>    */
  public void glPixelZoom(float xfactor, float yfactor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterf}(GLenum target, GLfloat s); </code>    */
  public void glPointParameterf(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfARB}(GLenum target, GLfloat s); </code>    */
  public void glPointParameterfARB(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfEXT}(GLenum target, GLfloat s); </code>    */
  public void glPointParameterfEXT(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfSGIS}(GLenum target, GLfloat s); </code>    */
  public void glPointParameterfSGIS(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfv}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfv}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfvARB}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfvARB(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfvARB}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfvARB(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfvEXT}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfvEXT(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfvEXT}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfvEXT(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfvSGIS}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfvSGIS(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterfvSGIS}(GLenum target, const GLfloat *  v); </code>    */
  public void glPointParameterfvSGIS(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameteri}(GLenum target, GLint s); </code>    */
  public void glPointParameteri(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameteriNV}(GLenum target, GLint s); </code>    */
  public void glPointParameteriNV(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameteriv}(GLenum target, const GLint *  v); </code>    */
  public void glPointParameteriv(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameteriv}(GLenum target, const GLint *  v); </code>    */
  public void glPointParameteriv(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterivNV}(GLenum target, const GLint *  v); </code>    */
  public void glPointParameterivNV(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPointParameterivNV}(GLenum target, const GLint *  v); </code>    */
  public void glPointParameterivNV(int target, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glPointSize}(GLfloat size); </code>    */
  public void glPointSize(float size);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glPollAsyncSGIX}(GLuint *  markerp); </code>    */
  public int glPollAsyncSGIX(java.nio.IntBuffer markerp);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glPollAsyncSGIX}(GLuint *  markerp); </code>    */
  public int glPollAsyncSGIX(int[] markerp, int markerp_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glPollInstrumentsSGIX}(GLint *  marker_p); </code>    */
  public int glPollInstrumentsSGIX(java.nio.IntBuffer marker_p);

  /** Entry point (through function pointer) to C language function: <br> <code> GLint {@native glPollInstrumentsSGIX}(GLint *  marker_p); </code>    */
  public int glPollInstrumentsSGIX(int[] marker_p, int marker_p_offset);

  /** Interface to C language function: <br> <code> void {@native glPolygonMode}(GLenum face, GLenum mode); </code>    */
  public void glPolygonMode(int face, int mode);

  /** Interface to C language function: <br> <code> void {@native glPolygonOffset}(GLfloat factor, GLfloat units); </code>    */
  public void glPolygonOffset(float factor, float units);

  /** Interface to C language function: <br> <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code>    */
  public void glPolygonStipple(java.nio.ByteBuffer mask);

  /** Interface to C language function: <br> <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code>    */
  public void glPolygonStipple(byte[] mask, int mask_offset);

  /** Interface to C language function: <br> <code> void {@native glPolygonStipple}(const GLubyte *  mask); </code>    */
  public void glPolygonStipple(long mask_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glPopAttrib}(void); </code>    */
  public void glPopAttrib();

  /** Interface to C language function: <br> <code> void {@native glPopClientAttrib}(void); </code>    */
  public void glPopClientAttrib();

  /** Interface to C language function: <br> <code> void {@native glPopMatrix}(void); </code>    */
  public void glPopMatrix();

  /** Interface to C language function: <br> <code> void {@native glPopName}(void); </code>    */
  public void glPopName();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPrimitiveRestartIndexNV}(GLuint mode); </code>    */
  public void glPrimitiveRestartIndexNV(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glPrimitiveRestartNV}(void); </code>    */
  public void glPrimitiveRestartNV();

  /** Interface to C language function: <br> <code> void {@native glPrioritizeTextures}(GLsizei n, const GLuint *  textures, const GLclampf *  priorities); </code>    */
  public void glPrioritizeTextures(int n, java.nio.IntBuffer textures, java.nio.FloatBuffer priorities);

  /** Interface to C language function: <br> <code> void {@native glPrioritizeTextures}(GLsizei n, const GLuint *  textures, const GLclampf *  priorities); </code>    */
  public void glPrioritizeTextures(int n, int[] textures, int textures_offset, float[] priorities, int priorities_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramBufferParametersIivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *  params); </code>    */
  public void glProgramBufferParametersIivNV(int target, int buffer, int index, int count, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramBufferParametersIivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLint *  params); </code>    */
  public void glProgramBufferParametersIivNV(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramBufferParametersIuivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *  params); </code>    */
  public void glProgramBufferParametersIuivNV(int target, int buffer, int index, int count, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramBufferParametersIuivNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLuint *  params); </code>    */
  public void glProgramBufferParametersIuivNV(int target, int buffer, int index, int count, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramBufferParametersfvNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *  params); </code>    */
  public void glProgramBufferParametersfvNV(int target, int buffer, int index, int count, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramBufferParametersfvNV}(GLenum target, GLuint buffer, GLuint index, GLsizei count, const GLfloat *  params); </code>    */
  public void glProgramBufferParametersfvNV(int target, int buffer, int index, int count, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameter4dARB}(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glProgramEnvParameter4dARB(int target, int index, double x, double y, double z, double w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code>    */
  public void glProgramEnvParameter4dvARB(int target, int index, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code>    */
  public void glProgramEnvParameter4dvARB(int target, int index, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameter4fARB}(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glProgramEnvParameter4fARB(int target, int index, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glProgramEnvParameter4fvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glProgramEnvParameter4fvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameterI4iNV}(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glProgramEnvParameterI4iNV(int target, int index, int x, int y, int z, int w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code>    */
  public void glProgramEnvParameterI4ivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code>    */
  public void glProgramEnvParameterI4ivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameterI4uiNV}(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code>    */
  public void glProgramEnvParameterI4uiNV(int target, int index, int x, int y, int z, int w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code>    */
  public void glProgramEnvParameterI4uivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code>    */
  public void glProgramEnvParameterI4uivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code>    */
  public void glProgramEnvParameters4fvEXT(int target, int filter, int n, java.nio.FloatBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code>    */
  public void glProgramEnvParameters4fvEXT(int target, int filter, int n, float[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code>    */
  public void glProgramEnvParametersI4ivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code>    */
  public void glProgramEnvParametersI4ivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code>    */
  public void glProgramEnvParametersI4uivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramEnvParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code>    */
  public void glProgramEnvParametersI4uivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameter4dARB}(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glProgramLocalParameter4dARB(int target, int index, double x, double y, double z, double w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code>    */
  public void glProgramLocalParameter4dvARB(int target, int index, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameter4dvARB}(GLenum target, GLuint index, const GLdouble *  params); </code>    */
  public void glProgramLocalParameter4dvARB(int target, int index, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameter4fARB}(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glProgramLocalParameter4fARB(int target, int index, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glProgramLocalParameter4fvARB(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameter4fvARB}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glProgramLocalParameter4fvARB(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameterI4iNV}(GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glProgramLocalParameterI4iNV(int target, int index, int x, int y, int z, int w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code>    */
  public void glProgramLocalParameterI4ivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameterI4ivNV}(GLenum target, GLuint index, const GLint *  params); </code>    */
  public void glProgramLocalParameterI4ivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameterI4uiNV}(GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code>    */
  public void glProgramLocalParameterI4uiNV(int target, int index, int x, int y, int z, int w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code>    */
  public void glProgramLocalParameterI4uivNV(int target, int index, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameterI4uivNV}(GLenum target, GLuint index, const GLuint *  params); </code>    */
  public void glProgramLocalParameterI4uivNV(int target, int index, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code>    */
  public void glProgramLocalParameters4fvEXT(int target, int filter, int n, java.nio.FloatBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParameters4fvEXT}(GLenum target, GLuint filter, GLsizei n, const GLfloat *  weights); </code>    */
  public void glProgramLocalParameters4fvEXT(int target, int filter, int n, float[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code>    */
  public void glProgramLocalParametersI4ivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParametersI4ivNV}(GLenum target, GLuint index, GLsizei count, const GLint *  params); </code>    */
  public void glProgramLocalParametersI4ivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code>    */
  public void glProgramLocalParametersI4uivNV(int target, int index, int count, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramLocalParametersI4uivNV}(GLenum target, GLuint index, GLsizei count, const GLuint *  params); </code>    */
  public void glProgramLocalParametersI4uivNV(int target, int index, int count, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramNamedParameter4dNV}(GLuint id, GLsizei len, const GLubyte *  name, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glProgramNamedParameter4dNV(int id, int len, java.lang.String name, double x, double y, double z, double w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramNamedParameter4dvNV}(GLuint id, GLsizei len, const GLubyte *  name, const GLdouble *  v); </code>    */
  public void glProgramNamedParameter4dvNV(int id, int len, java.lang.String name, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramNamedParameter4dvNV}(GLuint id, GLsizei len, const GLubyte *  name, const GLdouble *  v); </code>    */
  public void glProgramNamedParameter4dvNV(int id, int len, java.lang.String name, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramNamedParameter4fNV}(GLuint id, GLsizei len, const GLubyte *  name, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glProgramNamedParameter4fNV(int id, int len, java.lang.String name, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramNamedParameter4fvNV}(GLuint id, GLsizei len, const GLubyte *  name, const GLfloat *  v); </code>    */
  public void glProgramNamedParameter4fvNV(int id, int len, java.lang.String name, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramNamedParameter4fvNV}(GLuint id, GLsizei len, const GLubyte *  name, const GLfloat *  v); </code>    */
  public void glProgramNamedParameter4fvNV(int id, int len, java.lang.String name, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameter4dNV}(GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glProgramParameter4dNV(int target, int index, double x, double y, double z, double w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameter4dvNV}(GLenum target, GLuint index, const GLdouble *  params); </code>    */
  public void glProgramParameter4dvNV(int target, int index, java.nio.DoubleBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameter4dvNV}(GLenum target, GLuint index, const GLdouble *  params); </code>    */
  public void glProgramParameter4dvNV(int target, int index, double[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameter4fNV}(GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glProgramParameter4fNV(int target, int index, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameter4fvNV}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glProgramParameter4fvNV(int target, int pname, java.nio.FloatBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameter4fvNV}(GLenum target, GLuint pname, const GLfloat *  params); </code>    */
  public void glProgramParameter4fvNV(int target, int pname, float[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameteriEXT}(GLuint program, GLenum pname, GLint value); </code>    */
  public void glProgramParameteriEXT(int program, int pname, int value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameters4dvNV}(GLenum target, GLuint index, GLuint count, const GLdouble *  v); </code>    */
  public void glProgramParameters4dvNV(int target, int index, int count, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameters4dvNV}(GLenum target, GLuint index, GLuint count, const GLdouble *  v); </code>    */
  public void glProgramParameters4dvNV(int target, int index, int count, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameters4fvNV}(GLenum target, GLuint index, GLuint count, const GLfloat *  v); </code>    */
  public void glProgramParameters4fvNV(int target, int index, int count, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramParameters4fvNV}(GLenum target, GLuint index, GLuint count, const GLfloat *  v); </code>    */
  public void glProgramParameters4fvNV(int target, int index, int count, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramStringARB}(GLenum target, GLenum format, GLsizei len, const GLvoid *  string); </code>    */
  public void glProgramStringARB(int target, int format, int len, java.lang.String string);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glProgramVertexLimitNV}(GLenum target, GLint limit); </code>    */
  public void glProgramVertexLimitNV(int target, int limit);

  /** Interface to C language function: <br> <code> void {@native glPushAttrib}(GLbitfield mask); </code>    */
  public void glPushAttrib(int mask);

  /** Interface to C language function: <br> <code> void {@native glPushClientAttrib}(GLbitfield mask); </code>    */
  public void glPushClientAttrib(int mask);

  /** Interface to C language function: <br> <code> void {@native glPushMatrix}(void); </code>    */
  public void glPushMatrix();

  /** Interface to C language function: <br> <code> void {@native glPushName}(GLuint name); </code>    */
  public void glPushName(int name);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2d}(GLdouble x, GLdouble y); </code>    */
  public void glRasterPos2d(double x, double y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2dv}(const GLdouble *  v); </code>    */
  public void glRasterPos2dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2dv}(const GLdouble *  v); </code>    */
  public void glRasterPos2dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2f}(GLfloat x, GLfloat y); </code>    */
  public void glRasterPos2f(float x, float y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2fv}(const GLfloat *  v); </code>    */
  public void glRasterPos2fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2fv}(const GLfloat *  v); </code>    */
  public void glRasterPos2fv(float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2i}(GLint x, GLint y); </code>    */
  public void glRasterPos2i(int x, int y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2iv}(const GLint *  v); </code>    */
  public void glRasterPos2iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2iv}(const GLint *  v); </code>    */
  public void glRasterPos2iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2s}(GLshort x, GLshort y); </code>    */
  public void glRasterPos2s(short x, short y);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2sv}(const GLshort *  v); </code>    */
  public void glRasterPos2sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos2sv}(const GLshort *  v); </code>    */
  public void glRasterPos2sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3d}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glRasterPos3d(double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3dv}(const GLdouble *  v); </code>    */
  public void glRasterPos3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3dv}(const GLdouble *  v); </code>    */
  public void glRasterPos3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3f}(GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glRasterPos3f(float x, float y, float z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3fv}(const GLfloat *  v); </code>    */
  public void glRasterPos3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3fv}(const GLfloat *  v); </code>    */
  public void glRasterPos3fv(float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3i}(GLint x, GLint y, GLint z); </code>    */
  public void glRasterPos3i(int x, int y, int z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3iv}(const GLint *  v); </code>    */
  public void glRasterPos3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3iv}(const GLint *  v); </code>    */
  public void glRasterPos3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3s}(GLshort x, GLshort y, GLshort z); </code>    */
  public void glRasterPos3s(short x, short y, short z);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3sv}(const GLshort *  v); </code>    */
  public void glRasterPos3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos3sv}(const GLshort *  v); </code>    */
  public void glRasterPos3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4d}(GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glRasterPos4d(double x, double y, double z, double w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4dv}(const GLdouble *  v); </code>    */
  public void glRasterPos4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4dv}(const GLdouble *  v); </code>    */
  public void glRasterPos4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4f}(GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glRasterPos4f(float x, float y, float z, float w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4fv}(const GLfloat *  v); </code>    */
  public void glRasterPos4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4fv}(const GLfloat *  v); </code>    */
  public void glRasterPos4fv(float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4i}(GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glRasterPos4i(int x, int y, int z, int w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4iv}(const GLint *  v); </code>    */
  public void glRasterPos4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4iv}(const GLint *  v); </code>    */
  public void glRasterPos4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4s}(GLshort x, GLshort y, GLshort z, GLshort w); </code>    */
  public void glRasterPos4s(short x, short y, short z, short w);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4sv}(const GLshort *  v); </code>    */
  public void glRasterPos4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glRasterPos4sv}(const GLshort *  v); </code>    */
  public void glRasterPos4sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glReadBuffer}(GLenum mode); </code>    */
  public void glReadBuffer(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReadBufferRegion}(GLuint target, GLint start, GLint x, GLsizei y, GLsizei width); </code>    */
  public void glReadBufferRegion(int target, int start, int x, int y, int width);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReadInstrumentsSGIX}(GLint count); </code>    */
  public void glReadInstrumentsSGIX(int count);

  /** Interface to C language function: <br> <code> void {@native glReadPixels}(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *  pixels); </code>    */
  public void glReadPixels(int x, int y, int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glReadPixels}(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *  pixels); </code>    */
  public void glReadPixels(int x, int y, int width, int height, int format, int type, long pixels_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glRectd}(GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2); </code>    */
  public void glRectd(double x1, double y1, double x2, double y2);

  /** Interface to C language function: <br> <code> void {@native glRectdv}(const GLdouble *  v1, const GLdouble *  v2); </code>    */
  public void glRectdv(java.nio.DoubleBuffer v1, java.nio.DoubleBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectdv}(const GLdouble *  v1, const GLdouble *  v2); </code>    */
  public void glRectdv(double[] v1, int v1_offset, double[] v2, int v2_offset);

  /** Interface to C language function: <br> <code> void {@native glRectf}(GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2); </code>    */
  public void glRectf(float x1, float y1, float x2, float y2);

  /** Interface to C language function: <br> <code> void {@native glRectfv}(const GLfloat *  v1, const GLfloat *  v2); </code>    */
  public void glRectfv(java.nio.FloatBuffer v1, java.nio.FloatBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectfv}(const GLfloat *  v1, const GLfloat *  v2); </code>    */
  public void glRectfv(float[] v1, int v1_offset, float[] v2, int v2_offset);

  /** Interface to C language function: <br> <code> void {@native glRecti}(GLint x1, GLint y1, GLint x2, GLint y2); </code>    */
  public void glRecti(int x1, int y1, int x2, int y2);

  /** Interface to C language function: <br> <code> void {@native glRectiv}(const GLint *  v1, const GLint *  v2); </code>    */
  public void glRectiv(java.nio.IntBuffer v1, java.nio.IntBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectiv}(const GLint *  v1, const GLint *  v2); </code>    */
  public void glRectiv(int[] v1, int v1_offset, int[] v2, int v2_offset);

  /** Interface to C language function: <br> <code> void {@native glRects}(GLshort x1, GLshort y1, GLshort x2, GLshort y2); </code>    */
  public void glRects(short x1, short y1, short x2, short y2);

  /** Interface to C language function: <br> <code> void {@native glRectsv}(const GLshort *  v1, const GLshort *  v2); </code>    */
  public void glRectsv(java.nio.ShortBuffer v1, java.nio.ShortBuffer v2);

  /** Interface to C language function: <br> <code> void {@native glRectsv}(const GLshort *  v1, const GLshort *  v2); </code>    */
  public void glRectsv(short[] v1, int v1_offset, short[] v2, int v2_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReferencePlaneSGIX}(const GLdouble *  m); </code>    */
  public void glReferencePlaneSGIX(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReferencePlaneSGIX}(const GLdouble *  m); </code>    */
  public void glReferencePlaneSGIX(double[] m, int m_offset);

  /** Interface to C language function: <br> <code> GLint {@native glRenderMode}(GLenum mode); </code>    */
  public int glRenderMode(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glRenderbufferStorageEXT}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height); </code>    */
  public void glRenderbufferStorageEXT(int target, int internalformat, int width, int height);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glRenderbufferStorageMultisampleCoverageNV}(GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height); </code>    */
  public void glRenderbufferStorageMultisampleCoverageNV(int target, int coverageSamples, int colorSamples, int internalformat, int width, int height);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glRenderbufferStorageMultisampleEXT}(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height); </code>    */
  public void glRenderbufferStorageMultisampleEXT(int target, int samples, int internalformat, int width, int height);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor3fVertex3fSUN}(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glReplacementCodeuiColor3fVertex3fSUN(int rc, float r, float g, float b, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiColor3fVertex3fvSUN(java.nio.IntBuffer rc, java.nio.FloatBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiColor3fVertex3fvSUN(int[] rc, int rc_offset, float[] c, int c_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor4fNormal3fVertex3fSUN}(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glReplacementCodeuiColor4fNormal3fVertex3fSUN(int rc, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor4fNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(java.nio.IntBuffer rc, java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor4fNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiColor4fNormal3fVertex3fvSUN(int[] rc, int rc_offset, float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor4ubVertex3fSUN}(GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glReplacementCodeuiColor4ubVertex3fSUN(int rc, byte r, byte g, byte b, byte a, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor4ubVertex3fvSUN}(const GLuint *  rc, const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiColor4ubVertex3fvSUN(java.nio.IntBuffer rc, java.nio.ByteBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiColor4ubVertex3fvSUN}(const GLuint *  rc, const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiColor4ubVertex3fvSUN(int[] rc, int rc_offset, byte[] c, int c_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiNormal3fVertex3fSUN}(GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glReplacementCodeuiNormal3fVertex3fSUN(int rc, float r, float g, float b, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiNormal3fVertex3fvSUN(java.nio.IntBuffer rc, java.nio.FloatBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiNormal3fVertex3fvSUN(int[] rc, int rc_offset, float[] c, int c_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN}(GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(int rc, float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  tc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(java.nio.IntBuffer rc, java.nio.FloatBuffer tc, java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  tc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(int[] rc, int rc_offset, float[] tc, int tc_offset, float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN}(GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(int rc, float s, float t, float nx, float ny, float nz, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(java.nio.IntBuffer rc, java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(int[] rc, int rc_offset, float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fVertex3fSUN}(GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glReplacementCodeuiTexCoord2fVertex3fSUN(int rc, float s, float t, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiTexCoord2fVertex3fvSUN(java.nio.IntBuffer rc, java.nio.FloatBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiTexCoord2fVertex3fvSUN}(const GLuint *  rc, const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiTexCoord2fVertex3fvSUN(int[] rc, int rc_offset, float[] c, int c_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiVertex3fSUN}(GLuint target, GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glReplacementCodeuiVertex3fSUN(int target, float s, float t, float r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiVertex3fvSUN}(const GLuint *  rc, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiVertex3fvSUN(java.nio.IntBuffer rc, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glReplacementCodeuiVertex3fvSUN}(const GLuint *  rc, const GLfloat *  v); </code>    */
  public void glReplacementCodeuiVertex3fvSUN(int[] rc, int rc_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glRequestResidentProgramsNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glRequestResidentProgramsNV(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glRequestResidentProgramsNV}(GLsizei n, const GLuint *  ids); </code>    */
  public void glRequestResidentProgramsNV(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glResetHistogram}(GLenum mode); </code>    */
  public void glResetHistogram(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glResetMinmax}(GLenum mode); </code>    */
  public void glResetMinmax(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glResizeBuffersMESA}(void); </code>    */
  public void glResizeBuffersMESA();

  /** Interface to C language function: <br> <code> void {@native glRotated}(GLdouble angle, GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glRotated(double angle, double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glRotatef}(GLfloat angle, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glRotatef(float angle, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSampleCoverage}(GLclampf value, GLboolean invert); </code>    */
  public void glSampleCoverage(float value, boolean invert);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSampleMapATI}(GLuint red, GLuint green, GLenum blue); </code>    */
  public void glSampleMapATI(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSampleMaskEXT}(GLclampf value, GLboolean invert); </code>    */
  public void glSampleMaskEXT(float value, boolean invert);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSampleMaskSGIS}(GLclampf value, GLboolean invert); </code>    */
  public void glSampleMaskSGIS(float value, boolean invert);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSamplePatternEXT}(GLenum mode); </code>    */
  public void glSamplePatternEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSamplePatternSGIS}(GLenum mode); </code>    */
  public void glSamplePatternSGIS(int mode);

  /** Interface to C language function: <br> <code> void {@native glScaled}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glScaled(double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glScalef}(GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glScalef(float x, float y, float z);

  /** Interface to C language function: <br> <code> void {@native glScissor}(GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glScissor(int x, int y, int width, int height);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3b}(GLbyte red, GLbyte green, GLbyte blue); </code>    */
  public void glSecondaryColor3b(byte red, byte green, byte blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3bEXT}(GLbyte red, GLbyte green, GLbyte blue); </code>    */
  public void glSecondaryColor3bEXT(byte red, byte green, byte blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3bv}(const GLbyte *  v); </code>    */
  public void glSecondaryColor3bv(java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3bv}(const GLbyte *  v); </code>    */
  public void glSecondaryColor3bv(byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3bvEXT}(const GLbyte *  v); </code>    */
  public void glSecondaryColor3bvEXT(java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3bvEXT}(const GLbyte *  v); </code>    */
  public void glSecondaryColor3bvEXT(byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3d}(GLdouble red, GLdouble green, GLdouble blue); </code>    */
  public void glSecondaryColor3d(double red, double green, double blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3dEXT}(GLdouble red, GLdouble green, GLdouble blue); </code>    */
  public void glSecondaryColor3dEXT(double red, double green, double blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3dv}(const GLdouble *  m); </code>    */
  public void glSecondaryColor3dv(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3dv}(const GLdouble *  m); </code>    */
  public void glSecondaryColor3dv(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3dvEXT}(const GLdouble *  m); </code>    */
  public void glSecondaryColor3dvEXT(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3dvEXT}(const GLdouble *  m); </code>    */
  public void glSecondaryColor3dvEXT(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3f}(GLfloat red, GLfloat green, GLfloat blue); </code>    */
  public void glSecondaryColor3f(float red, float green, float blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3fEXT}(GLfloat red, GLfloat green, GLfloat blue); </code>    */
  public void glSecondaryColor3fEXT(float red, float green, float blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3fv}(const GLfloat *  m); </code>    */
  public void glSecondaryColor3fv(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3fv}(const GLfloat *  m); </code>    */
  public void glSecondaryColor3fv(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3fvEXT}(const GLfloat *  m); </code>    */
  public void glSecondaryColor3fvEXT(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3fvEXT}(const GLfloat *  m); </code>    */
  public void glSecondaryColor3fvEXT(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code>    */
  public void glSecondaryColor3hNV(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3hvNV}(const GLhalfNV *  v); </code>    */
  public void glSecondaryColor3hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3hvNV}(const GLhalfNV *  v); </code>    */
  public void glSecondaryColor3hvNV(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3i}(GLint red, GLint green, GLint blue); </code>    */
  public void glSecondaryColor3i(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3iEXT}(GLint red, GLint green, GLint blue); </code>    */
  public void glSecondaryColor3iEXT(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3iv}(const GLint *  v); </code>    */
  public void glSecondaryColor3iv(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3iv}(const GLint *  v); </code>    */
  public void glSecondaryColor3iv(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ivEXT}(const GLint *  v); </code>    */
  public void glSecondaryColor3ivEXT(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ivEXT}(const GLint *  v); </code>    */
  public void glSecondaryColor3ivEXT(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3s}(GLshort red, GLshort green, GLshort blue); </code>    */
  public void glSecondaryColor3s(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3sEXT}(GLshort red, GLshort green, GLshort blue); </code>    */
  public void glSecondaryColor3sEXT(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3sv}(const GLshort *  v); </code>    */
  public void glSecondaryColor3sv(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3sv}(const GLshort *  v); </code>    */
  public void glSecondaryColor3sv(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3svEXT}(const GLshort *  v); </code>    */
  public void glSecondaryColor3svEXT(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3svEXT}(const GLshort *  v); </code>    */
  public void glSecondaryColor3svEXT(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ub}(GLubyte red, GLubyte green, GLubyte blue); </code>    */
  public void glSecondaryColor3ub(byte red, byte green, byte blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ubEXT}(GLubyte red, GLubyte green, GLubyte blue); </code>    */
  public void glSecondaryColor3ubEXT(byte red, byte green, byte blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ubv}(const GLubyte *  v); </code>    */
  public void glSecondaryColor3ubv(java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ubv}(const GLubyte *  v); </code>    */
  public void glSecondaryColor3ubv(byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ubvEXT}(const GLubyte *  v); </code>    */
  public void glSecondaryColor3ubvEXT(java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ubvEXT}(const GLubyte *  v); </code>    */
  public void glSecondaryColor3ubvEXT(byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3ui}(GLuint red, GLuint green, GLuint blue); </code>    */
  public void glSecondaryColor3ui(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3uiEXT}(GLuint red, GLuint green, GLuint blue); </code>    */
  public void glSecondaryColor3uiEXT(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3uiv}(const GLuint *  v); </code>    */
  public void glSecondaryColor3uiv(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3uiv}(const GLuint *  v); </code>    */
  public void glSecondaryColor3uiv(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3uivEXT}(const GLuint *  v); </code>    */
  public void glSecondaryColor3uivEXT(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3uivEXT}(const GLuint *  v); </code>    */
  public void glSecondaryColor3uivEXT(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3us}(GLushort red, GLushort green, GLushort blue); </code>    */
  public void glSecondaryColor3us(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3usEXT}(GLushort red, GLushort green, GLushort blue); </code>    */
  public void glSecondaryColor3usEXT(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3usv}(const GLushort *  v); </code>    */
  public void glSecondaryColor3usv(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3usv}(const GLushort *  v); </code>    */
  public void glSecondaryColor3usv(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3usvEXT}(const GLushort *  v); </code>    */
  public void glSecondaryColor3usvEXT(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColor3usvEXT}(const GLushort *  v); </code>    */
  public void glSecondaryColor3usvEXT(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glSecondaryColorPointer(int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColorPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glSecondaryColorPointer(int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColorPointerEXT}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glSecondaryColorPointerEXT(int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSecondaryColorPointerEXT}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glSecondaryColorPointerEXT(int size, int type, int stride, long pointer_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glSelectBuffer}(GLsizei size, GLuint *  buffer); </code> 
      @param buffer a direct {@link java.nio.IntBuffer}   */
  public void glSelectBuffer(int size, java.nio.IntBuffer buffer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSeparableFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  row, const GLvoid *  column); </code>    */
  public void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, java.nio.Buffer row, java.nio.Buffer column);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSeparableFilter2D}(GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  row, const GLvoid *  column); </code>    */
  public void glSeparableFilter2D(int target, int internalformat, int width, int height, int format, int type, long row_buffer_offset, long column_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSetFenceAPPLE}(GLuint mode); </code>    */
  public void glSetFenceAPPLE(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSetFenceNV}(GLuint target, GLenum id); </code>    */
  public void glSetFenceNV(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSetFragmentShaderConstantATI}(GLuint target, const GLfloat *  v); </code>    */
  public void glSetFragmentShaderConstantATI(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSetFragmentShaderConstantATI}(GLuint target, const GLfloat *  v); </code>    */
  public void glSetFragmentShaderConstantATI(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSetInvariantEXT}(GLuint id, GLenum type, const GLvoid *  addr); </code>    */
  public void glSetInvariantEXT(int id, int type, java.nio.Buffer addr);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSetLocalConstantEXT}(GLuint id, GLenum type, const GLvoid *  addr); </code>    */
  public void glSetLocalConstantEXT(int id, int type, java.nio.Buffer addr);

  /** Interface to C language function: <br> <code> void {@native glShadeModel}(GLenum mode); </code>    */
  public void glShadeModel(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glShaderOp1EXT}(GLenum red, GLuint green, GLuint blue); </code>    */
  public void glShaderOp1EXT(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glShaderOp2EXT}(GLenum sfactorRGB, GLuint dfactorRGB, GLuint sfactorAlpha, GLuint dfactorAlpha); </code>    */
  public void glShaderOp2EXT(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glShaderOp3EXT}(GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3); </code>    */
  public void glShaderOp3EXT(int op, int res, int arg1, int arg2, int arg3);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glShaderSource}(GLuint shader, GLsizei count, const GLchar *  *  string, const GLint *  length); </code>    */
  public void glShaderSource(int shader, int count, java.lang.String[] string, java.nio.IntBuffer length);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glShaderSource}(GLuint shader, GLsizei count, const GLchar *  *  string, const GLint *  length); </code>    */
  public void glShaderSource(int shader, int count, java.lang.String[] string, int[] length, int length_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glShaderSourceARB}(GLhandleARB shader, GLsizei count, const GLcharARB *  *  string, const GLint *  length); </code>    */
  public void glShaderSourceARB(int shader, int count, java.lang.String[] string, java.nio.IntBuffer length);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glShaderSourceARB}(GLhandleARB shader, GLsizei count, const GLcharARB *  *  string, const GLint *  length); </code>    */
  public void glShaderSourceARB(int shader, int count, java.lang.String[] string, int[] length, int length_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSharpenTexFuncSGIS}(GLenum target, GLsizei n, const GLfloat *  points); </code>    */
  public void glSharpenTexFuncSGIS(int target, int n, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSharpenTexFuncSGIS}(GLenum target, GLsizei n, const GLfloat *  points); </code>    */
  public void glSharpenTexFuncSGIS(int target, int n, float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSpriteParameterfSGIX}(GLenum target, GLfloat s); </code>    */
  public void glSpriteParameterfSGIX(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSpriteParameterfvSGIX}(GLenum target, const GLfloat *  v); </code>    */
  public void glSpriteParameterfvSGIX(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSpriteParameterfvSGIX}(GLenum target, const GLfloat *  v); </code>    */
  public void glSpriteParameterfvSGIX(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSpriteParameteriSGIX}(GLenum target, GLint s); </code>    */
  public void glSpriteParameteriSGIX(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSpriteParameterivSGIX}(GLenum target, const GLint *  v); </code>    */
  public void glSpriteParameterivSGIX(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSpriteParameterivSGIX}(GLenum target, const GLint *  v); </code>    */
  public void glSpriteParameterivSGIX(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStartInstrumentsSGIX}(void); </code>    */
  public void glStartInstrumentsSGIX();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStencilClearTagEXT}(GLsizei stencilTagBits, GLuint stencilClearTag); </code>    */
  public void glStencilClearTagEXT(int stencilTagBits, int stencilClearTag);

  /** Interface to C language function: <br> <code> void {@native glStencilFunc}(GLenum func, GLint ref, GLuint mask); </code>    */
  public void glStencilFunc(int func, int ref, int mask);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStencilFuncSeparate}(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask); </code>    */
  public void glStencilFuncSeparate(int frontfunc, int backfunc, int ref, int mask);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStencilFuncSeparateATI}(GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask); </code>    */
  public void glStencilFuncSeparateATI(int frontfunc, int backfunc, int ref, int mask);

  /** Interface to C language function: <br> <code> void {@native glStencilMask}(GLuint mask); </code>    */
  public void glStencilMask(int mask);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStencilMaskSeparate}(GLenum target, GLuint id); </code>    */
  public void glStencilMaskSeparate(int target, int id);

  /** Interface to C language function: <br> <code> void {@native glStencilOp}(GLenum fail, GLenum zfail, GLenum zpass); </code>    */
  public void glStencilOp(int fail, int zfail, int zpass);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStencilOpSeparate}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code>    */
  public void glStencilOpSeparate(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStencilOpSeparateATI}(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code>    */
  public void glStencilOpSeparateATI(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStopInstrumentsSGIX}(GLint count); </code>    */
  public void glStopInstrumentsSGIX(int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glStringMarkerGREMEDY}(GLsizei length, const GLvoid *  pointer); </code>    */
  public void glStringMarkerGREMEDY(int length, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSwapAPPLE}(void); </code>    */
  public void glSwapAPPLE();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glSwizzleEXT}(GLuint stage, GLuint portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage); </code>    */
  public void glSwizzleEXT(int stage, int portion, int variable, int input, int mapping, int componentUsage);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTagSampleBufferSGIX}(void); </code>    */
  public void glTagSampleBufferSGIX();

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTbufferMask3DFX}(GLuint mode); </code>    */
  public void glTbufferMask3DFX(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glTestFenceAPPLE}(GLuint id); </code>    */
  public boolean glTestFenceAPPLE(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glTestFenceNV}(GLuint id); </code>    */
  public boolean glTestFenceNV(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glTestObjectAPPLE}(GLenum id, GLuint cap); </code>    */
  public boolean glTestObjectAPPLE(int id, int cap);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexBufferEXT}(GLenum target, GLenum internalformat, GLuint buffer); </code>    */
  public void glTexBufferEXT(int target, int internalformat, int buffer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexBumpParameterfvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glTexBumpParameterfvATI(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexBumpParameterfvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glTexBumpParameterfvATI(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexBumpParameterivATI}(GLenum target, const GLint *  v); </code>    */
  public void glTexBumpParameterivATI(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexBumpParameterivATI}(GLenum target, const GLint *  v); </code>    */
  public void glTexBumpParameterivATI(int target, int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1d}(GLdouble s); </code>    */
  public void glTexCoord1d(double s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1dv}(const GLdouble *  v); </code>    */
  public void glTexCoord1dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1dv}(const GLdouble *  v); </code>    */
  public void glTexCoord1dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1f}(GLfloat s); </code>    */
  public void glTexCoord1f(float s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1fv}(const GLfloat *  v); </code>    */
  public void glTexCoord1fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1fv}(const GLfloat *  v); </code>    */
  public void glTexCoord1fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord1hNV}(GLhalfNV factor); </code>    */
  public void glTexCoord1hNV(short factor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord1hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord1hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord1hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord1hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1i}(GLint s); </code>    */
  public void glTexCoord1i(int s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1iv}(const GLint *  v); </code>    */
  public void glTexCoord1iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1iv}(const GLint *  v); </code>    */
  public void glTexCoord1iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1s}(GLshort s); </code>    */
  public void glTexCoord1s(short s);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1sv}(const GLshort *  v); </code>    */
  public void glTexCoord1sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord1sv}(const GLshort *  v); </code>    */
  public void glTexCoord1sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2d}(GLdouble s, GLdouble t); </code>    */
  public void glTexCoord2d(double s, double t);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2dv}(const GLdouble *  v); </code>    */
  public void glTexCoord2dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2dv}(const GLdouble *  v); </code>    */
  public void glTexCoord2dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2f}(GLfloat s, GLfloat t); </code>    */
  public void glTexCoord2f(float s, float t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor3fVertex3fSUN}(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glTexCoord2fColor3fVertex3fSUN(float s, float t, float p, float q, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord2fColor3fVertex3fvSUN(java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord2fColor3fVertex3fvSUN(float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor4fNormal3fVertex3fSUN}(GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glTexCoord2fColor4fNormal3fVertex3fSUN(float s, float t, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor4fNormal3fVertex3fvSUN}(const GLfloat *  tc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord2fColor4fNormal3fVertex3fvSUN(java.nio.FloatBuffer tc, java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor4fNormal3fVertex3fvSUN}(const GLfloat *  tc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord2fColor4fNormal3fVertex3fvSUN(float[] tc, int tc_offset, float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor4ubVertex3fSUN}(GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glTexCoord2fColor4ubVertex3fSUN(float s, float t, byte r, byte g, byte b, byte a, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor4ubVertex3fvSUN}(const GLfloat *  tc, const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glTexCoord2fColor4ubVertex3fvSUN(java.nio.FloatBuffer tc, java.nio.ByteBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fColor4ubVertex3fvSUN}(const GLfloat *  tc, const GLubyte *  c, const GLfloat *  v); </code>    */
  public void glTexCoord2fColor4ubVertex3fvSUN(float[] tc, int tc_offset, byte[] c, int c_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fNormal3fVertex3fSUN}(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glTexCoord2fNormal3fVertex3fSUN(float s, float t, float p, float q, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fNormal3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord2fNormal3fVertex3fvSUN(java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fNormal3fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord2fNormal3fVertex3fvSUN(float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fVertex3fSUN}(GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glTexCoord2fVertex3fSUN(float s, float t, float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glTexCoord2fVertex3fvSUN(java.nio.FloatBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2fVertex3fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glTexCoord2fVertex3fvSUN(float[] c, int c_offset, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2fv}(const GLfloat *  v); </code>    */
  public void glTexCoord2fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2fv}(const GLfloat *  v); </code>    */
  public void glTexCoord2fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2hNV}(GLhalfNV x, GLhalfNV y); </code>    */
  public void glTexCoord2hNV(short x, short y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord2hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord2hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord2hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2i}(GLint s, GLint t); </code>    */
  public void glTexCoord2i(int s, int t);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2iv}(const GLint *  v); </code>    */
  public void glTexCoord2iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2iv}(const GLint *  v); </code>    */
  public void glTexCoord2iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2s}(GLshort s, GLshort t); </code>    */
  public void glTexCoord2s(short s, short t);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2sv}(const GLshort *  v); </code>    */
  public void glTexCoord2sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord2sv}(const GLshort *  v); </code>    */
  public void glTexCoord2sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3d}(GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glTexCoord3d(double s, double t, double r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3dv}(const GLdouble *  v); </code>    */
  public void glTexCoord3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3dv}(const GLdouble *  v); </code>    */
  public void glTexCoord3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3f}(GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glTexCoord3f(float s, float t, float r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3fv}(const GLfloat *  v); </code>    */
  public void glTexCoord3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3fv}(const GLfloat *  v); </code>    */
  public void glTexCoord3fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code>    */
  public void glTexCoord3hNV(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord3hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord3hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord3hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord3hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3i}(GLint s, GLint t, GLint r); </code>    */
  public void glTexCoord3i(int s, int t, int r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3iv}(const GLint *  v); </code>    */
  public void glTexCoord3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3iv}(const GLint *  v); </code>    */
  public void glTexCoord3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3s}(GLshort s, GLshort t, GLshort r); </code>    */
  public void glTexCoord3s(short s, short t, short r);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3sv}(const GLshort *  v); </code>    */
  public void glTexCoord3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord3sv}(const GLshort *  v); </code>    */
  public void glTexCoord3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4d}(GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code>    */
  public void glTexCoord4d(double s, double t, double r, double q);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4dv}(const GLdouble *  v); </code>    */
  public void glTexCoord4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4dv}(const GLdouble *  v); </code>    */
  public void glTexCoord4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4f}(GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code>    */
  public void glTexCoord4f(float s, float t, float r, float q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4fColor4fNormal3fVertex4fSUN}(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glTexCoord4fColor4fNormal3fVertex4fSUN(float s, float t, float p, float q, float r, float g, float b, float a, float nx, float ny, float nz, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4fColor4fNormal3fVertex4fvSUN}(const GLfloat *  tc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord4fColor4fNormal3fVertex4fvSUN(java.nio.FloatBuffer tc, java.nio.FloatBuffer c, java.nio.FloatBuffer n, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4fColor4fNormal3fVertex4fvSUN}(const GLfloat *  tc, const GLfloat *  c, const GLfloat *  n, const GLfloat *  v); </code>    */
  public void glTexCoord4fColor4fNormal3fVertex4fvSUN(float[] tc, int tc_offset, float[] c, int c_offset, float[] n, int n_offset, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4fVertex4fSUN}(GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glTexCoord4fVertex4fSUN(float s, float t, float p, float q, float x, float y, float z, float w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4fVertex4fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glTexCoord4fVertex4fvSUN(java.nio.FloatBuffer c, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4fVertex4fvSUN}(const GLfloat *  c, const GLfloat *  v); </code>    */
  public void glTexCoord4fVertex4fvSUN(float[] c, int c_offset, float[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4fv}(const GLfloat *  v); </code>    */
  public void glTexCoord4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4fv}(const GLfloat *  v); </code>    */
  public void glTexCoord4fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code>    */
  public void glTexCoord4hNV(short x, short y, short z, short w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord4hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexCoord4hvNV}(const GLhalfNV *  v); </code>    */
  public void glTexCoord4hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4i}(GLint s, GLint t, GLint r, GLint q); </code>    */
  public void glTexCoord4i(int s, int t, int r, int q);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4iv}(const GLint *  v); </code>    */
  public void glTexCoord4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4iv}(const GLint *  v); </code>    */
  public void glTexCoord4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4s}(GLshort s, GLshort t, GLshort r, GLshort q); </code>    */
  public void glTexCoord4s(short s, short t, short r, short q);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4sv}(const GLshort *  v); </code>    */
  public void glTexCoord4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glTexCoord4sv}(const GLshort *  v); </code>    */
  public void glTexCoord4sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glTexCoordPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  ptr); </code> 
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glTexCoordPointer(int size, int type, int stride, java.nio.Buffer ptr);

  /** Interface to C language function: <br> <code> void {@native glTexCoordPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  ptr); </code>    */
  public void glTexCoordPointer(int size, int type, int stride, long ptr_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glTexEnvf}(GLenum target, GLenum pname, GLfloat param); </code>    */
  public void glTexEnvf(int target, int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glTexEnvfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexEnvfv(int target, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexEnvfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexEnvfv(int target, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexEnvi}(GLenum target, GLenum pname, GLint param); </code>    */
  public void glTexEnvi(int target, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glTexEnviv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexEnviv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexEnviv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexEnviv(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexFilterFuncSGIS}(GLenum target, GLenum filter, GLsizei n, const GLfloat *  weights); </code>    */
  public void glTexFilterFuncSGIS(int target, int filter, int n, java.nio.FloatBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexFilterFuncSGIS}(GLenum target, GLenum filter, GLsizei n, const GLfloat *  weights); </code>    */
  public void glTexFilterFuncSGIS(int target, int filter, int n, float[] weights, int weights_offset);

  /** Interface to C language function: <br> <code> void {@native glTexGend}(GLenum coord, GLenum pname, GLdouble param); </code>    */
  public void glTexGend(int coord, int pname, double param);

  /** Interface to C language function: <br> <code> void {@native glTexGendv}(GLenum coord, GLenum pname, const GLdouble *  params); </code>    */
  public void glTexGendv(int coord, int pname, java.nio.DoubleBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexGendv}(GLenum coord, GLenum pname, const GLdouble *  params); </code>    */
  public void glTexGendv(int coord, int pname, double[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexGenf}(GLenum coord, GLenum pname, GLfloat param); </code>    */
  public void glTexGenf(int coord, int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glTexGenfv}(GLenum coord, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexGenfv(int coord, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexGenfv}(GLenum coord, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexGenfv(int coord, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexGeni}(GLenum coord, GLenum pname, GLint param); </code>    */
  public void glTexGeni(int coord, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glTexGeniv}(GLenum coord, GLenum pname, const GLint *  params); </code>    */
  public void glTexGeniv(int coord, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexGeniv}(GLenum coord, GLenum pname, const GLint *  params); </code>    */
  public void glTexGeniv(int coord, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glTexImage1D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexImage1D(int target, int level, int internalFormat, int width, int border, int format, int type, long pixels_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glTexImage2D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glTexImage2D}(GLenum target, GLint level, GLint internalFormat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexImage2D(int target, int level, int internalFormat, int width, int height, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexImage3D}(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexImage3D}(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexImage3D(int target, int level, int internalformat, int width, int height, int depth, int border, int format, int type, long pixels_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexImage4DSGIS}(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexImage4DSGIS(int target, int level, int internalformat, int width, int height, int depth, int size4d, int border, int format, int type, java.nio.Buffer pixels);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexParameterIivEXT}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexParameterIivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexParameterIivEXT}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexParameterIivEXT(int target, int pname, int[] params, int params_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexParameterIuivEXT}(GLenum target, GLenum pname, const GLuint *  params); </code>    */
  public void glTexParameterIuivEXT(int target, int pname, java.nio.IntBuffer params);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexParameterIuivEXT}(GLenum target, GLenum pname, const GLuint *  params); </code>    */
  public void glTexParameterIuivEXT(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexParameterf}(GLenum target, GLenum pname, GLfloat param); </code>    */
  public void glTexParameterf(int target, int pname, float param);

  /** Interface to C language function: <br> <code> void {@native glTexParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexParameterfv(int target, int pname, java.nio.FloatBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexParameterfv}(GLenum target, GLenum pname, const GLfloat *  params); </code>    */
  public void glTexParameterfv(int target, int pname, float[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexParameteri}(GLenum target, GLenum pname, GLint param); </code>    */
  public void glTexParameteri(int target, int pname, int param);

  /** Interface to C language function: <br> <code> void {@native glTexParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexParameteriv(int target, int pname, java.nio.IntBuffer params);

  /** Interface to C language function: <br> <code> void {@native glTexParameteriv}(GLenum target, GLenum pname, const GLint *  params); </code>    */
  public void glTexParameteriv(int target, int pname, int[] params, int params_offset);

  /** Interface to C language function: <br> <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glTexSubImage1D}(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexSubImage1D(int target, int level, int xoffset, int width, int format, int type, long pixels_buffer_offset);

  /** Interface to C language function: <br> <code> void {@native glTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, java.nio.Buffer pixels);

  /** Interface to C language function: <br> <code> void {@native glTexSubImage2D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexSubImage2D(int target, int level, int xoffset, int yoffset, int width, int height, int format, int type, long pixels_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, java.nio.Buffer pixels);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexSubImage3D}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexSubImage3D(int target, int level, int xoffset, int yoffset, int zoffset, int width, int height, int depth, int format, int type, long pixels_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTexSubImage4DSGIS}(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const GLvoid *  pixels); </code>    */
  public void glTexSubImage4DSGIS(int target, int level, int xoffset, int yoffset, int zoffset, int woffset, int width, int height, int depth, int size4d, int format, int type, java.nio.Buffer pixels);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTextureColorMaskSGIS}(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha); </code>    */
  public void glTextureColorMaskSGIS(boolean red, boolean green, boolean blue, boolean alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTextureLightEXT}(GLenum mode); </code>    */
  public void glTextureLightEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTextureMaterialEXT}(GLenum target, GLenum id); </code>    */
  public void glTextureMaterialEXT(int target, int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTextureNormalEXT}(GLenum mode); </code>    */
  public void glTextureNormalEXT(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTextureRangeAPPLE}(GLenum target, GLsizei length, const GLvoid *  pointer); </code>    */
  public void glTextureRangeAPPLE(int target, int length, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTrackMatrixNV}(GLenum sfactorRGB, GLuint dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha); </code>    */
  public void glTrackMatrixNV(int sfactorRGB, int dfactorRGB, int sfactorAlpha, int dfactorAlpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTransformFeedbackAttribsNV}(GLuint count, const GLint *  attribs, GLenum bufferMode); </code>    */
  public void glTransformFeedbackAttribsNV(int count, java.nio.IntBuffer attribs, int bufferMode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTransformFeedbackAttribsNV}(GLuint count, const GLint *  attribs, GLenum bufferMode); </code>    */
  public void glTransformFeedbackAttribsNV(int count, int[] attribs, int attribs_offset, int bufferMode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTransformFeedbackVaryingsNV}(GLuint program, GLsizei count, const GLint *  locations, GLenum bufferMode); </code>    */
  public void glTransformFeedbackVaryingsNV(int program, int count, java.nio.IntBuffer locations, int bufferMode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glTransformFeedbackVaryingsNV}(GLuint program, GLsizei count, const GLint *  locations, GLenum bufferMode); </code>    */
  public void glTransformFeedbackVaryingsNV(int program, int count, int[] locations, int locations_offset, int bufferMode);

  /** Interface to C language function: <br> <code> void {@native glTranslated}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glTranslated(double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glTranslatef}(GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glTranslatef(float x, float y, float z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1f}(GLint location, GLfloat v0); </code>    */
  public void glUniform1f(int location, float v0);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1fARB}(GLint location, GLfloat v0); </code>    */
  public void glUniform1fARB(int location, float v0);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform1fv(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform1fv(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform1fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform1fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1i}(GLint x, GLint y); </code>    */
  public void glUniform1i(int x, int y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1iARB}(GLint x, GLint y); </code>    */
  public void glUniform1iARB(int x, int y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform1iv(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform1iv(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform1ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform1ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1uiEXT}(GLint location, GLuint v0); </code>    */
  public void glUniform1uiEXT(int location, int v0);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform1uivEXT(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform1uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform1uivEXT(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2f}(GLint location, GLfloat v0, GLfloat v1); </code>    */
  public void glUniform2f(int location, float v0, float v1);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2fARB}(GLint location, GLfloat v0, GLfloat v1); </code>    */
  public void glUniform2fARB(int location, float v0, float v1);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform2fv(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform2fv(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform2fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform2fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2i}(GLint red, GLint green, GLint blue); </code>    */
  public void glUniform2i(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2iARB}(GLint red, GLint green, GLint blue); </code>    */
  public void glUniform2iARB(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform2iv(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform2iv(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform2ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform2ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2uiEXT}(GLint location, GLuint v0, GLuint v1); </code>    */
  public void glUniform2uiEXT(int location, int v0, int v1);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform2uivEXT(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform2uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform2uivEXT(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3f}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code>    */
  public void glUniform3f(int location, float v0, float v1, float v2);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3fARB}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2); </code>    */
  public void glUniform3fARB(int location, float v0, float v1, float v2);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform3fv(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform3fv(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform3fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform3fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3i}(GLint location, GLint v0, GLint v1, GLint v2); </code>    */
  public void glUniform3i(int location, int v0, int v1, int v2);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3iARB}(GLint location, GLint v0, GLint v1, GLint v2); </code>    */
  public void glUniform3iARB(int location, int v0, int v1, int v2);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform3iv(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform3iv(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform3ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform3ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3uiEXT}(GLint location, GLuint v0, GLuint v1, GLuint v2); </code>    */
  public void glUniform3uiEXT(int location, int v0, int v1, int v2);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform3uivEXT(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform3uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform3uivEXT(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4f}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code>    */
  public void glUniform4f(int location, float v0, float v1, float v2, float v3);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4fARB}(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3); </code>    */
  public void glUniform4fARB(int location, float v0, float v1, float v2, float v3);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform4fv(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4fv}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform4fv(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform4fvARB(int location, int count, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4fvARB}(GLint location, GLsizei count, const GLfloat *  value); </code>    */
  public void glUniform4fvARB(int location, int count, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4i}(GLint location, GLint v0, GLint v1, GLint v2, GLint v3); </code>    */
  public void glUniform4i(int location, int v0, int v1, int v2, int v3);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4iARB}(GLint location, GLint v0, GLint v1, GLint v2, GLint v3); </code>    */
  public void glUniform4iARB(int location, int v0, int v1, int v2, int v3);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform4iv(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4iv}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform4iv(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform4ivARB(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4ivARB}(GLint location, GLsizei count, const GLint *  value); </code>    */
  public void glUniform4ivARB(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4uiEXT}(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3); </code>    */
  public void glUniform4uiEXT(int location, int v0, int v1, int v2, int v3);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform4uivEXT(int location, int count, java.nio.IntBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniform4uivEXT}(GLint location, GLsizei count, const GLuint *  value); </code>    */
  public void glUniform4uivEXT(int location, int count, int[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformBufferEXT}(GLuint program, GLint location, GLuint buffer); </code>    */
  public void glUniformBufferEXT(int program, int location, int buffer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2fvARB(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2x3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix2x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix2x4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3fvARB(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3x2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3x4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix3x4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix3x4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4fvARB(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4fvARB}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4fvARB(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4x2fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4x2fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4x2fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4x3fv(int location, int count, boolean transpose, java.nio.FloatBuffer value);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUniformMatrix4x3fv}(GLint location, GLsizei count, GLboolean transpose, const GLfloat *  value); </code>    */
  public void glUniformMatrix4x3fv(int location, int count, boolean transpose, float[] value, int value_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUnlockArraysEXT}(void); </code>    */
  public void glUnlockArraysEXT();

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glUnmapBuffer}(GLenum id); </code>    */
  public boolean glUnmapBuffer(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> GLboolean {@native glUnmapBufferARB}(GLenum id); </code>    */
  public boolean glUnmapBufferARB(int id);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUpdateObjectBufferATI}(GLuint buffer, GLuint offset, GLsizei size, const GLvoid *  pointer, GLenum preserve); </code>    */
  public void glUpdateObjectBufferATI(int buffer, int offset, int size, java.nio.Buffer pointer, int preserve);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUseProgram}(GLuint mode); </code>    */
  public void glUseProgram(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glUseProgramObjectARB}(GLhandleARB mode); </code>    */
  public void glUseProgramObjectARB(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glValidateProgram}(GLuint mode); </code>    */
  public void glValidateProgram(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glValidateProgramARB}(GLhandleARB mode); </code>    */
  public void glValidateProgramARB(int mode);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantArrayObjectATI}(GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset); </code>    */
  public void glVariantArrayObjectATI(int id, int type, int stride, int buffer, int offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantPointerEXT}(GLuint id, GLenum type, GLuint stride, const GLvoid *  addr); </code>    */
  public void glVariantPointerEXT(int id, int type, int stride, java.nio.Buffer addr);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantPointerEXT}(GLuint id, GLenum type, GLuint stride, const GLvoid *  addr); </code>    */
  public void glVariantPointerEXT(int id, int type, int stride, long addr_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantbvEXT}(GLuint index, const GLbyte *  v); </code>    */
  public void glVariantbvEXT(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantbvEXT}(GLuint index, const GLbyte *  v); </code>    */
  public void glVariantbvEXT(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantdvEXT}(GLuint target, const GLdouble *  v); </code>    */
  public void glVariantdvEXT(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantdvEXT}(GLuint target, const GLdouble *  v); </code>    */
  public void glVariantdvEXT(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantfvEXT}(GLuint target, const GLfloat *  v); </code>    */
  public void glVariantfvEXT(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantfvEXT}(GLuint target, const GLfloat *  v); </code>    */
  public void glVariantfvEXT(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantivEXT}(GLuint target, const GLint *  v); </code>    */
  public void glVariantivEXT(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantivEXT}(GLuint target, const GLint *  v); </code>    */
  public void glVariantivEXT(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantsvEXT}(GLuint target, const GLshort *  v); </code>    */
  public void glVariantsvEXT(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantsvEXT}(GLuint target, const GLshort *  v); </code>    */
  public void glVariantsvEXT(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantubvEXT}(GLuint index, const GLubyte *  v); </code>    */
  public void glVariantubvEXT(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantubvEXT}(GLuint index, const GLubyte *  v); </code>    */
  public void glVariantubvEXT(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantuivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVariantuivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantuivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVariantuivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantusvEXT}(GLuint index, const GLushort *  v); </code>    */
  public void glVariantusvEXT(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVariantusvEXT}(GLuint index, const GLushort *  v); </code>    */
  public void glVariantusvEXT(int index, short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2d}(GLdouble x, GLdouble y); </code>    */
  public void glVertex2d(double x, double y);

  /** Interface to C language function: <br> <code> void {@native glVertex2dv}(const GLdouble *  v); </code>    */
  public void glVertex2dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2dv}(const GLdouble *  v); </code>    */
  public void glVertex2dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2f}(GLfloat x, GLfloat y); </code>    */
  public void glVertex2f(float x, float y);

  /** Interface to C language function: <br> <code> void {@native glVertex2fv}(const GLfloat *  v); </code>    */
  public void glVertex2fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2fv}(const GLfloat *  v); </code>    */
  public void glVertex2fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex2hNV}(GLhalfNV x, GLhalfNV y); </code>    */
  public void glVertex2hNV(short x, short y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex2hvNV}(const GLhalfNV *  v); </code>    */
  public void glVertex2hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex2hvNV}(const GLhalfNV *  v); </code>    */
  public void glVertex2hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2i}(GLint x, GLint y); </code>    */
  public void glVertex2i(int x, int y);

  /** Interface to C language function: <br> <code> void {@native glVertex2iv}(const GLint *  v); </code>    */
  public void glVertex2iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2iv}(const GLint *  v); </code>    */
  public void glVertex2iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex2s}(GLshort x, GLshort y); </code>    */
  public void glVertex2s(short x, short y);

  /** Interface to C language function: <br> <code> void {@native glVertex2sv}(const GLshort *  v); </code>    */
  public void glVertex2sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex2sv}(const GLshort *  v); </code>    */
  public void glVertex2sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3d}(GLdouble x, GLdouble y, GLdouble z); </code>    */
  public void glVertex3d(double x, double y, double z);

  /** Interface to C language function: <br> <code> void {@native glVertex3dv}(const GLdouble *  v); </code>    */
  public void glVertex3dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3dv}(const GLdouble *  v); </code>    */
  public void glVertex3dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3f}(GLfloat x, GLfloat y, GLfloat z); </code>    */
  public void glVertex3f(float x, float y, float z);

  /** Interface to C language function: <br> <code> void {@native glVertex3fv}(const GLfloat *  v); </code>    */
  public void glVertex3fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3fv}(const GLfloat *  v); </code>    */
  public void glVertex3fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex3hNV}(GLhalfNV red, GLhalfNV green, GLhalfNV blue); </code>    */
  public void glVertex3hNV(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex3hvNV}(const GLhalfNV *  v); </code>    */
  public void glVertex3hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex3hvNV}(const GLhalfNV *  v); </code>    */
  public void glVertex3hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3i}(GLint x, GLint y, GLint z); </code>    */
  public void glVertex3i(int x, int y, int z);

  /** Interface to C language function: <br> <code> void {@native glVertex3iv}(const GLint *  v); </code>    */
  public void glVertex3iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3iv}(const GLint *  v); </code>    */
  public void glVertex3iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex3s}(GLshort x, GLshort y, GLshort z); </code>    */
  public void glVertex3s(short x, short y, short z);

  /** Interface to C language function: <br> <code> void {@native glVertex3sv}(const GLshort *  v); </code>    */
  public void glVertex3sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex3sv}(const GLshort *  v); </code>    */
  public void glVertex3sv(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4d}(GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glVertex4d(double x, double y, double z, double w);

  /** Interface to C language function: <br> <code> void {@native glVertex4dv}(const GLdouble *  v); </code>    */
  public void glVertex4dv(java.nio.DoubleBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4dv}(const GLdouble *  v); </code>    */
  public void glVertex4dv(double[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4f}(GLfloat x, GLfloat y, GLfloat z, GLfloat w); </code>    */
  public void glVertex4f(float x, float y, float z, float w);

  /** Interface to C language function: <br> <code> void {@native glVertex4fv}(const GLfloat *  v); </code>    */
  public void glVertex4fv(java.nio.FloatBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4fv}(const GLfloat *  v); </code>    */
  public void glVertex4fv(float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex4hNV}(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w); </code>    */
  public void glVertex4hNV(short x, short y, short z, short w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex4hvNV}(const GLhalfNV *  v); </code>    */
  public void glVertex4hvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertex4hvNV}(const GLhalfNV *  v); </code>    */
  public void glVertex4hvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4i}(GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glVertex4i(int x, int y, int z, int w);

  /** Interface to C language function: <br> <code> void {@native glVertex4iv}(const GLint *  v); </code>    */
  public void glVertex4iv(java.nio.IntBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4iv}(const GLint *  v); </code>    */
  public void glVertex4iv(int[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glVertex4s}(GLshort x, GLshort y, GLshort z, GLshort w); </code>    */
  public void glVertex4s(short x, short y, short z, short w);

  /** Interface to C language function: <br> <code> void {@native glVertex4sv}(const GLshort *  v); </code>    */
  public void glVertex4sv(java.nio.ShortBuffer v);

  /** Interface to C language function: <br> <code> void {@native glVertex4sv}(const GLshort *  v); </code>    */
  public void glVertex4sv(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexArrayParameteriAPPLE}(GLenum target, GLint s); </code>    */
  public void glVertexArrayParameteriAPPLE(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexArrayRangeAPPLE}(GLsizei length, GLvoid *  pointer); </code>    */
  public void glVertexArrayRangeAPPLE(int length, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexArrayRangeNV}(GLsizei length, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glVertexArrayRangeNV(int length, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1d}(GLuint target, GLdouble s); </code>    */
  public void glVertexAttrib1d(int target, double s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dARB}(GLuint target, GLdouble s); </code>    */
  public void glVertexAttrib1dARB(int target, double s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dNV}(GLuint target, GLdouble s); </code>    */
  public void glVertexAttrib1dNV(int target, double s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib1dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib1dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib1dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib1dvARB(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib1dvNV(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib1dvNV(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1f}(GLuint target, GLfloat s); </code>    */
  public void glVertexAttrib1f(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fARB}(GLuint target, GLfloat s); </code>    */
  public void glVertexAttrib1fARB(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fNV}(GLuint target, GLfloat s); </code>    */
  public void glVertexAttrib1fNV(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib1fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib1fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib1fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib1fvARB(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib1fvNV(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib1fvNV(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1hNV}(GLuint target, GLhalfNV s); </code>    */
  public void glVertexAttrib1hNV(int target, short s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib1hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib1hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1s}(GLuint target, GLshort s); </code>    */
  public void glVertexAttrib1s(int target, short s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1sARB}(GLuint target, GLshort s); </code>    */
  public void glVertexAttrib1sARB(int target, short s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1sNV}(GLuint target, GLshort s); </code>    */
  public void glVertexAttrib1sNV(int target, short s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib1sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib1sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib1svARB(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib1svARB(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib1svNV(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib1svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib1svNV(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2d}(GLuint target, GLdouble s, GLdouble t); </code>    */
  public void glVertexAttrib2d(int target, double s, double t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dARB}(GLuint target, GLdouble s, GLdouble t); </code>    */
  public void glVertexAttrib2dARB(int target, double s, double t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dNV}(GLuint target, GLdouble s, GLdouble t); </code>    */
  public void glVertexAttrib2dNV(int target, double s, double t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib2dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib2dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib2dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib2dvARB(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib2dvNV(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib2dvNV(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2f}(GLuint target, GLfloat s, GLfloat t); </code>    */
  public void glVertexAttrib2f(int target, float s, float t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fARB}(GLuint target, GLfloat s, GLfloat t); </code>    */
  public void glVertexAttrib2fARB(int target, float s, float t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fNV}(GLuint target, GLfloat s, GLfloat t); </code>    */
  public void glVertexAttrib2fNV(int target, float s, float t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib2fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib2fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib2fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib2fvARB(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib2fvNV(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib2fvNV(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2hNV}(GLuint target, GLhalfNV s, GLhalfNV t); </code>    */
  public void glVertexAttrib2hNV(int target, short s, short t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib2hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib2hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2s}(GLuint target, GLshort s, GLshort t); </code>    */
  public void glVertexAttrib2s(int target, short s, short t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2sARB}(GLuint target, GLshort s, GLshort t); </code>    */
  public void glVertexAttrib2sARB(int target, short s, short t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2sNV}(GLuint target, GLshort s, GLshort t); </code>    */
  public void glVertexAttrib2sNV(int target, short s, short t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib2sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib2sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib2svARB(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib2svARB(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib2svNV(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib2svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib2svNV(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3d}(GLuint target, GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glVertexAttrib3d(int target, double s, double t, double r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dARB}(GLuint target, GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glVertexAttrib3dARB(int target, double s, double t, double r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dNV}(GLuint target, GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glVertexAttrib3dNV(int target, double s, double t, double r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib3dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib3dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib3dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib3dvARB(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib3dvNV(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib3dvNV(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3f}(GLuint target, GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glVertexAttrib3f(int target, float s, float t, float r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fARB}(GLuint target, GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glVertexAttrib3fARB(int target, float s, float t, float r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fNV}(GLuint target, GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glVertexAttrib3fNV(int target, float s, float t, float r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib3fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib3fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib3fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib3fvARB(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib3fvNV(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib3fvNV(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3hNV}(GLuint target, GLhalfNV s, GLhalfNV t, GLhalfNV r); </code>    */
  public void glVertexAttrib3hNV(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib3hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib3hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3s}(GLuint target, GLshort s, GLshort t, GLshort r); </code>    */
  public void glVertexAttrib3s(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3sARB}(GLuint target, GLshort s, GLshort t, GLshort r); </code>    */
  public void glVertexAttrib3sARB(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3sNV}(GLuint target, GLshort s, GLshort t, GLshort r); </code>    */
  public void glVertexAttrib3sNV(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib3sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib3sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib3svARB(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib3svARB(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib3svNV(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib3svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib3svNV(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4Nbv(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nbv}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4Nbv(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NbvARB}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4NbvARB(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NbvARB}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4NbvARB(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Niv}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4Niv(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Niv}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4Niv(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NivARB}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4NivARB(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NivARB}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4NivARB(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nsv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4Nsv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nsv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4Nsv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NsvARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4NsvARB(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NsvARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4NsvARB(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nub}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code>    */
  public void glVertexAttrib4Nub(int index, byte x, byte y, byte z, byte w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NubARB}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code>    */
  public void glVertexAttrib4NubARB(int index, byte x, byte y, byte z, byte w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4Nubv(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nubv}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4Nubv(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NubvARB}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4NubvARB(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NubvARB}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4NubvARB(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4Nuiv(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nuiv}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4Nuiv(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NuivARB}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4NuivARB(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NuivARB}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4NuivARB(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4Nusv(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4Nusv}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4Nusv(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NusvARB}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4NusvARB(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4NusvARB}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4NusvARB(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4bv(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4bv}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4bv(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4bvARB}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4bvARB(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4bvARB}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttrib4bvARB(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4d}(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code>    */
  public void glVertexAttrib4d(int target, double s, double t, double r, double q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dARB}(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code>    */
  public void glVertexAttrib4dARB(int target, double s, double t, double r, double q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dNV}(GLuint target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code>    */
  public void glVertexAttrib4dNV(int target, double s, double t, double r, double q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib4dv(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dv}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib4dv(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib4dvARB(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dvARB}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib4dvARB(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib4dvNV(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4dvNV}(GLuint target, const GLdouble *  v); </code>    */
  public void glVertexAttrib4dvNV(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4f}(GLuint target, GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code>    */
  public void glVertexAttrib4f(int target, float s, float t, float r, float q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fARB}(GLuint target, GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code>    */
  public void glVertexAttrib4fARB(int target, float s, float t, float r, float q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fNV}(GLuint target, GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code>    */
  public void glVertexAttrib4fNV(int target, float s, float t, float r, float q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib4fv(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fv}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib4fv(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib4fvARB(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fvARB}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib4fvARB(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib4fvNV(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4fvNV}(GLuint target, const GLfloat *  v); </code>    */
  public void glVertexAttrib4fvNV(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4hNV}(GLuint target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q); </code>    */
  public void glVertexAttrib4hNV(int target, short s, short t, short r, short q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib4hvNV(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4hvNV}(GLuint index, const GLhalfNV *  v); </code>    */
  public void glVertexAttrib4hvNV(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4iv}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4iv(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4iv}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4iv(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ivARB}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4ivARB(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ivARB}(GLuint target, const GLint *  v); </code>    */
  public void glVertexAttrib4ivARB(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4s}(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q); </code>    */
  public void glVertexAttrib4s(int target, short s, short t, short r, short q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4sARB}(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q); </code>    */
  public void glVertexAttrib4sARB(int target, short s, short t, short r, short q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4sNV}(GLuint target, GLshort s, GLshort t, GLshort r, GLshort q); </code>    */
  public void glVertexAttrib4sNV(int target, short s, short t, short r, short q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4sv(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4sv}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4sv(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4svARB(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4svARB}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4svARB(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4svNV(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4svNV}(GLuint target, const GLshort *  v); </code>    */
  public void glVertexAttrib4svNV(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ubNV}(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w); </code>    */
  public void glVertexAttrib4ubNV(int index, byte x, byte y, byte z, byte w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4ubv(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ubv}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4ubv(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ubvARB}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4ubvARB(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ubvARB}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4ubvARB(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ubvNV}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4ubvNV(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4ubvNV}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttrib4ubvNV(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4uiv(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4uiv}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4uiv(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4uivARB}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4uivARB(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4uivARB}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttrib4uivARB(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4usv(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4usv}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4usv(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4usvARB}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4usvARB(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttrib4usvARB}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttrib4usvARB(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribArrayObjectATI}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset); </code>    */
  public void glVertexAttribArrayObjectATI(int index, int size, int type, boolean normalized, int stride, int buffer, int offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI1iEXT}(GLuint index, GLint x); </code>    */
  public void glVertexAttribI1iEXT(int index, int x);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI1ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI1ivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI1ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI1ivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI1uiEXT}(GLuint index, GLuint x); </code>    */
  public void glVertexAttribI1uiEXT(int index, int x);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI1uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI1uivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI1uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI1uivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI2iEXT}(GLuint index, GLint x, GLint y); </code>    */
  public void glVertexAttribI2iEXT(int index, int x, int y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI2ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI2ivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI2ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI2ivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI2uiEXT}(GLuint index, GLuint x, GLuint y); </code>    */
  public void glVertexAttribI2uiEXT(int index, int x, int y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI2uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI2uivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI2uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI2uivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI3iEXT}(GLuint index, GLint x, GLint y, GLint z); </code>    */
  public void glVertexAttribI3iEXT(int index, int x, int y, int z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI3ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI3ivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI3ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI3ivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI3uiEXT}(GLuint index, GLuint x, GLuint y, GLuint z); </code>    */
  public void glVertexAttribI3uiEXT(int index, int x, int y, int z);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI3uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI3uivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI3uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI3uivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4bvEXT}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttribI4bvEXT(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4bvEXT}(GLuint index, const GLbyte *  v); </code>    */
  public void glVertexAttribI4bvEXT(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4iEXT}(GLuint index, GLint x, GLint y, GLint z, GLint w); </code>    */
  public void glVertexAttribI4iEXT(int index, int x, int y, int z, int w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI4ivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4ivEXT}(GLuint index, const GLint *  v); </code>    */
  public void glVertexAttribI4ivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4svEXT}(GLuint index, const GLshort *  v); </code>    */
  public void glVertexAttribI4svEXT(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4svEXT}(GLuint index, const GLshort *  v); </code>    */
  public void glVertexAttribI4svEXT(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4ubvEXT}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttribI4ubvEXT(int index, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4ubvEXT}(GLuint index, const GLubyte *  v); </code>    */
  public void glVertexAttribI4ubvEXT(int index, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4uiEXT}(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w); </code>    */
  public void glVertexAttribI4uiEXT(int index, int x, int y, int z, int w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI4uivEXT(int index, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4uivEXT}(GLuint index, const GLuint *  v); </code>    */
  public void glVertexAttribI4uivEXT(int index, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4usvEXT}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttribI4usvEXT(int index, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribI4usvEXT}(GLuint index, const GLushort *  v); </code>    */
  public void glVertexAttribI4usvEXT(int index, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribIPointerEXT}(GLuint index, GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glVertexAttribIPointerEXT(int index, int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribPointer}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glVertexAttribPointer(int index, int size, int type, boolean normalized, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribPointer}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glVertexAttribPointer(int index, int size, int type, boolean normalized, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribPointerARB}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glVertexAttribPointerARB(int index, int size, int type, boolean normalized, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribPointerARB}(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glVertexAttribPointerARB(int index, int size, int type, boolean normalized, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribPointerNV}(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glVertexAttribPointerNV(int index, int fsize, int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribPointerNV}(GLuint index, GLint fsize, GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glVertexAttribPointerNV(int index, int fsize, int type, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs1dvNV(int index, int count, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs1dvNV(int index, int count, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs1fvNV(int target, int n, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs1fvNV(int target, int n, float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs1hvNV(int index, int n, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs1hvNV(int index, int n, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs1svNV(int index, int count, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs1svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs1svNV(int index, int count, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs2dvNV(int index, int count, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs2dvNV(int index, int count, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs2fvNV(int target, int n, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs2fvNV(int target, int n, float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs2hvNV(int index, int n, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs2hvNV(int index, int n, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs2svNV(int index, int count, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs2svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs2svNV(int index, int count, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs3dvNV(int index, int count, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs3dvNV(int index, int count, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs3fvNV(int target, int n, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs3fvNV(int target, int n, float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs3hvNV(int index, int n, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs3hvNV(int index, int n, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs3svNV(int index, int count, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs3svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs3svNV(int index, int count, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs4dvNV(int index, int count, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4dvNV}(GLuint index, GLsizei count, const GLdouble *  v); </code>    */
  public void glVertexAttribs4dvNV(int index, int count, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs4fvNV(int target, int n, java.nio.FloatBuffer points);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4fvNV}(GLuint target, GLsizei n, const GLfloat *  points); </code>    */
  public void glVertexAttribs4fvNV(int target, int n, float[] points, int points_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs4hvNV(int index, int n, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4hvNV}(GLuint index, GLsizei n, const GLhalfNV *  v); </code>    */
  public void glVertexAttribs4hvNV(int index, int n, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs4svNV(int index, int count, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4svNV}(GLuint index, GLsizei count, const GLshort *  v); </code>    */
  public void glVertexAttribs4svNV(int index, int count, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4ubvNV}(GLuint index, GLsizei count, const GLubyte *  v); </code>    */
  public void glVertexAttribs4ubvNV(int index, int count, java.nio.ByteBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexAttribs4ubvNV}(GLuint index, GLsizei count, const GLubyte *  v); </code>    */
  public void glVertexAttribs4ubvNV(int index, int count, byte[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexBlendARB}(GLint count); </code>    */
  public void glVertexBlendARB(int count);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexBlendEnvfATI}(GLenum target, GLfloat s); </code>    */
  public void glVertexBlendEnvfATI(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexBlendEnviATI}(GLenum target, GLint s); </code>    */
  public void glVertexBlendEnviATI(int target, int s);

  /** Interface to C language function: <br> <code> void {@native glVertexPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  ptr); </code> 
      @param ptr a direct {@link java.nio.Buffer}   */
  public void glVertexPointer(int size, int type, int stride, java.nio.Buffer ptr);

  /** Interface to C language function: <br> <code> void {@native glVertexPointer}(GLint size, GLenum type, GLsizei stride, const GLvoid *  ptr); </code>    */
  public void glVertexPointer(int size, int type, int stride, long ptr_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1dATI}(GLenum target, GLdouble s); </code>    */
  public void glVertexStream1dATI(int target, double s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream1dvATI(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream1dvATI(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1fATI}(GLenum target, GLfloat s); </code>    */
  public void glVertexStream1fATI(int target, float s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream1fvATI(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream1fvATI(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1iATI}(GLenum target, GLint s); </code>    */
  public void glVertexStream1iATI(int target, int s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream1ivATI(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream1ivATI(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1sATI}(GLenum target, GLshort s); </code>    */
  public void glVertexStream1sATI(int target, short s);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream1svATI(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream1svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream1svATI(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2dATI}(GLenum target, GLdouble s, GLdouble t); </code>    */
  public void glVertexStream2dATI(int target, double s, double t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream2dvATI(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream2dvATI(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2fATI}(GLenum target, GLfloat s, GLfloat t); </code>    */
  public void glVertexStream2fATI(int target, float s, float t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream2fvATI(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream2fvATI(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2iATI}(GLenum target, GLint s, GLint t); </code>    */
  public void glVertexStream2iATI(int target, int s, int t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream2ivATI(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream2ivATI(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2sATI}(GLenum target, GLshort s, GLshort t); </code>    */
  public void glVertexStream2sATI(int target, short s, short t);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream2svATI(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream2svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream2svATI(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3dATI}(GLenum target, GLdouble s, GLdouble t, GLdouble r); </code>    */
  public void glVertexStream3dATI(int target, double s, double t, double r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream3dvATI(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream3dvATI(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3fATI}(GLenum target, GLfloat s, GLfloat t, GLfloat r); </code>    */
  public void glVertexStream3fATI(int target, float s, float t, float r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream3fvATI(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream3fvATI(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3iATI}(GLenum target, GLint s, GLint t, GLint r); </code>    */
  public void glVertexStream3iATI(int target, int s, int t, int r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream3ivATI(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream3ivATI(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3sATI}(GLenum target, GLshort s, GLshort t, GLshort r); </code>    */
  public void glVertexStream3sATI(int target, short s, short t, short r);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream3svATI(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream3svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream3svATI(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4dATI}(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q); </code>    */
  public void glVertexStream4dATI(int target, double s, double t, double r, double q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream4dvATI(int target, java.nio.DoubleBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4dvATI}(GLenum target, const GLdouble *  v); </code>    */
  public void glVertexStream4dvATI(int target, double[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4fATI}(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q); </code>    */
  public void glVertexStream4fATI(int target, float s, float t, float r, float q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream4fvATI(int target, java.nio.FloatBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4fvATI}(GLenum target, const GLfloat *  v); </code>    */
  public void glVertexStream4fvATI(int target, float[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4iATI}(GLenum target, GLint start, GLint x, GLint y, GLint width); </code>    */
  public void glVertexStream4iATI(int target, int start, int x, int y, int width);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream4ivATI(int target, java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4ivATI}(GLenum target, const GLint *  v); </code>    */
  public void glVertexStream4ivATI(int target, int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4sATI}(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q); </code>    */
  public void glVertexStream4sATI(int target, short s, short t, short r, short q);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream4svATI(int target, java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexStream4svATI}(GLenum target, const GLshort *  v); </code>    */
  public void glVertexStream4svATI(int target, short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeightPointerEXT}(GLsizei size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glVertexWeightPointerEXT(int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeightPointerEXT}(GLsizei size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glVertexWeightPointerEXT(int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeightfEXT}(GLfloat coord); </code>    */
  public void glVertexWeightfEXT(float coord);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeightfvEXT}(const GLfloat *  m); </code>    */
  public void glVertexWeightfvEXT(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeightfvEXT}(const GLfloat *  m); </code>    */
  public void glVertexWeightfvEXT(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeighthNV}(GLhalfNV factor); </code>    */
  public void glVertexWeighthNV(short factor);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeighthvNV}(const GLhalfNV *  v); </code>    */
  public void glVertexWeighthvNV(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glVertexWeighthvNV}(const GLhalfNV *  v); </code>    */
  public void glVertexWeighthvNV(short[] v, int v_offset);

  /** Interface to C language function: <br> <code> void {@native glViewport}(GLint x, GLint y, GLsizei width, GLsizei height); </code>    */
  public void glViewport(int x, int y, int width, int height);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightPointerARB}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code> 
      @param pointer a direct {@link java.nio.Buffer}   */
  public void glWeightPointerARB(int size, int type, int stride, java.nio.Buffer pointer);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightPointerARB}(GLint size, GLenum type, GLsizei stride, const GLvoid *  pointer); </code>    */
  public void glWeightPointerARB(int size, int type, int stride, long pointer_buffer_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightbvARB}(GLint size, const GLbyte *  weights); </code>    */
  public void glWeightbvARB(int size, java.nio.ByteBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightbvARB}(GLint size, const GLbyte *  weights); </code>    */
  public void glWeightbvARB(int size, byte[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightdvARB}(GLint size, const GLdouble *  weights); </code>    */
  public void glWeightdvARB(int size, java.nio.DoubleBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightdvARB}(GLint size, const GLdouble *  weights); </code>    */
  public void glWeightdvARB(int size, double[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightfvARB}(GLint size, const GLfloat *  weights); </code>    */
  public void glWeightfvARB(int size, java.nio.FloatBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightfvARB}(GLint size, const GLfloat *  weights); </code>    */
  public void glWeightfvARB(int size, float[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightivARB}(GLint size, const GLint *  weights); </code>    */
  public void glWeightivARB(int size, java.nio.IntBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightivARB}(GLint size, const GLint *  weights); </code>    */
  public void glWeightivARB(int size, int[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightsvARB}(GLint size, const GLshort *  weights); </code>    */
  public void glWeightsvARB(int size, java.nio.ShortBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightsvARB}(GLint size, const GLshort *  weights); </code>    */
  public void glWeightsvARB(int size, short[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightubvARB}(GLint size, const GLubyte *  weights); </code>    */
  public void glWeightubvARB(int size, java.nio.ByteBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightubvARB}(GLint size, const GLubyte *  weights); </code>    */
  public void glWeightubvARB(int size, byte[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightuivARB}(GLint n, const GLuint *  ids); </code>    */
  public void glWeightuivARB(int n, java.nio.IntBuffer ids);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightuivARB}(GLint n, const GLuint *  ids); </code>    */
  public void glWeightuivARB(int n, int[] ids, int ids_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightusvARB}(GLint size, const GLushort *  weights); </code>    */
  public void glWeightusvARB(int size, java.nio.ShortBuffer weights);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWeightusvARB}(GLint size, const GLushort *  weights); </code>    */
  public void glWeightusvARB(int size, short[] weights, int weights_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2d}(GLdouble x, GLdouble y); </code>    */
  public void glWindowPos2d(double x, double y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dARB}(GLdouble x, GLdouble y); </code>    */
  public void glWindowPos2dARB(double x, double y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dMESA}(GLdouble x, GLdouble y); </code>    */
  public void glWindowPos2dMESA(double x, double y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dv}(const GLdouble *  m); </code>    */
  public void glWindowPos2dv(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dv}(const GLdouble *  m); </code>    */
  public void glWindowPos2dv(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dvARB}(const GLdouble *  m); </code>    */
  public void glWindowPos2dvARB(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dvARB}(const GLdouble *  m); </code>    */
  public void glWindowPos2dvARB(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dvMESA}(const GLdouble *  m); </code>    */
  public void glWindowPos2dvMESA(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2dvMESA}(const GLdouble *  m); </code>    */
  public void glWindowPos2dvMESA(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2f}(GLfloat x, GLfloat y); </code>    */
  public void glWindowPos2f(float x, float y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fARB}(GLfloat x, GLfloat y); </code>    */
  public void glWindowPos2fARB(float x, float y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fMESA}(GLfloat x, GLfloat y); </code>    */
  public void glWindowPos2fMESA(float x, float y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fv}(const GLfloat *  m); </code>    */
  public void glWindowPos2fv(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fv}(const GLfloat *  m); </code>    */
  public void glWindowPos2fv(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fvARB}(const GLfloat *  m); </code>    */
  public void glWindowPos2fvARB(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fvARB}(const GLfloat *  m); </code>    */
  public void glWindowPos2fvARB(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fvMESA}(const GLfloat *  m); </code>    */
  public void glWindowPos2fvMESA(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2fvMESA}(const GLfloat *  m); </code>    */
  public void glWindowPos2fvMESA(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2i}(GLint x, GLint y); </code>    */
  public void glWindowPos2i(int x, int y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2iARB}(GLint x, GLint y); </code>    */
  public void glWindowPos2iARB(int x, int y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2iMESA}(GLint x, GLint y); </code>    */
  public void glWindowPos2iMESA(int x, int y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2iv}(const GLint *  v); </code>    */
  public void glWindowPos2iv(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2iv}(const GLint *  v); </code>    */
  public void glWindowPos2iv(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2ivARB}(const GLint *  v); </code>    */
  public void glWindowPos2ivARB(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2ivARB}(const GLint *  v); </code>    */
  public void glWindowPos2ivARB(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2ivMESA}(const GLint *  v); </code>    */
  public void glWindowPos2ivMESA(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2ivMESA}(const GLint *  v); </code>    */
  public void glWindowPos2ivMESA(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2s}(GLshort x, GLshort y); </code>    */
  public void glWindowPos2s(short x, short y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2sARB}(GLshort x, GLshort y); </code>    */
  public void glWindowPos2sARB(short x, short y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2sMESA}(GLshort x, GLshort y); </code>    */
  public void glWindowPos2sMESA(short x, short y);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2sv}(const GLshort *  v); </code>    */
  public void glWindowPos2sv(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2sv}(const GLshort *  v); </code>    */
  public void glWindowPos2sv(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2svARB}(const GLshort *  v); </code>    */
  public void glWindowPos2svARB(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2svARB}(const GLshort *  v); </code>    */
  public void glWindowPos2svARB(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2svMESA}(const GLshort *  v); </code>    */
  public void glWindowPos2svMESA(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos2svMESA}(const GLshort *  v); </code>    */
  public void glWindowPos2svMESA(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3d}(GLdouble red, GLdouble green, GLdouble blue); </code>    */
  public void glWindowPos3d(double red, double green, double blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dARB}(GLdouble red, GLdouble green, GLdouble blue); </code>    */
  public void glWindowPos3dARB(double red, double green, double blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dMESA}(GLdouble red, GLdouble green, GLdouble blue); </code>    */
  public void glWindowPos3dMESA(double red, double green, double blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dv}(const GLdouble *  m); </code>    */
  public void glWindowPos3dv(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dv}(const GLdouble *  m); </code>    */
  public void glWindowPos3dv(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dvARB}(const GLdouble *  m); </code>    */
  public void glWindowPos3dvARB(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dvARB}(const GLdouble *  m); </code>    */
  public void glWindowPos3dvARB(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dvMESA}(const GLdouble *  m); </code>    */
  public void glWindowPos3dvMESA(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3dvMESA}(const GLdouble *  m); </code>    */
  public void glWindowPos3dvMESA(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3f}(GLfloat red, GLfloat green, GLfloat blue); </code>    */
  public void glWindowPos3f(float red, float green, float blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fARB}(GLfloat red, GLfloat green, GLfloat blue); </code>    */
  public void glWindowPos3fARB(float red, float green, float blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fMESA}(GLfloat red, GLfloat green, GLfloat blue); </code>    */
  public void glWindowPos3fMESA(float red, float green, float blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fv}(const GLfloat *  m); </code>    */
  public void glWindowPos3fv(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fv}(const GLfloat *  m); </code>    */
  public void glWindowPos3fv(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fvARB}(const GLfloat *  m); </code>    */
  public void glWindowPos3fvARB(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fvARB}(const GLfloat *  m); </code>    */
  public void glWindowPos3fvARB(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fvMESA}(const GLfloat *  m); </code>    */
  public void glWindowPos3fvMESA(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3fvMESA}(const GLfloat *  m); </code>    */
  public void glWindowPos3fvMESA(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3i}(GLint red, GLint green, GLint blue); </code>    */
  public void glWindowPos3i(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3iARB}(GLint red, GLint green, GLint blue); </code>    */
  public void glWindowPos3iARB(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3iMESA}(GLint red, GLint green, GLint blue); </code>    */
  public void glWindowPos3iMESA(int red, int green, int blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3iv}(const GLint *  v); </code>    */
  public void glWindowPos3iv(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3iv}(const GLint *  v); </code>    */
  public void glWindowPos3iv(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3ivARB}(const GLint *  v); </code>    */
  public void glWindowPos3ivARB(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3ivARB}(const GLint *  v); </code>    */
  public void glWindowPos3ivARB(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3ivMESA}(const GLint *  v); </code>    */
  public void glWindowPos3ivMESA(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3ivMESA}(const GLint *  v); </code>    */
  public void glWindowPos3ivMESA(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3s}(GLshort red, GLshort green, GLshort blue); </code>    */
  public void glWindowPos3s(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3sARB}(GLshort red, GLshort green, GLshort blue); </code>    */
  public void glWindowPos3sARB(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3sMESA}(GLshort red, GLshort green, GLshort blue); </code>    */
  public void glWindowPos3sMESA(short red, short green, short blue);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3sv}(const GLshort *  v); </code>    */
  public void glWindowPos3sv(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3sv}(const GLshort *  v); </code>    */
  public void glWindowPos3sv(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3svARB}(const GLshort *  v); </code>    */
  public void glWindowPos3svARB(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3svARB}(const GLshort *  v); </code>    */
  public void glWindowPos3svARB(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3svMESA}(const GLshort *  v); </code>    */
  public void glWindowPos3svMESA(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos3svMESA}(const GLshort *  v); </code>    */
  public void glWindowPos3svMESA(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4dMESA}(GLdouble x, GLdouble y, GLdouble z, GLdouble w); </code>    */
  public void glWindowPos4dMESA(double x, double y, double z, double w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4dvMESA}(const GLdouble *  m); </code>    */
  public void glWindowPos4dvMESA(java.nio.DoubleBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4dvMESA}(const GLdouble *  m); </code>    */
  public void glWindowPos4dvMESA(double[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4fMESA}(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha); </code>    */
  public void glWindowPos4fMESA(float red, float green, float blue, float alpha);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4fvMESA}(const GLfloat *  m); </code>    */
  public void glWindowPos4fvMESA(java.nio.FloatBuffer m);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4fvMESA}(const GLfloat *  m); </code>    */
  public void glWindowPos4fvMESA(float[] m, int m_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4iMESA}(GLint location, GLint v0, GLint v1, GLint v2); </code>    */
  public void glWindowPos4iMESA(int location, int v0, int v1, int v2);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4ivMESA}(const GLint *  v); </code>    */
  public void glWindowPos4ivMESA(java.nio.IntBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4ivMESA}(const GLint *  v); </code>    */
  public void glWindowPos4ivMESA(int[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4sMESA}(GLshort x, GLshort y, GLshort z, GLshort w); </code>    */
  public void glWindowPos4sMESA(short x, short y, short z, short w);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4svMESA}(const GLshort *  v); </code>    */
  public void glWindowPos4svMESA(java.nio.ShortBuffer v);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWindowPos4svMESA}(const GLshort *  v); </code>    */
  public void glWindowPos4svMESA(short[] v, int v_offset);

  /** Entry point (through function pointer) to C language function: <br> <code> void {@native glWriteMaskEXT}(GLuint stage, GLuint portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage); </code>    */
  public void glWriteMaskEXT(int stage, int portion, int variable, int input, int mapping, int componentUsage);


  // --- Begin CustomJavaCode .cfg declarations
   /**
    * Returns true if the specified OpenGL core- or extension-function can be
    * used successfully through this GL instance given the current host (OpenGL
    * <i>client</i>) and display (OpenGL <i>server</i>) configuration.<P> 
    * By "successfully" we mean that the function is both <i>callable</i> 
    * on the machine running the program and <i>available</i> on the current 
    * display.<P> 
    *
    * In order to call a function successfully, the function must be both
    * <i>callable</i> on the machine running the program and <i>available</i> on 
    * the display device that is rendering the output (note: on non-networked, 
    * single-display machines these two conditions are identical; on networked and/or
    * multi-display machines this becomes more complicated). These conditions are
    * met if the function is either part of the core OpenGL version supported by
    * both the host and display, or it is an OpenGL extension function that both
    * the host and display support. <P>
    *
    * A GL function is <i>callable</i> if it is statically linked, or can be 
    * dynamically linked at runtime. 
    * 
    * Whether or not a GL function is <i>available</i> is determined as follows: 
    * <ul>
    *   <li>If the function is an OpenGL core function (i.e., not an
    *   extension), <code>glGetString(GL_VERSION)</code> is used to determine the
    *   version number of the highest OpenGL specification version that both host
    *   and display support, and then the function name is cross-referenced
    *   with that specification version to see if it is part of that version.
    *   <li> If the function is an OpenGL extension, the function name is
    *   cross-referenced with the list returned by
    *   <code>glGetString(GL_EXTENSIONS)</code> to see if the function is one of
    *   the extensions that is supported on both host and display.
    * </ul>
    *
    * <b>NOTE:</b>The availability of a function may change at runtime in
    * response to changes in the display environment. For example, when a window
    * is dragged from one display to another on a multi-display system, or when
    * the properties of the display device are modified (e.g., changing the color
    * depth of the display). Any application that is concerned with handling
    * these situations correctly should confirm availability after a display
    * change before calling a questionable OpenGL function. To detect a change in
    * the display device, please see {@link
    * GLEventListener#displayChanged(GLAutoDrawable,boolean,boolean)}.
    *
    * @param glFunctionName the name of the OpenGL function (e.g., use
    * "glBindRenderbufferEXT" to check if {@link
    * #glBindRenderbufferEXT(int,int)} is available).
    */
   public boolean isFunctionAvailable(String glFunctionName);
   /**
    * Returns true if the specified OpenGL extension can be
    * used successfully through this GL instance given the current host (OpenGL
    * <i>client</i>) and display (OpenGL <i>server</i>) configuration.<P> 
    *
    * @param glExtensionName the name of the OpenGL extension (e.g.,
    * "GL_ARB_vertex_program").
    */
   public boolean isExtensionAvailable(String glExtensionName);
   /**
    * Provides platform-independent access to the <code>wglAllocateMemoryNV</code> /
    * <code>glXAllocateMemoryNV</code> extension.
    */
   public java.nio.ByteBuffer glAllocateMemoryNV(int arg0, float arg1, float arg2, float arg3);
   /** Provides a platform-independent way to specify the minimum swap
       interval for buffer swaps. An argument of 0 disables
       sync-to-vertical-refresh completely, while an argument of 1
       causes the application to wait until the next vertical refresh
       until swapping buffers. The default, which is platform-specific,
       is usually either 0 or 1. This function is not guaranteed to
       have an effect, and in particular only affects heavyweight
       onscreen components. */
   public void setSwapInterval(int interval);
   /**
    * Returns an object through which platform-specific OpenGL extensions
    * (WGL, GLX, etc.) may be accessed. The data type of the returned
    * object and its associated capabilities are undefined. Most
    * applications will never need to call this method. It is highly
    * recommended that any applications which do call this method perform
    * all accesses on the returned object reflectively to guard
    * themselves against changes to the implementation.
    */
   public Object getPlatformGLExtensions();
   /**
    * Returns an object providing access to the specified OpenGL
    * extension. This is intended to provide a mechanism for vendors who
    * which to provide access to new OpenGL extensions without changing
    * the public API of the core package. For example, a user may request
    * access to extension "GL_VENDOR_foo" and receive back an object
    * which implements a vendor-specified interface which can call the
    * OpenGL extension functions corresponding to that extension. It is
    * up to the vendor to specify both the extension name and Java API
    * for accessing it, including which class or interface contains the
    * functions.
    *
    * <P>
    *
    * Note: it is the intent to add new extensions as quickly as possible
    * to the core GL API. Therefore it is unlikely that most vendors will
    * use this extension mechanism, but it is being provided for
    * completeness.
    */
   public Object getExtension(String extensionName);
  // ---- End CustomJavaCode .cfg declarations

} // end of class GL
